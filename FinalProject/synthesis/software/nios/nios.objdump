
nios.elf:     file format elf32-littlenios2
nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000224

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005608 memsz 0x00005608 flags r-x
    LOAD off    0x00006628 vaddr 0x00005628 paddr 0x00007094 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008b00 vaddr 0x00008b00 paddr 0x00008b00 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000053b8  00000224  00000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  000055dc  000055dc  000065dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00005628  00007094  00006628  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00008b00  00008b00  00008b00  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00008c54  00008c54  00008094  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a18  00000000  00000000  000080c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00030c48  00000000  00000000  00008ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009f81  00000000  00000000  00039720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bb51  00000000  00000000  000436a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000014e4  00000000  00000000  0004f1f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c2d  00000000  00000000  000506d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005f5a  00000000  00000000  00053305  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00059260  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000768  00000000  00000000  00059270  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0005be2f  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0005be32  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0005be3e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005be3f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0005be40  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0005be4b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0005be56  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0005be61  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000031  00000000  00000000  0005be6d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000224 l    d  .text	00000000 .text
000055dc l    d  .rodata	00000000 .rodata
00005628 l    d  .rwdata	00000000 .rwdata
00008b00 l    d  .bss	00000000 .bss
00008c54 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/My_Designs/FinalProject/FinalProject/synthesis/software/nios_bsp//obj/HAL/src/crt0.o
0000025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00000408 l     F .text	00000008 __fp_lock
0000041c l     F .text	00000168 __sinit.part.0
00000584 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00005628 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00003064 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000317c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000031a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000032a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000338c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003478 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00003658 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00007084 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000038bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000039fc l     F .text	00000034 alt_dev_reg
00005ffc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00003cd4 l     F .text	00000204 altera_avalon_jtag_uart_irq
00003ed8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00004660 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00004ab4 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00004c04 l     F .text	0000003c alt_get_errno
00004c40 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008b28 g     O .bss	00000004 alt_instruction_exception_handler
00002e2c g     F .text	00000058 _isatty_r
00003594 g     F .text	0000007c alt_main
00000294 g     F .text	000000cc _puts_r
00008b54 g     O .bss	00000100 alt_irq
00002b30 g     F .text	00000064 _lseek_r
00007094 g       *ABS*	00000000 __flash_rwdata_start
00008c54 g       *ABS*	00000000 __alt_heap_start
000020e0 g     F .text	0000005c __sseek
00000714 g     F .text	00000010 __sinit
0000058c g     F .text	00000078 __sfmoreglue
00003634 g     F .text	00000024 __malloc_unlock
00001764 g     F .text	0000012c memmove
00000700 g     F .text	00000014 _cleanup
00005020 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002dcc g     F .text	00000060 _fstat_r
00008b0c g     O .bss	00000004 errno
00002058 g     F .text	00000008 __seofread
00008b14 g     O .bss	00000004 alt_argv
0000f05c g       *ABS*	00000000 _gp
00005e7c g     O .rwdata	00000180 alt_fd_list
00005044 g     F .text	00000090 alt_find_dev
00001664 g     F .text	00000100 memcpy
00000410 g     F .text	0000000c _cleanup_r
00004b88 g     F .text	0000007c alt_io_redirect
000055dc g       *ABS*	00000000 __DTOR_END__
00000360 g     F .text	00000010 puts
00005294 g     F .text	00000098 alt_exception_cause_generated_bad_addr
000040d4 g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002f7c g     F .text	00000064 .hidden __udivsi3
000032dc g     F .text	000000b0 isatty
00008b08 g     O .bss	00000004 __malloc_top_pad
0000075c g     F .text	000004d4 __sfvwrite_r
00001fac g     F .text	00000058 _sbrk_r
00002d68 g     F .text	00000064 _read_r
0000707c g     O .rwdata	00000004 alt_max_fd
00002360 g     F .text	000000f8 _fclose_r
000026f0 g     F .text	00000028 fflush
00008b04 g     O .bss	00000004 __malloc_max_sbrked_mem
000034b4 g     F .text	000000e0 lseek
0000705c g     O .rwdata	00000004 _global_impure_ptr
00001980 g     F .text	0000062c _realloc_r
00008c54 g       *ABS*	00000000 __bss_end
000049d0 g     F .text	000000e4 alt_iic_isr_register
00004f18 g     F .text	00000108 alt_tick
00000734 g     F .text	00000014 __fp_lock_all
00004984 g     F .text	0000004c alt_ic_irq_enabled
00004e7c g     F .text	0000009c alt_alarm_stop
00008b1c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000c8 alt_irq_handler
00005e54 g     O .rwdata	00000028 alt_dev_null
00004640 g     F .text	00000020 alt_dcache_flush_all
00007094 g       *ABS*	00000000 __ram_rwdata_end
00007074 g     O .rwdata	00000008 alt_dev_list
000038f8 g     F .text	00000104 write
00005628 g       *ABS*	00000000 __ram_rodata_end
000031e4 g     F .text	000000bc fstat
00002fe0 g     F .text	0000005c .hidden __umodsi3
00008c54 g       *ABS*	00000000 end
00003c14 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
000055dc g       *ABS*	00000000 __CTOR_LIST__
0001f400 g       *ABS*	00000000 __alt_stack_pointer
000042f0 g     F .text	00000224 altera_avalon_jtag_uart_write
00000724 g     F .text	00000004 __sfp_lock_acquire
0000157c g     F .text	000000e8 memchr
00002834 g     F .text	000002fc _free_r
00005490 g     F .text	00000118 __call_exitprocs
00007064 g     O .rwdata	00000004 __malloc_sbrk_base
00000224 g     F .text	0000003c _start
00008b20 g     O .bss	00000004 _alt_tick_rate
00008b24 g     O .bss	00000004 _alt_nticks
00003694 g     F .text	00000108 read
00003a68 g     F .text	00000048 alt_sys_init
00005400 g     F .text	00000090 __register_exitproc
00003f78 g     F .text	00000068 altera_avalon_jtag_uart_close
0000303c g     F .text	00000028 .hidden __mulsi3
00005628 g       *ABS*	00000000 __ram_rwdata_start
000055dc g       *ABS*	00000000 __ram_rodata_start
00008b2c g     O .bss	00000028 __malloc_current_mallinfo
00003ab0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000051dc g     F .text	000000b8 alt_get_fd
00002308 g     F .text	00000058 _close_r
00005374 g     F .text	0000008c memcmp
00003b70 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00008c54 g       *ABS*	00000000 __alt_stack_base
00003bc0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000021a8 g     F .text	00000160 __swsetup_r
00000604 g     F .text	000000fc __sfp
00005a4c g     O .rwdata	00000408 __malloc_av_
00000730 g     F .text	00000004 __sinit_lock_release
00002004 g     F .text	00000054 __sread
000050d4 g     F .text	00000108 alt_find_file
0000469c g     F .text	000000a4 alt_dev_llist_insert
00003610 g     F .text	00000024 __malloc_lock
0000380c g     F .text	000000b0 sbrk
00002690 g     F .text	00000060 _fflush_r
00008b00 g       *ABS*	00000000 __bss_start
00001890 g     F .text	000000f0 memset
00000260 g     F .text	00000034 main
00008b18 g     O .bss	00000004 alt_envp
00008b00 g     O .bss	00000004 __malloc_max_total_mem
00003b10 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000213c g     F .text	00000008 __sclose
0001f400 g       *ABS*	00000000 __alt_heap_limit
00002458 g     F .text	00000010 fclose
00000d88 g     F .text	000007f4 _malloc_r
00007080 g     O .rwdata	00000004 alt_errno
00000c30 g     F .text	000000a4 _fwalk
00002e84 g     F .text	00000080 .hidden __divsi3
00002718 g     F .text	0000011c _malloc_trim_r
000055dc g       *ABS*	00000000 __CTOR_END__
000055dc g       *ABS*	00000000 __flash_rodata_start
000055dc g       *ABS*	00000000 __DTOR_LIST__
00003a30 g     F .text	00000038 alt_irq_init
0000379c g     F .text	00000070 alt_release_fd
0000532c g     F .text	00000014 atexit
00002144 g     F .text	00000064 _write_r
00007060 g     O .rwdata	00000004 _impure_ptr
00008b10 g     O .bss	00000004 alt_argc
00002468 g     F .text	00000228 __sflush_r
000047a0 g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00000748 g     F .text	00000014 __fp_unlock_all
0000706c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002b94 g     F .text	00000098 __swhatbuf_r
00004820 g     F .text	00000050 alt_ic_isr_register
00007094 g       *ABS*	00000000 _edata
00008c54 g       *ABS*	00000000 _end
00000224 g       *ABS*	00000000 __ram_exceptions_end
00003fe0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000048f8 g     F .text	0000008c alt_ic_irq_disable
00002060 g     F .text	00000080 __swrite
00007068 g     O .rwdata	00000004 __malloc_trim_threshold
00005340 g     F .text	00000034 exit
00000cd4 g     F .text	000000b4 _fwalk_reent
00002f04 g     F .text	00000078 .hidden __modsi3
0001f400 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000728 g     F .text	00000004 __sfp_lock_release
000055a8 g     F .text	00000034 _exit
00004514 g     F .text	0000012c alt_alarm_start
00002c2c g     F .text	0000013c __smakebuf_r
00000370 g     F .text	00000098 strlen
00004d1c g     F .text	00000160 open
00004800 g     F .text	00000020 alt_icache_flush_all
00007088 g     O .rwdata	00000004 alt_priority_mask
00004870 g     F .text	00000088 alt_ic_irq_enable
0000708c g     O .rwdata	00000008 alt_alarm_list
00004740 g     F .text	00000060 _do_ctors
000030a0 g     F .text	000000dc close
000033f4 g     F .text	00000084 alt_load
0000072c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408914 	ori	at,at,548
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001c40 	call	1c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0ffff17 	ldw	r3,-4(fp)
 130:	e0bffe17 	ldw	r2,-8(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001126 	beq	r2,zero,180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	e0bffd17 	ldw	r2,-12(fp)
 140:	100690fa 	slli	r3,r2,3
 144:	00800074 	movhi	r2,1
 148:	1885883a 	add	r2,r3,r2
 14c:	10e2d517 	ldw	r3,-29868(r2)
 150:	e0bffd17 	ldw	r2,-12(fp)
 154:	100890fa 	slli	r4,r2,3
 158:	00800074 	movhi	r2,1
 15c:	2085883a 	add	r2,r4,r2
 160:	10a2d617 	ldw	r2,-29864(r2)
 164:	1009883a 	mov	r4,r2
 168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 16c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 170:	0005313a 	rdctl	r2,ipending
 174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 178:	e0bffb17 	ldw	r2,-20(fp)
 17c:	00000706 	br	19c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 180:	e0bffe17 	ldw	r2,-8(fp)
 184:	1085883a 	add	r2,r2,r2
 188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 18c:	e0bffd17 	ldw	r2,-12(fp)
 190:	10800044 	addi	r2,r2,1
 194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 198:	003fe406 	br	12c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 19c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1a0:	e0bfff17 	ldw	r2,-4(fp)
 1a4:	103fde1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a8:	0001883a 	nop
}
 1ac:	0001883a 	nop
 1b0:	e037883a 	mov	sp,fp
 1b4:	dfc00117 	ldw	ra,4(sp)
 1b8:	df000017 	ldw	fp,0(sp)
 1bc:	dec00204 	addi	sp,sp,8
 1c0:	f800283a 	ret

000001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1c4:	defffb04 	addi	sp,sp,-20
 1c8:	dfc00415 	stw	ra,16(sp)
 1cc:	df000315 	stw	fp,12(sp)
 1d0:	df000304 	addi	fp,sp,12
 1d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1d8:	00bfffc4 	movi	r2,-1
 1dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 1e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1e4:	d0a6b317 	ldw	r2,-25908(gp)
 1e8:	10000726 	beq	r2,zero,208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1ec:	d0a6b317 	ldw	r2,-25908(gp)
 1f0:	e0ffff17 	ldw	r3,-4(fp)
 1f4:	e1bffe17 	ldw	r6,-8(fp)
 1f8:	e17ffd17 	ldw	r5,-12(fp)
 1fc:	1809883a 	mov	r4,r3
 200:	103ee83a 	callr	r2
 204:	00000206 	br	210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 20c:	0005883a 	mov	r2,zero
}
 210:	e037883a 	mov	sp,fp
 214:	dfc00117 	ldw	ra,4(sp)
 218:	df000017 	ldw	fp,0(sp)
 21c:	dec00204 	addi	sp,sp,8
 220:	f800283a 	ret

Disassembly of section .text:

00000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     224:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     228:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
     22c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     230:	d6bc1714 	ori	gp,gp,61532
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     234:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     238:	10a2c014 	ori	r2,r2,35584

    movhi r3, %hi(__bss_end)
     23c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     240:	18e31514 	ori	r3,r3,35924

    beq r2, r3, 1f
     244:	10c00326 	beq	r2,r3,254 <_start+0x30>

0:
    stw zero, (r2)
     248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     24c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     250:	10fffd36 	bltu	r2,r3,248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     254:	00033f40 	call	33f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     258:	00035940 	call	3594 <alt_main>

0000025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     25c:	003fff06 	br	25c <alt_after_alt_main>

00000260 <main>:
 */

#include <stdio.h>

int main()
{
     260:	defffe04 	addi	sp,sp,-8
     264:	dfc00115 	stw	ra,4(sp)
     268:	df000015 	stw	fp,0(sp)
     26c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
     270:	01000034 	movhi	r4,0
     274:	21157704 	addi	r4,r4,21980
     278:	00003600 	call	360 <puts>

  return 0;
     27c:	0005883a 	mov	r2,zero
}
     280:	e037883a 	mov	sp,fp
     284:	dfc00117 	ldw	ra,4(sp)
     288:	df000017 	ldw	fp,0(sp)
     28c:	dec00204 	addi	sp,sp,8
     290:	f800283a 	ret

00000294 <_puts_r>:
     294:	defff504 	addi	sp,sp,-44
     298:	dc000815 	stw	r16,32(sp)
     29c:	2021883a 	mov	r16,r4
     2a0:	2809883a 	mov	r4,r5
     2a4:	dc400915 	stw	r17,36(sp)
     2a8:	dfc00a15 	stw	ra,40(sp)
     2ac:	2823883a 	mov	r17,r5
     2b0:	00003700 	call	370 <strlen>
     2b4:	11000044 	addi	r4,r2,1
     2b8:	d8800515 	stw	r2,20(sp)
     2bc:	00800044 	movi	r2,1
     2c0:	00c00034 	movhi	r3,0
     2c4:	d8800715 	stw	r2,28(sp)
     2c8:	d8800404 	addi	r2,sp,16
     2cc:	18d57c04 	addi	r3,r3,22000
     2d0:	d8800115 	stw	r2,4(sp)
     2d4:	00800084 	movi	r2,2
     2d8:	dc400415 	stw	r17,16(sp)
     2dc:	d8c00615 	stw	r3,24(sp)
     2e0:	d9000315 	stw	r4,12(sp)
     2e4:	d8800215 	stw	r2,8(sp)
     2e8:	81400217 	ldw	r5,8(r16)
     2ec:	80000226 	beq	r16,zero,2f8 <_puts_r+0x64>
     2f0:	80800e17 	ldw	r2,56(r16)
     2f4:	10001326 	beq	r2,zero,344 <_puts_r+0xb0>
     2f8:	2880030b 	ldhu	r2,12(r5)
     2fc:	10c8000c 	andi	r3,r2,8192
     300:	1800061e 	bne	r3,zero,31c <_puts_r+0x88>
     304:	28c01917 	ldw	r3,100(r5)
     308:	0137ffc4 	movi	r4,-8193
     30c:	10880014 	ori	r2,r2,8192
     310:	1906703a 	and	r3,r3,r4
     314:	2880030d 	sth	r2,12(r5)
     318:	28c01915 	stw	r3,100(r5)
     31c:	d9800104 	addi	r6,sp,4
     320:	8009883a 	mov	r4,r16
     324:	000075c0 	call	75c <__sfvwrite_r>
     328:	10000b1e 	bne	r2,zero,358 <_puts_r+0xc4>
     32c:	00800284 	movi	r2,10
     330:	dfc00a17 	ldw	ra,40(sp)
     334:	dc400917 	ldw	r17,36(sp)
     338:	dc000817 	ldw	r16,32(sp)
     33c:	dec00b04 	addi	sp,sp,44
     340:	f800283a 	ret
     344:	8009883a 	mov	r4,r16
     348:	d9400015 	stw	r5,0(sp)
     34c:	00007140 	call	714 <__sinit>
     350:	d9400017 	ldw	r5,0(sp)
     354:	003fe806 	br	2f8 <_puts_r+0x64>
     358:	00bfffc4 	movi	r2,-1
     35c:	003ff406 	br	330 <_puts_r+0x9c>

00000360 <puts>:
     360:	00800034 	movhi	r2,0
     364:	200b883a 	mov	r5,r4
     368:	111c1817 	ldw	r4,28768(r2)
     36c:	00002941 	jmpi	294 <_puts_r>

00000370 <strlen>:
     370:	208000cc 	andi	r2,r4,3
     374:	10002026 	beq	r2,zero,3f8 <strlen+0x88>
     378:	20800007 	ldb	r2,0(r4)
     37c:	10002026 	beq	r2,zero,400 <strlen+0x90>
     380:	2005883a 	mov	r2,r4
     384:	00000206 	br	390 <strlen+0x20>
     388:	10c00007 	ldb	r3,0(r2)
     38c:	18001826 	beq	r3,zero,3f0 <strlen+0x80>
     390:	10800044 	addi	r2,r2,1
     394:	10c000cc 	andi	r3,r2,3
     398:	183ffb1e 	bne	r3,zero,388 <strlen+0x18>
     39c:	11400017 	ldw	r5,0(r2)
     3a0:	01ffbff4 	movhi	r7,65279
     3a4:	39ffbfc4 	addi	r7,r7,-257
     3a8:	29c7883a 	add	r3,r5,r7
     3ac:	01a02074 	movhi	r6,32897
     3b0:	014a303a 	nor	r5,zero,r5
     3b4:	1946703a 	and	r3,r3,r5
     3b8:	31a02004 	addi	r6,r6,-32640
     3bc:	1986703a 	and	r3,r3,r6
     3c0:	1800091e 	bne	r3,zero,3e8 <strlen+0x78>
     3c4:	10800104 	addi	r2,r2,4
     3c8:	11400017 	ldw	r5,0(r2)
     3cc:	29c7883a 	add	r3,r5,r7
     3d0:	014a303a 	nor	r5,zero,r5
     3d4:	1946703a 	and	r3,r3,r5
     3d8:	1986703a 	and	r3,r3,r6
     3dc:	183ff926 	beq	r3,zero,3c4 <strlen+0x54>
     3e0:	00000106 	br	3e8 <strlen+0x78>
     3e4:	10800044 	addi	r2,r2,1
     3e8:	10c00007 	ldb	r3,0(r2)
     3ec:	183ffd1e 	bne	r3,zero,3e4 <strlen+0x74>
     3f0:	1105c83a 	sub	r2,r2,r4
     3f4:	f800283a 	ret
     3f8:	2005883a 	mov	r2,r4
     3fc:	003fe706 	br	39c <strlen+0x2c>
     400:	0005883a 	mov	r2,zero
     404:	f800283a 	ret

00000408 <__fp_lock>:
     408:	0005883a 	mov	r2,zero
     40c:	f800283a 	ret

00000410 <_cleanup_r>:
     410:	01400034 	movhi	r5,0
     414:	2948d804 	addi	r5,r5,9056
     418:	0000cd41 	jmpi	cd4 <_fwalk_reent>

0000041c <__sinit.part.0>:
     41c:	00c00034 	movhi	r3,0
     420:	20800117 	ldw	r2,4(r4)
     424:	18c10404 	addi	r3,r3,1040
     428:	20c00f15 	stw	r3,60(r4)
     42c:	2140bb04 	addi	r5,r4,748
     430:	00c000c4 	movi	r3,3
     434:	20c0b915 	stw	r3,740(r4)
     438:	2140ba15 	stw	r5,744(r4)
     43c:	2000b815 	stw	zero,736(r4)
     440:	10001705 	stb	zero,92(r2)
     444:	10001745 	stb	zero,93(r2)
     448:	10001785 	stb	zero,94(r2)
     44c:	100017c5 	stb	zero,95(r2)
     450:	10001805 	stb	zero,96(r2)
     454:	10001845 	stb	zero,97(r2)
     458:	10001885 	stb	zero,98(r2)
     45c:	100018c5 	stb	zero,99(r2)
     460:	00c00104 	movi	r3,4
     464:	10c00315 	stw	r3,12(r2)
     468:	02000034 	movhi	r8,0
     46c:	20c00217 	ldw	r3,8(r4)
     470:	01c00034 	movhi	r7,0
     474:	01800034 	movhi	r6,0
     478:	01400034 	movhi	r5,0
     47c:	42080104 	addi	r8,r8,8196
     480:	39c81804 	addi	r7,r7,8288
     484:	31883804 	addi	r6,r6,8416
     488:	29484f04 	addi	r5,r5,8508
     48c:	02400074 	movhi	r9,1
     490:	10001915 	stw	zero,100(r2)
     494:	10000015 	stw	zero,0(r2)
     498:	10000115 	stw	zero,4(r2)
     49c:	10000215 	stw	zero,8(r2)
     4a0:	10000415 	stw	zero,16(r2)
     4a4:	10000515 	stw	zero,20(r2)
     4a8:	10000615 	stw	zero,24(r2)
     4ac:	10800715 	stw	r2,28(r2)
     4b0:	12000815 	stw	r8,32(r2)
     4b4:	11c00915 	stw	r7,36(r2)
     4b8:	11800a15 	stw	r6,40(r2)
     4bc:	11400b15 	stw	r5,44(r2)
     4c0:	4a400284 	addi	r9,r9,10
     4c4:	1a400315 	stw	r9,12(r3)
     4c8:	18001915 	stw	zero,100(r3)
     4cc:	18000015 	stw	zero,0(r3)
     4d0:	18000115 	stw	zero,4(r3)
     4d4:	18000215 	stw	zero,8(r3)
     4d8:	18000415 	stw	zero,16(r3)
     4dc:	18001705 	stb	zero,92(r3)
     4e0:	18001745 	stb	zero,93(r3)
     4e4:	18001785 	stb	zero,94(r3)
     4e8:	180017c5 	stb	zero,95(r3)
     4ec:	18001805 	stb	zero,96(r3)
     4f0:	18001845 	stb	zero,97(r3)
     4f4:	18001885 	stb	zero,98(r3)
     4f8:	180018c5 	stb	zero,99(r3)
     4fc:	20800317 	ldw	r2,12(r4)
     500:	024000b4 	movhi	r9,2
     504:	18000515 	stw	zero,20(r3)
     508:	18000615 	stw	zero,24(r3)
     50c:	18c00715 	stw	r3,28(r3)
     510:	1a000815 	stw	r8,32(r3)
     514:	19c00915 	stw	r7,36(r3)
     518:	19800a15 	stw	r6,40(r3)
     51c:	19400b15 	stw	r5,44(r3)
     520:	4a400484 	addi	r9,r9,18
     524:	10001915 	stw	zero,100(r2)
     528:	10000015 	stw	zero,0(r2)
     52c:	10000115 	stw	zero,4(r2)
     530:	10000215 	stw	zero,8(r2)
     534:	12400315 	stw	r9,12(r2)
     538:	10000415 	stw	zero,16(r2)
     53c:	10000515 	stw	zero,20(r2)
     540:	10000615 	stw	zero,24(r2)
     544:	10001705 	stb	zero,92(r2)
     548:	10001745 	stb	zero,93(r2)
     54c:	10001785 	stb	zero,94(r2)
     550:	100017c5 	stb	zero,95(r2)
     554:	10001805 	stb	zero,96(r2)
     558:	10001845 	stb	zero,97(r2)
     55c:	10001885 	stb	zero,98(r2)
     560:	100018c5 	stb	zero,99(r2)
     564:	10800715 	stw	r2,28(r2)
     568:	12000815 	stw	r8,32(r2)
     56c:	11c00915 	stw	r7,36(r2)
     570:	11800a15 	stw	r6,40(r2)
     574:	11400b15 	stw	r5,44(r2)
     578:	00800044 	movi	r2,1
     57c:	20800e15 	stw	r2,56(r4)
     580:	f800283a 	ret

00000584 <__fp_unlock>:
     584:	0005883a 	mov	r2,zero
     588:	f800283a 	ret

0000058c <__sfmoreglue>:
     58c:	defffc04 	addi	sp,sp,-16
     590:	dc800215 	stw	r18,8(sp)
     594:	2825883a 	mov	r18,r5
     598:	dc000015 	stw	r16,0(sp)
     59c:	01401a04 	movi	r5,104
     5a0:	2021883a 	mov	r16,r4
     5a4:	913fffc4 	addi	r4,r18,-1
     5a8:	dfc00315 	stw	ra,12(sp)
     5ac:	dc400115 	stw	r17,4(sp)
     5b0:	000303c0 	call	303c <__mulsi3>
     5b4:	8009883a 	mov	r4,r16
     5b8:	11401d04 	addi	r5,r2,116
     5bc:	1023883a 	mov	r17,r2
     5c0:	0000d880 	call	d88 <_malloc_r>
     5c4:	1021883a 	mov	r16,r2
     5c8:	10000726 	beq	r2,zero,5e8 <__sfmoreglue+0x5c>
     5cc:	11000304 	addi	r4,r2,12
     5d0:	10000015 	stw	zero,0(r2)
     5d4:	14800115 	stw	r18,4(r2)
     5d8:	11000215 	stw	r4,8(r2)
     5dc:	89801a04 	addi	r6,r17,104
     5e0:	000b883a 	mov	r5,zero
     5e4:	00018900 	call	1890 <memset>
     5e8:	8005883a 	mov	r2,r16
     5ec:	dfc00317 	ldw	ra,12(sp)
     5f0:	dc800217 	ldw	r18,8(sp)
     5f4:	dc400117 	ldw	r17,4(sp)
     5f8:	dc000017 	ldw	r16,0(sp)
     5fc:	dec00404 	addi	sp,sp,16
     600:	f800283a 	ret

00000604 <__sfp>:
     604:	defffd04 	addi	sp,sp,-12
     608:	00800034 	movhi	r2,0
     60c:	dc000015 	stw	r16,0(sp)
     610:	141c1717 	ldw	r16,28764(r2)
     614:	dc400115 	stw	r17,4(sp)
     618:	dfc00215 	stw	ra,8(sp)
     61c:	80800e17 	ldw	r2,56(r16)
     620:	2023883a 	mov	r17,r4
     624:	10002b26 	beq	r2,zero,6d4 <__sfp+0xd0>
     628:	8400b804 	addi	r16,r16,736
     62c:	80c00117 	ldw	r3,4(r16)
     630:	80800217 	ldw	r2,8(r16)
     634:	18ffffc4 	addi	r3,r3,-1
     638:	1800050e 	bge	r3,zero,650 <__sfp+0x4c>
     63c:	00002106 	br	6c4 <__sfp+0xc0>
     640:	18ffffc4 	addi	r3,r3,-1
     644:	193fffd8 	cmpnei	r4,r3,-1
     648:	10801a04 	addi	r2,r2,104
     64c:	20001d26 	beq	r4,zero,6c4 <__sfp+0xc0>
     650:	1100030f 	ldh	r4,12(r2)
     654:	203ffa1e 	bne	r4,zero,640 <__sfp+0x3c>
     658:	00fffff4 	movhi	r3,65535
     65c:	18c00044 	addi	r3,r3,1
     660:	10001915 	stw	zero,100(r2)
     664:	10000015 	stw	zero,0(r2)
     668:	10000115 	stw	zero,4(r2)
     66c:	10000215 	stw	zero,8(r2)
     670:	10c00315 	stw	r3,12(r2)
     674:	10000415 	stw	zero,16(r2)
     678:	10000515 	stw	zero,20(r2)
     67c:	10000615 	stw	zero,24(r2)
     680:	10001705 	stb	zero,92(r2)
     684:	10001745 	stb	zero,93(r2)
     688:	10001785 	stb	zero,94(r2)
     68c:	100017c5 	stb	zero,95(r2)
     690:	10001805 	stb	zero,96(r2)
     694:	10001845 	stb	zero,97(r2)
     698:	10001885 	stb	zero,98(r2)
     69c:	100018c5 	stb	zero,99(r2)
     6a0:	10000c15 	stw	zero,48(r2)
     6a4:	10000d15 	stw	zero,52(r2)
     6a8:	10001115 	stw	zero,68(r2)
     6ac:	10001215 	stw	zero,72(r2)
     6b0:	dfc00217 	ldw	ra,8(sp)
     6b4:	dc400117 	ldw	r17,4(sp)
     6b8:	dc000017 	ldw	r16,0(sp)
     6bc:	dec00304 	addi	sp,sp,12
     6c0:	f800283a 	ret
     6c4:	80800017 	ldw	r2,0(r16)
     6c8:	10000526 	beq	r2,zero,6e0 <__sfp+0xdc>
     6cc:	1021883a 	mov	r16,r2
     6d0:	003fd606 	br	62c <__sfp+0x28>
     6d4:	8009883a 	mov	r4,r16
     6d8:	000041c0 	call	41c <__sinit.part.0>
     6dc:	003fd206 	br	628 <__sfp+0x24>
     6e0:	01400104 	movi	r5,4
     6e4:	8809883a 	mov	r4,r17
     6e8:	000058c0 	call	58c <__sfmoreglue>
     6ec:	80800015 	stw	r2,0(r16)
     6f0:	103ff61e 	bne	r2,zero,6cc <__sfp+0xc8>
     6f4:	00c00304 	movi	r3,12
     6f8:	88c00015 	stw	r3,0(r17)
     6fc:	003fec06 	br	6b0 <__sfp+0xac>

00000700 <_cleanup>:
     700:	00800034 	movhi	r2,0
     704:	111c1717 	ldw	r4,28764(r2)
     708:	01400034 	movhi	r5,0
     70c:	2948d804 	addi	r5,r5,9056
     710:	0000cd41 	jmpi	cd4 <_fwalk_reent>

00000714 <__sinit>:
     714:	20800e17 	ldw	r2,56(r4)
     718:	10000126 	beq	r2,zero,720 <__sinit+0xc>
     71c:	f800283a 	ret
     720:	000041c1 	jmpi	41c <__sinit.part.0>

00000724 <__sfp_lock_acquire>:
     724:	f800283a 	ret

00000728 <__sfp_lock_release>:
     728:	f800283a 	ret

0000072c <__sinit_lock_acquire>:
     72c:	f800283a 	ret

00000730 <__sinit_lock_release>:
     730:	f800283a 	ret

00000734 <__fp_lock_all>:
     734:	00800034 	movhi	r2,0
     738:	111c1817 	ldw	r4,28768(r2)
     73c:	01400034 	movhi	r5,0
     740:	29410204 	addi	r5,r5,1032
     744:	0000c301 	jmpi	c30 <_fwalk>

00000748 <__fp_unlock_all>:
     748:	00800034 	movhi	r2,0
     74c:	111c1817 	ldw	r4,28768(r2)
     750:	01400034 	movhi	r5,0
     754:	29416104 	addi	r5,r5,1412
     758:	0000c301 	jmpi	c30 <_fwalk>

0000075c <__sfvwrite_r>:
     75c:	30800217 	ldw	r2,8(r6)
     760:	1000ca26 	beq	r2,zero,a8c <__sfvwrite_r+0x330>
     764:	2880030b 	ldhu	r2,12(r5)
     768:	defff304 	addi	sp,sp,-52
     76c:	dd000715 	stw	r20,28(sp)
     770:	dc000315 	stw	r16,12(sp)
     774:	dfc00c15 	stw	ra,48(sp)
     778:	df000b15 	stw	fp,44(sp)
     77c:	ddc00a15 	stw	r23,40(sp)
     780:	dd800915 	stw	r22,36(sp)
     784:	dd400815 	stw	r21,32(sp)
     788:	dcc00615 	stw	r19,24(sp)
     78c:	dc800515 	stw	r18,20(sp)
     790:	dc400415 	stw	r17,16(sp)
     794:	d9000015 	stw	r4,0(sp)
     798:	10c0020c 	andi	r3,r2,8
     79c:	2821883a 	mov	r16,r5
     7a0:	3029883a 	mov	r20,r6
     7a4:	18002426 	beq	r3,zero,838 <__sfvwrite_r+0xdc>
     7a8:	28c00417 	ldw	r3,16(r5)
     7ac:	18002226 	beq	r3,zero,838 <__sfvwrite_r+0xdc>
     7b0:	10c0008c 	andi	r3,r2,2
     7b4:	a4400017 	ldw	r17,0(r20)
     7b8:	18002726 	beq	r3,zero,858 <__sfvwrite_r+0xfc>
     7bc:	80c00917 	ldw	r3,36(r16)
     7c0:	80800717 	ldw	r2,28(r16)
     7c4:	05600034 	movhi	r21,32768
     7c8:	0027883a 	mov	r19,zero
     7cc:	0025883a 	mov	r18,zero
     7d0:	ad7f0004 	addi	r21,r21,-1024
     7d4:	980d883a 	mov	r6,r19
     7d8:	100b883a 	mov	r5,r2
     7dc:	d9000017 	ldw	r4,0(sp)
     7e0:	90001126 	beq	r18,zero,828 <__sfvwrite_r+0xcc>
     7e4:	900f883a 	mov	r7,r18
     7e8:	ac80012e 	bgeu	r21,r18,7f0 <__sfvwrite_r+0x94>
     7ec:	a80f883a 	mov	r7,r21
     7f0:	183ee83a 	callr	r3
     7f4:	0080a00e 	bge	zero,r2,a78 <__sfvwrite_r+0x31c>
     7f8:	a0c00217 	ldw	r3,8(r20)
     7fc:	98a7883a 	add	r19,r19,r2
     800:	90a5c83a 	sub	r18,r18,r2
     804:	1885c83a 	sub	r2,r3,r2
     808:	a0800215 	stw	r2,8(r20)
     80c:	10006426 	beq	r2,zero,9a0 <__sfvwrite_r+0x244>
     810:	80800717 	ldw	r2,28(r16)
     814:	80c00917 	ldw	r3,36(r16)
     818:	980d883a 	mov	r6,r19
     81c:	100b883a 	mov	r5,r2
     820:	d9000017 	ldw	r4,0(sp)
     824:	903fef1e 	bne	r18,zero,7e4 <__sfvwrite_r+0x88>
     828:	8cc00017 	ldw	r19,0(r17)
     82c:	8c800117 	ldw	r18,4(r17)
     830:	8c400204 	addi	r17,r17,8
     834:	003fe706 	br	7d4 <__sfvwrite_r+0x78>
     838:	d9000017 	ldw	r4,0(sp)
     83c:	800b883a 	mov	r5,r16
     840:	00021a80 	call	21a8 <__swsetup_r>
     844:	1000f81e 	bne	r2,zero,c28 <__sfvwrite_r+0x4cc>
     848:	8080030b 	ldhu	r2,12(r16)
     84c:	a4400017 	ldw	r17,0(r20)
     850:	10c0008c 	andi	r3,r2,2
     854:	183fd91e 	bne	r3,zero,7bc <__sfvwrite_r+0x60>
     858:	10c0004c 	andi	r3,r2,1
     85c:	84800217 	ldw	r18,8(r16)
     860:	87000017 	ldw	fp,0(r16)
     864:	18008b1e 	bne	r3,zero,a94 <__sfvwrite_r+0x338>
     868:	00e00034 	movhi	r3,32768
     86c:	18ffff84 	addi	r3,r3,-2
     870:	01200034 	movhi	r4,32768
     874:	d8c00115 	stw	r3,4(sp)
     878:	20ffffc4 	addi	r3,r4,-1
     87c:	002d883a 	mov	r22,zero
     880:	002f883a 	mov	r23,zero
     884:	d8c00215 	stw	r3,8(sp)
     888:	b8004126 	beq	r23,zero,990 <__sfvwrite_r+0x234>
     88c:	1100800c 	andi	r4,r2,512
     890:	20009126 	beq	r4,zero,ad8 <__sfvwrite_r+0x37c>
     894:	902b883a 	mov	r21,r18
     898:	bc80b836 	bltu	r23,r18,b7c <__sfvwrite_r+0x420>
     89c:	1101200c 	andi	r4,r2,1152
     8a0:	20002626 	beq	r4,zero,93c <__sfvwrite_r+0x1e0>
     8a4:	84800517 	ldw	r18,20(r16)
     8a8:	81400417 	ldw	r5,16(r16)
     8ac:	b9000044 	addi	r4,r23,1
     8b0:	948d883a 	add	r6,r18,r18
     8b4:	348d883a 	add	r6,r6,r18
     8b8:	3024d7fa 	srli	r18,r6,31
     8bc:	e167c83a 	sub	r19,fp,r5
     8c0:	24c9883a 	add	r4,r4,r19
     8c4:	91a5883a 	add	r18,r18,r6
     8c8:	9025d07a 	srai	r18,r18,1
     8cc:	900d883a 	mov	r6,r18
     8d0:	9100022e 	bgeu	r18,r4,8dc <__sfvwrite_r+0x180>
     8d4:	2025883a 	mov	r18,r4
     8d8:	200d883a 	mov	r6,r4
     8dc:	1081000c 	andi	r2,r2,1024
     8e0:	1000bf26 	beq	r2,zero,be0 <__sfvwrite_r+0x484>
     8e4:	d9000017 	ldw	r4,0(sp)
     8e8:	300b883a 	mov	r5,r6
     8ec:	0000d880 	call	d88 <_malloc_r>
     8f0:	1000c826 	beq	r2,zero,c14 <__sfvwrite_r+0x4b8>
     8f4:	81400417 	ldw	r5,16(r16)
     8f8:	980d883a 	mov	r6,r19
     8fc:	1009883a 	mov	r4,r2
     900:	00016640 	call	1664 <memcpy>
     904:	100f883a 	mov	r7,r2
     908:	8080030b 	ldhu	r2,12(r16)
     90c:	00fedfc4 	movi	r3,-1153
     910:	10c4703a 	and	r2,r2,r3
     914:	10802014 	ori	r2,r2,128
     918:	8080030d 	sth	r2,12(r16)
     91c:	94c5c83a 	sub	r2,r18,r19
     920:	3cf9883a 	add	fp,r7,r19
     924:	84800515 	stw	r18,20(r16)
     928:	81c00415 	stw	r7,16(r16)
     92c:	87000015 	stw	fp,0(r16)
     930:	b825883a 	mov	r18,r23
     934:	80800215 	stw	r2,8(r16)
     938:	b82b883a 	mov	r21,r23
     93c:	a80d883a 	mov	r6,r21
     940:	b00b883a 	mov	r5,r22
     944:	e009883a 	mov	r4,fp
     948:	00017640 	call	1764 <memmove>
     94c:	80800217 	ldw	r2,8(r16)
     950:	81800017 	ldw	r6,0(r16)
     954:	b827883a 	mov	r19,r23
     958:	14a5c83a 	sub	r18,r2,r18
     95c:	354d883a 	add	r6,r6,r21
     960:	84800215 	stw	r18,8(r16)
     964:	81800015 	stw	r6,0(r16)
     968:	002f883a 	mov	r23,zero
     96c:	a0800217 	ldw	r2,8(r20)
     970:	b4ed883a 	add	r22,r22,r19
     974:	14e7c83a 	sub	r19,r2,r19
     978:	a4c00215 	stw	r19,8(r20)
     97c:	98000826 	beq	r19,zero,9a0 <__sfvwrite_r+0x244>
     980:	8080030b 	ldhu	r2,12(r16)
     984:	84800217 	ldw	r18,8(r16)
     988:	87000017 	ldw	fp,0(r16)
     98c:	b83fbf1e 	bne	r23,zero,88c <__sfvwrite_r+0x130>
     990:	8d800017 	ldw	r22,0(r17)
     994:	8dc00117 	ldw	r23,4(r17)
     998:	8c400204 	addi	r17,r17,8
     99c:	003fba06 	br	888 <__sfvwrite_r+0x12c>
     9a0:	0005883a 	mov	r2,zero
     9a4:	dfc00c17 	ldw	ra,48(sp)
     9a8:	df000b17 	ldw	fp,44(sp)
     9ac:	ddc00a17 	ldw	r23,40(sp)
     9b0:	dd800917 	ldw	r22,36(sp)
     9b4:	dd400817 	ldw	r21,32(sp)
     9b8:	dd000717 	ldw	r20,28(sp)
     9bc:	dcc00617 	ldw	r19,24(sp)
     9c0:	dc800517 	ldw	r18,20(sp)
     9c4:	dc400417 	ldw	r17,16(sp)
     9c8:	dc000317 	ldw	r16,12(sp)
     9cc:	dec00d04 	addi	sp,sp,52
     9d0:	f800283a 	ret
     9d4:	b1c07116 	blt	r22,r7,b9c <__sfvwrite_r+0x440>
     9d8:	80800917 	ldw	r2,36(r16)
     9dc:	81400717 	ldw	r5,28(r16)
     9e0:	d9000017 	ldw	r4,0(sp)
     9e4:	b80d883a 	mov	r6,r23
     9e8:	103ee83a 	callr	r2
     9ec:	1025883a 	mov	r18,r2
     9f0:	0080210e 	bge	zero,r2,a78 <__sfvwrite_r+0x31c>
     9f4:	acabc83a 	sub	r21,r21,r18
     9f8:	a8006326 	beq	r21,zero,b88 <__sfvwrite_r+0x42c>
     9fc:	00800044 	movi	r2,1
     a00:	a0c00217 	ldw	r3,8(r20)
     a04:	bcaf883a 	add	r23,r23,r18
     a08:	9ca7c83a 	sub	r19,r19,r18
     a0c:	1ca5c83a 	sub	r18,r3,r18
     a10:	a4800215 	stw	r18,8(r20)
     a14:	903fe226 	beq	r18,zero,9a0 <__sfvwrite_r+0x244>
     a18:	84800217 	ldw	r18,8(r16)
     a1c:	87000017 	ldw	fp,0(r16)
     a20:	98002126 	beq	r19,zero,aa8 <__sfvwrite_r+0x34c>
     a24:	10002426 	beq	r2,zero,ab8 <__sfvwrite_r+0x35c>
     a28:	a805883a 	mov	r2,r21
     a2c:	982d883a 	mov	r22,r19
     a30:	14c0012e 	bgeu	r2,r19,a38 <__sfvwrite_r+0x2dc>
     a34:	102d883a 	mov	r22,r2
     a38:	80800417 	ldw	r2,16(r16)
     a3c:	81c00517 	ldw	r7,20(r16)
     a40:	173fe42e 	bgeu	r2,fp,9d4 <__sfvwrite_r+0x278>
     a44:	3ca5883a 	add	r18,r7,r18
     a48:	95bfe20e 	bge	r18,r22,9d4 <__sfvwrite_r+0x278>
     a4c:	b80b883a 	mov	r5,r23
     a50:	e009883a 	mov	r4,fp
     a54:	900d883a 	mov	r6,r18
     a58:	00017640 	call	1764 <memmove>
     a5c:	80800017 	ldw	r2,0(r16)
     a60:	d9000017 	ldw	r4,0(sp)
     a64:	800b883a 	mov	r5,r16
     a68:	1485883a 	add	r2,r2,r18
     a6c:	80800015 	stw	r2,0(r16)
     a70:	00026900 	call	2690 <_fflush_r>
     a74:	103fdf26 	beq	r2,zero,9f4 <__sfvwrite_r+0x298>
     a78:	8080030b 	ldhu	r2,12(r16)
     a7c:	10801014 	ori	r2,r2,64
     a80:	8080030d 	sth	r2,12(r16)
     a84:	00bfffc4 	movi	r2,-1
     a88:	003fc606 	br	9a4 <__sfvwrite_r+0x248>
     a8c:	0005883a 	mov	r2,zero
     a90:	f800283a 	ret
     a94:	0027883a 	mov	r19,zero
     a98:	002b883a 	mov	r21,zero
     a9c:	0005883a 	mov	r2,zero
     aa0:	002f883a 	mov	r23,zero
     aa4:	983fdf1e 	bne	r19,zero,a24 <__sfvwrite_r+0x2c8>
     aa8:	8cc00117 	ldw	r19,4(r17)
     aac:	8dc00017 	ldw	r23,0(r17)
     ab0:	8c400204 	addi	r17,r17,8
     ab4:	983ffc26 	beq	r19,zero,aa8 <__sfvwrite_r+0x34c>
     ab8:	980d883a 	mov	r6,r19
     abc:	01400284 	movi	r5,10
     ac0:	b809883a 	mov	r4,r23
     ac4:	000157c0 	call	157c <memchr>
     ac8:	10004226 	beq	r2,zero,bd4 <__sfvwrite_r+0x478>
     acc:	10800044 	addi	r2,r2,1
     ad0:	15ebc83a 	sub	r21,r2,r23
     ad4:	003fd406 	br	a28 <__sfvwrite_r+0x2cc>
     ad8:	80800417 	ldw	r2,16(r16)
     adc:	17001436 	bltu	r2,fp,b30 <__sfvwrite_r+0x3d4>
     ae0:	84c00517 	ldw	r19,20(r16)
     ae4:	bcc01236 	bltu	r23,r19,b30 <__sfvwrite_r+0x3d4>
     ae8:	d8800117 	ldw	r2,4(sp)
     aec:	15c0372e 	bgeu	r2,r23,bcc <__sfvwrite_r+0x470>
     af0:	d9000217 	ldw	r4,8(sp)
     af4:	980b883a 	mov	r5,r19
     af8:	0002e840 	call	2e84 <__divsi3>
     afc:	980b883a 	mov	r5,r19
     b00:	1009883a 	mov	r4,r2
     b04:	000303c0 	call	303c <__mulsi3>
     b08:	81400717 	ldw	r5,28(r16)
     b0c:	82800917 	ldw	r10,36(r16)
     b10:	d9000017 	ldw	r4,0(sp)
     b14:	100f883a 	mov	r7,r2
     b18:	b00d883a 	mov	r6,r22
     b1c:	503ee83a 	callr	r10
     b20:	00bfd50e 	bge	zero,r2,a78 <__sfvwrite_r+0x31c>
     b24:	1027883a 	mov	r19,r2
     b28:	bcefc83a 	sub	r23,r23,r19
     b2c:	003f8f06 	br	96c <__sfvwrite_r+0x210>
     b30:	9027883a 	mov	r19,r18
     b34:	bc80012e 	bgeu	r23,r18,b3c <__sfvwrite_r+0x3e0>
     b38:	b827883a 	mov	r19,r23
     b3c:	e009883a 	mov	r4,fp
     b40:	980d883a 	mov	r6,r19
     b44:	b00b883a 	mov	r5,r22
     b48:	00017640 	call	1764 <memmove>
     b4c:	80800217 	ldw	r2,8(r16)
     b50:	81000017 	ldw	r4,0(r16)
     b54:	14c5c83a 	sub	r2,r2,r19
     b58:	24c9883a 	add	r4,r4,r19
     b5c:	80800215 	stw	r2,8(r16)
     b60:	81000015 	stw	r4,0(r16)
     b64:	103ff01e 	bne	r2,zero,b28 <__sfvwrite_r+0x3cc>
     b68:	d9000017 	ldw	r4,0(sp)
     b6c:	800b883a 	mov	r5,r16
     b70:	00026900 	call	2690 <_fflush_r>
     b74:	103fec26 	beq	r2,zero,b28 <__sfvwrite_r+0x3cc>
     b78:	003fbf06 	br	a78 <__sfvwrite_r+0x31c>
     b7c:	b825883a 	mov	r18,r23
     b80:	b82b883a 	mov	r21,r23
     b84:	003f6d06 	br	93c <__sfvwrite_r+0x1e0>
     b88:	d9000017 	ldw	r4,0(sp)
     b8c:	800b883a 	mov	r5,r16
     b90:	00026900 	call	2690 <_fflush_r>
     b94:	103f9a26 	beq	r2,zero,a00 <__sfvwrite_r+0x2a4>
     b98:	003fb706 	br	a78 <__sfvwrite_r+0x31c>
     b9c:	b00d883a 	mov	r6,r22
     ba0:	b80b883a 	mov	r5,r23
     ba4:	e009883a 	mov	r4,fp
     ba8:	00017640 	call	1764 <memmove>
     bac:	80c00217 	ldw	r3,8(r16)
     bb0:	80800017 	ldw	r2,0(r16)
     bb4:	b025883a 	mov	r18,r22
     bb8:	1d87c83a 	sub	r3,r3,r22
     bbc:	15ad883a 	add	r22,r2,r22
     bc0:	80c00215 	stw	r3,8(r16)
     bc4:	85800015 	stw	r22,0(r16)
     bc8:	003f8a06 	br	9f4 <__sfvwrite_r+0x298>
     bcc:	b809883a 	mov	r4,r23
     bd0:	003fc806 	br	af4 <__sfvwrite_r+0x398>
     bd4:	98800044 	addi	r2,r19,1
     bd8:	102b883a 	mov	r21,r2
     bdc:	003f9306 	br	a2c <__sfvwrite_r+0x2d0>
     be0:	d9000017 	ldw	r4,0(sp)
     be4:	00019800 	call	1980 <_realloc_r>
     be8:	100f883a 	mov	r7,r2
     bec:	103f4b1e 	bne	r2,zero,91c <__sfvwrite_r+0x1c0>
     bf0:	dc400017 	ldw	r17,0(sp)
     bf4:	81400417 	ldw	r5,16(r16)
     bf8:	8809883a 	mov	r4,r17
     bfc:	00028340 	call	2834 <_free_r>
     c00:	8080030b 	ldhu	r2,12(r16)
     c04:	00c00304 	movi	r3,12
     c08:	88c00015 	stw	r3,0(r17)
     c0c:	10bfdfcc 	andi	r2,r2,65407
     c10:	003f9a06 	br	a7c <__sfvwrite_r+0x320>
     c14:	d8c00017 	ldw	r3,0(sp)
     c18:	00800304 	movi	r2,12
     c1c:	18800015 	stw	r2,0(r3)
     c20:	8080030b 	ldhu	r2,12(r16)
     c24:	003f9506 	br	a7c <__sfvwrite_r+0x320>
     c28:	00bfffc4 	movi	r2,-1
     c2c:	003f5d06 	br	9a4 <__sfvwrite_r+0x248>

00000c30 <_fwalk>:
     c30:	defffa04 	addi	sp,sp,-24
     c34:	dc800215 	stw	r18,8(sp)
     c38:	dfc00515 	stw	ra,20(sp)
     c3c:	dd000415 	stw	r20,16(sp)
     c40:	dcc00315 	stw	r19,12(sp)
     c44:	dc400115 	stw	r17,4(sp)
     c48:	dc000015 	stw	r16,0(sp)
     c4c:	2480b804 	addi	r18,r4,736
     c50:	90001e26 	beq	r18,zero,ccc <_fwalk+0x9c>
     c54:	2827883a 	mov	r19,r5
     c58:	0029883a 	mov	r20,zero
     c5c:	94400117 	ldw	r17,4(r18)
     c60:	94000217 	ldw	r16,8(r18)
     c64:	8c7fffc4 	addi	r17,r17,-1
     c68:	88000d16 	blt	r17,zero,ca0 <_fwalk+0x70>
     c6c:	8080030b 	ldhu	r2,12(r16)
     c70:	8c7fffc4 	addi	r17,r17,-1
     c74:	108000b0 	cmpltui	r2,r2,2
     c78:	1000061e 	bne	r2,zero,c94 <_fwalk+0x64>
     c7c:	8080038f 	ldh	r2,14(r16)
     c80:	8009883a 	mov	r4,r16
     c84:	10bfffe0 	cmpeqi	r2,r2,-1
     c88:	1000021e 	bne	r2,zero,c94 <_fwalk+0x64>
     c8c:	983ee83a 	callr	r19
     c90:	a0a8b03a 	or	r20,r20,r2
     c94:	88bfffd8 	cmpnei	r2,r17,-1
     c98:	84001a04 	addi	r16,r16,104
     c9c:	103ff31e 	bne	r2,zero,c6c <_fwalk+0x3c>
     ca0:	94800017 	ldw	r18,0(r18)
     ca4:	903fed1e 	bne	r18,zero,c5c <_fwalk+0x2c>
     ca8:	a005883a 	mov	r2,r20
     cac:	dfc00517 	ldw	ra,20(sp)
     cb0:	dd000417 	ldw	r20,16(sp)
     cb4:	dcc00317 	ldw	r19,12(sp)
     cb8:	dc800217 	ldw	r18,8(sp)
     cbc:	dc400117 	ldw	r17,4(sp)
     cc0:	dc000017 	ldw	r16,0(sp)
     cc4:	dec00604 	addi	sp,sp,24
     cc8:	f800283a 	ret
     ccc:	0029883a 	mov	r20,zero
     cd0:	003ff506 	br	ca8 <_fwalk+0x78>

00000cd4 <_fwalk_reent>:
     cd4:	defff904 	addi	sp,sp,-28
     cd8:	dc800215 	stw	r18,8(sp)
     cdc:	dfc00615 	stw	ra,24(sp)
     ce0:	dd400515 	stw	r21,20(sp)
     ce4:	dd000415 	stw	r20,16(sp)
     ce8:	dcc00315 	stw	r19,12(sp)
     cec:	dc400115 	stw	r17,4(sp)
     cf0:	dc000015 	stw	r16,0(sp)
     cf4:	2480b804 	addi	r18,r4,736
     cf8:	90002126 	beq	r18,zero,d80 <_fwalk_reent+0xac>
     cfc:	2829883a 	mov	r20,r5
     d00:	2027883a 	mov	r19,r4
     d04:	002b883a 	mov	r21,zero
     d08:	94400117 	ldw	r17,4(r18)
     d0c:	94000217 	ldw	r16,8(r18)
     d10:	8c7fffc4 	addi	r17,r17,-1
     d14:	88000e16 	blt	r17,zero,d50 <_fwalk_reent+0x7c>
     d18:	8080030b 	ldhu	r2,12(r16)
     d1c:	8c7fffc4 	addi	r17,r17,-1
     d20:	108000b0 	cmpltui	r2,r2,2
     d24:	1000071e 	bne	r2,zero,d44 <_fwalk_reent+0x70>
     d28:	8080038f 	ldh	r2,14(r16)
     d2c:	800b883a 	mov	r5,r16
     d30:	9809883a 	mov	r4,r19
     d34:	10bfffe0 	cmpeqi	r2,r2,-1
     d38:	1000021e 	bne	r2,zero,d44 <_fwalk_reent+0x70>
     d3c:	a03ee83a 	callr	r20
     d40:	a8aab03a 	or	r21,r21,r2
     d44:	88bfffd8 	cmpnei	r2,r17,-1
     d48:	84001a04 	addi	r16,r16,104
     d4c:	103ff21e 	bne	r2,zero,d18 <_fwalk_reent+0x44>
     d50:	94800017 	ldw	r18,0(r18)
     d54:	903fec1e 	bne	r18,zero,d08 <_fwalk_reent+0x34>
     d58:	a805883a 	mov	r2,r21
     d5c:	dfc00617 	ldw	ra,24(sp)
     d60:	dd400517 	ldw	r21,20(sp)
     d64:	dd000417 	ldw	r20,16(sp)
     d68:	dcc00317 	ldw	r19,12(sp)
     d6c:	dc800217 	ldw	r18,8(sp)
     d70:	dc400117 	ldw	r17,4(sp)
     d74:	dc000017 	ldw	r16,0(sp)
     d78:	dec00704 	addi	sp,sp,28
     d7c:	f800283a 	ret
     d80:	002b883a 	mov	r21,zero
     d84:	003ff406 	br	d58 <_fwalk_reent+0x84>

00000d88 <_malloc_r>:
     d88:	defff604 	addi	sp,sp,-40
     d8c:	dc400115 	stw	r17,4(sp)
     d90:	2c4002c4 	addi	r17,r5,11
     d94:	dc800215 	stw	r18,8(sp)
     d98:	dfc00915 	stw	ra,36(sp)
     d9c:	df000815 	stw	fp,32(sp)
     da0:	ddc00715 	stw	r23,28(sp)
     da4:	dd800615 	stw	r22,24(sp)
     da8:	dd400515 	stw	r21,20(sp)
     dac:	dd000415 	stw	r20,16(sp)
     db0:	dcc00315 	stw	r19,12(sp)
     db4:	dc000015 	stw	r16,0(sp)
     db8:	888005e8 	cmpgeui	r2,r17,23
     dbc:	2025883a 	mov	r18,r4
     dc0:	10001b1e 	bne	r2,zero,e30 <_malloc_r+0xa8>
     dc4:	29400468 	cmpgeui	r5,r5,17
     dc8:	2800951e 	bne	r5,zero,1020 <_malloc_r+0x298>
     dcc:	00036100 	call	3610 <__malloc_lock>
     dd0:	04400404 	movi	r17,16
     dd4:	00800604 	movi	r2,24
     dd8:	01800084 	movi	r6,2
     ddc:	04c00034 	movhi	r19,0
     de0:	9cd69304 	addi	r19,r19,23116
     de4:	9885883a 	add	r2,r19,r2
     de8:	14000117 	ldw	r16,4(r2)
     dec:	10fffe04 	addi	r3,r2,-8
     df0:	80c09e26 	beq	r16,r3,106c <_malloc_r+0x2e4>
     df4:	80800117 	ldw	r2,4(r16)
     df8:	81000317 	ldw	r4,12(r16)
     dfc:	00ffff04 	movi	r3,-4
     e00:	10c4703a 	and	r2,r2,r3
     e04:	81400217 	ldw	r5,8(r16)
     e08:	8085883a 	add	r2,r16,r2
     e0c:	10c00117 	ldw	r3,4(r2)
     e10:	29000315 	stw	r4,12(r5)
     e14:	21400215 	stw	r5,8(r4)
     e18:	18c00054 	ori	r3,r3,1
     e1c:	10c00115 	stw	r3,4(r2)
     e20:	9009883a 	mov	r4,r18
     e24:	00036340 	call	3634 <__malloc_unlock>
     e28:	80800204 	addi	r2,r16,8
     e2c:	00007f06 	br	102c <_malloc_r+0x2a4>
     e30:	00bffe04 	movi	r2,-8
     e34:	88a2703a 	and	r17,r17,r2
     e38:	88007916 	blt	r17,zero,1020 <_malloc_r+0x298>
     e3c:	89407836 	bltu	r17,r5,1020 <_malloc_r+0x298>
     e40:	00036100 	call	3610 <__malloc_lock>
     e44:	88807e28 	cmpgeui	r2,r17,504
     e48:	10013326 	beq	r2,zero,1318 <_malloc_r+0x590>
     e4c:	8804d27a 	srli	r2,r17,9
     e50:	10008226 	beq	r2,zero,105c <_malloc_r+0x2d4>
     e54:	10c00168 	cmpgeui	r3,r2,5
     e58:	1801151e 	bne	r3,zero,12b0 <_malloc_r+0x528>
     e5c:	8804d1ba 	srli	r2,r17,6
     e60:	11800e44 	addi	r6,r2,57
     e64:	300a90fa 	slli	r5,r6,3
     e68:	12000e04 	addi	r8,r2,56
     e6c:	04c00034 	movhi	r19,0
     e70:	9cd69304 	addi	r19,r19,23116
     e74:	994b883a 	add	r5,r19,r5
     e78:	2c000117 	ldw	r16,4(r5)
     e7c:	297ffe04 	addi	r5,r5,-8
     e80:	2c001126 	beq	r5,r16,ec8 <_malloc_r+0x140>
     e84:	80800117 	ldw	r2,4(r16)
     e88:	00ffff04 	movi	r3,-4
     e8c:	10c4703a 	and	r2,r2,r3
     e90:	1447c83a 	sub	r3,r2,r17
     e94:	19000408 	cmpgei	r4,r3,16
     e98:	2000e81e 	bne	r4,zero,123c <_malloc_r+0x4b4>
     e9c:	1800e90e 	bge	r3,zero,1244 <_malloc_r+0x4bc>
     ea0:	01ffff04 	movi	r7,-4
     ea4:	00000606 	br	ec0 <_malloc_r+0x138>
     ea8:	80800117 	ldw	r2,4(r16)
     eac:	11c4703a 	and	r2,r2,r7
     eb0:	1447c83a 	sub	r3,r2,r17
     eb4:	19000408 	cmpgei	r4,r3,16
     eb8:	2000e01e 	bne	r4,zero,123c <_malloc_r+0x4b4>
     ebc:	1800e10e 	bge	r3,zero,1244 <_malloc_r+0x4bc>
     ec0:	84000317 	ldw	r16,12(r16)
     ec4:	2c3ff81e 	bne	r5,r16,ea8 <_malloc_r+0x120>
     ec8:	9c000417 	ldw	r16,16(r19)
     ecc:	02000034 	movhi	r8,0
     ed0:	42169504 	addi	r8,r8,23124
     ed4:	82006c26 	beq	r16,r8,1088 <_malloc_r+0x300>
     ed8:	80c00117 	ldw	r3,4(r16)
     edc:	00bfff04 	movi	r2,-4
     ee0:	1884703a 	and	r2,r3,r2
     ee4:	1447c83a 	sub	r3,r2,r17
     ee8:	19000410 	cmplti	r4,r3,16
     eec:	20011526 	beq	r4,zero,1344 <_malloc_r+0x5bc>
     ef0:	9a000515 	stw	r8,20(r19)
     ef4:	9a000415 	stw	r8,16(r19)
     ef8:	18010a0e 	bge	r3,zero,1324 <_malloc_r+0x59c>
     efc:	10c08028 	cmpgeui	r3,r2,512
     f00:	1800d21e 	bne	r3,zero,124c <_malloc_r+0x4c4>
     f04:	1004d0fa 	srli	r2,r2,3
     f08:	99400117 	ldw	r5,4(r19)
     f0c:	10c00044 	addi	r3,r2,1
     f10:	1009d0ba 	srai	r4,r2,2
     f14:	180690fa 	slli	r3,r3,3
     f18:	00800044 	movi	r2,1
     f1c:	1104983a 	sll	r2,r2,r4
     f20:	98c7883a 	add	r3,r19,r3
     f24:	19000017 	ldw	r4,0(r3)
     f28:	1144b03a 	or	r2,r2,r5
     f2c:	197ffe04 	addi	r5,r3,-8
     f30:	81400315 	stw	r5,12(r16)
     f34:	81000215 	stw	r4,8(r16)
     f38:	98800115 	stw	r2,4(r19)
     f3c:	1c000015 	stw	r16,0(r3)
     f40:	24000315 	stw	r16,12(r4)
     f44:	3007d0ba 	srai	r3,r6,2
     f48:	01000044 	movi	r4,1
     f4c:	20c8983a 	sll	r4,r4,r3
     f50:	11005236 	bltu	r2,r4,109c <_malloc_r+0x314>
     f54:	2086703a 	and	r3,r4,r2
     f58:	18000a1e 	bne	r3,zero,f84 <_malloc_r+0x1fc>
     f5c:	00ffff04 	movi	r3,-4
     f60:	2109883a 	add	r4,r4,r4
     f64:	30cc703a 	and	r6,r6,r3
     f68:	2086703a 	and	r3,r4,r2
     f6c:	31800104 	addi	r6,r6,4
     f70:	1800041e 	bne	r3,zero,f84 <_malloc_r+0x1fc>
     f74:	2109883a 	add	r4,r4,r4
     f78:	2086703a 	and	r3,r4,r2
     f7c:	31800104 	addi	r6,r6,4
     f80:	183ffc26 	beq	r3,zero,f74 <_malloc_r+0x1ec>
     f84:	027fff04 	movi	r9,-4
     f88:	301490fa 	slli	r10,r6,3
     f8c:	3017883a 	mov	r11,r6
     f90:	9a95883a 	add	r10,r19,r10
     f94:	500f883a 	mov	r7,r10
     f98:	3c000317 	ldw	r16,12(r7)
     f9c:	3c00cd26 	beq	r7,r16,12d4 <_malloc_r+0x54c>
     fa0:	80800117 	ldw	r2,4(r16)
     fa4:	1244703a 	and	r2,r2,r9
     fa8:	1447c83a 	sub	r3,r2,r17
     fac:	19400408 	cmpgei	r5,r3,16
     fb0:	2800081e 	bne	r5,zero,fd4 <_malloc_r+0x24c>
     fb4:	1800cc0e 	bge	r3,zero,12e8 <_malloc_r+0x560>
     fb8:	84000317 	ldw	r16,12(r16)
     fbc:	3c00c526 	beq	r7,r16,12d4 <_malloc_r+0x54c>
     fc0:	80800117 	ldw	r2,4(r16)
     fc4:	1244703a 	and	r2,r2,r9
     fc8:	1447c83a 	sub	r3,r2,r17
     fcc:	19400410 	cmplti	r5,r3,16
     fd0:	283ff81e 	bne	r5,zero,fb4 <_malloc_r+0x22c>
     fd4:	81000317 	ldw	r4,12(r16)
     fd8:	81400217 	ldw	r5,8(r16)
     fdc:	89800054 	ori	r6,r17,1
     fe0:	81800115 	stw	r6,4(r16)
     fe4:	29000315 	stw	r4,12(r5)
     fe8:	21400215 	stw	r5,8(r4)
     fec:	8463883a 	add	r17,r16,r17
     ff0:	9c400515 	stw	r17,20(r19)
     ff4:	9c400415 	stw	r17,16(r19)
     ff8:	19000054 	ori	r4,r3,1
     ffc:	89000115 	stw	r4,4(r17)
    1000:	8085883a 	add	r2,r16,r2
    1004:	8a000315 	stw	r8,12(r17)
    1008:	8a000215 	stw	r8,8(r17)
    100c:	10c00015 	stw	r3,0(r2)
    1010:	9009883a 	mov	r4,r18
    1014:	00036340 	call	3634 <__malloc_unlock>
    1018:	80800204 	addi	r2,r16,8
    101c:	00000306 	br	102c <_malloc_r+0x2a4>
    1020:	00800304 	movi	r2,12
    1024:	90800015 	stw	r2,0(r18)
    1028:	0005883a 	mov	r2,zero
    102c:	dfc00917 	ldw	ra,36(sp)
    1030:	df000817 	ldw	fp,32(sp)
    1034:	ddc00717 	ldw	r23,28(sp)
    1038:	dd800617 	ldw	r22,24(sp)
    103c:	dd400517 	ldw	r21,20(sp)
    1040:	dd000417 	ldw	r20,16(sp)
    1044:	dcc00317 	ldw	r19,12(sp)
    1048:	dc800217 	ldw	r18,8(sp)
    104c:	dc400117 	ldw	r17,4(sp)
    1050:	dc000017 	ldw	r16,0(sp)
    1054:	dec00a04 	addi	sp,sp,40
    1058:	f800283a 	ret
    105c:	01408004 	movi	r5,512
    1060:	01801004 	movi	r6,64
    1064:	02000fc4 	movi	r8,63
    1068:	003f8006 	br	e6c <_malloc_r+0xe4>
    106c:	14000317 	ldw	r16,12(r2)
    1070:	31800084 	addi	r6,r6,2
    1074:	143f5f1e 	bne	r2,r16,df4 <_malloc_r+0x6c>
    1078:	9c000417 	ldw	r16,16(r19)
    107c:	02000034 	movhi	r8,0
    1080:	42169504 	addi	r8,r8,23124
    1084:	823f941e 	bne	r16,r8,ed8 <_malloc_r+0x150>
    1088:	3007d0ba 	srai	r3,r6,2
    108c:	01000044 	movi	r4,1
    1090:	98800117 	ldw	r2,4(r19)
    1094:	20c8983a 	sll	r4,r4,r3
    1098:	113fae2e 	bgeu	r2,r4,f54 <_malloc_r+0x1cc>
    109c:	9c000217 	ldw	r16,8(r19)
    10a0:	00bfff04 	movi	r2,-4
    10a4:	85000117 	ldw	r20,4(r16)
    10a8:	a0ac703a 	and	r22,r20,r2
    10ac:	b4400336 	bltu	r22,r17,10bc <_malloc_r+0x334>
    10b0:	b445c83a 	sub	r2,r22,r17
    10b4:	10c00408 	cmpgei	r3,r2,16
    10b8:	1800561e 	bne	r3,zero,1214 <_malloc_r+0x48c>
    10bc:	00800034 	movhi	r2,0
    10c0:	109c1917 	ldw	r2,28772(r2)
    10c4:	00c00074 	movhi	r3,1
    10c8:	1d22c217 	ldw	r20,-29944(r3)
    10cc:	10bfffd8 	cmpnei	r2,r2,-1
    10d0:	85ab883a 	add	r21,r16,r22
    10d4:	8d29883a 	add	r20,r17,r20
    10d8:	1000c826 	beq	r2,zero,13fc <_malloc_r+0x674>
    10dc:	a50403c4 	addi	r20,r20,4111
    10e0:	00bc0004 	movi	r2,-4096
    10e4:	a0a8703a 	and	r20,r20,r2
    10e8:	a00b883a 	mov	r5,r20
    10ec:	9009883a 	mov	r4,r18
    10f0:	0001fac0 	call	1fac <_sbrk_r>
    10f4:	102f883a 	mov	r23,r2
    10f8:	10bfffd8 	cmpnei	r2,r2,-1
    10fc:	10009a26 	beq	r2,zero,1368 <_malloc_r+0x5e0>
    1100:	bd409836 	bltu	r23,r21,1364 <_malloc_r+0x5dc>
    1104:	00800074 	movhi	r2,1
    1108:	10a2cb17 	ldw	r2,-29908(r2)
    110c:	00c00074 	movhi	r3,1
    1110:	a085883a 	add	r2,r20,r2
    1114:	18a2cb15 	stw	r2,-29908(r3)
    1118:	1007883a 	mov	r3,r2
    111c:	adc0dd26 	beq	r21,r23,1494 <_malloc_r+0x70c>
    1120:	00800034 	movhi	r2,0
    1124:	109c1917 	ldw	r2,28772(r2)
    1128:	10bfffd8 	cmpnei	r2,r2,-1
    112c:	1000e026 	beq	r2,zero,14b0 <_malloc_r+0x728>
    1130:	bd6bc83a 	sub	r21,r23,r21
    1134:	a8c7883a 	add	r3,r21,r3
    1138:	00800074 	movhi	r2,1
    113c:	10e2cb15 	stw	r3,-29908(r2)
    1140:	bf0001cc 	andi	fp,r23,7
    1144:	e000b626 	beq	fp,zero,1420 <_malloc_r+0x698>
    1148:	bf2fc83a 	sub	r23,r23,fp
    114c:	bdc00204 	addi	r23,r23,8
    1150:	00840204 	movi	r2,4104
    1154:	1705c83a 	sub	r2,r2,fp
    1158:	bd29883a 	add	r20,r23,r20
    115c:	1505c83a 	sub	r2,r2,r20
    1160:	1543ffcc 	andi	r21,r2,4095
    1164:	a80b883a 	mov	r5,r21
    1168:	9009883a 	mov	r4,r18
    116c:	0001fac0 	call	1fac <_sbrk_r>
    1170:	10ffffe0 	cmpeqi	r3,r2,-1
    1174:	1800e41e 	bne	r3,zero,1508 <_malloc_r+0x780>
    1178:	15c5c83a 	sub	r2,r2,r23
    117c:	1569883a 	add	r20,r2,r21
    1180:	00800074 	movhi	r2,1
    1184:	10a2cb17 	ldw	r2,-29908(r2)
    1188:	9dc00215 	stw	r23,8(r19)
    118c:	a5000054 	ori	r20,r20,1
    1190:	a885883a 	add	r2,r21,r2
    1194:	00c00074 	movhi	r3,1
    1198:	18a2cb15 	stw	r2,-29908(r3)
    119c:	bd000115 	stw	r20,4(r23)
    11a0:	84c0c626 	beq	r16,r19,14bc <_malloc_r+0x734>
    11a4:	b0c00428 	cmpgeui	r3,r22,16
    11a8:	1800c626 	beq	r3,zero,14c4 <_malloc_r+0x73c>
    11ac:	81000117 	ldw	r4,4(r16)
    11b0:	017ffe04 	movi	r5,-8
    11b4:	b0fffd04 	addi	r3,r22,-12
    11b8:	1946703a 	and	r3,r3,r5
    11bc:	2100004c 	andi	r4,r4,1
    11c0:	20c8b03a 	or	r4,r4,r3
    11c4:	81000115 	stw	r4,4(r16)
    11c8:	01400144 	movi	r5,5
    11cc:	80c9883a 	add	r4,r16,r3
    11d0:	21400115 	stw	r5,4(r4)
    11d4:	21400215 	stw	r5,8(r4)
    11d8:	18c00428 	cmpgeui	r3,r3,16
    11dc:	1800cf1e 	bne	r3,zero,151c <_malloc_r+0x794>
    11e0:	bd000117 	ldw	r20,4(r23)
    11e4:	b821883a 	mov	r16,r23
    11e8:	00c00074 	movhi	r3,1
    11ec:	18e2c117 	ldw	r3,-29948(r3)
    11f0:	1880022e 	bgeu	r3,r2,11fc <_malloc_r+0x474>
    11f4:	00c00074 	movhi	r3,1
    11f8:	18a2c115 	stw	r2,-29948(r3)
    11fc:	00c00074 	movhi	r3,1
    1200:	18e2c017 	ldw	r3,-29952(r3)
    1204:	18805a2e 	bgeu	r3,r2,1370 <_malloc_r+0x5e8>
    1208:	00c00074 	movhi	r3,1
    120c:	18a2c015 	stw	r2,-29952(r3)
    1210:	00005706 	br	1370 <_malloc_r+0x5e8>
    1214:	88c00054 	ori	r3,r17,1
    1218:	80c00115 	stw	r3,4(r16)
    121c:	8463883a 	add	r17,r16,r17
    1220:	10800054 	ori	r2,r2,1
    1224:	9c400215 	stw	r17,8(r19)
    1228:	88800115 	stw	r2,4(r17)
    122c:	9009883a 	mov	r4,r18
    1230:	00036340 	call	3634 <__malloc_unlock>
    1234:	80800204 	addi	r2,r16,8
    1238:	003f7c06 	br	102c <_malloc_r+0x2a4>
    123c:	400d883a 	mov	r6,r8
    1240:	003f2106 	br	ec8 <_malloc_r+0x140>
    1244:	81000317 	ldw	r4,12(r16)
    1248:	003eee06 	br	e04 <_malloc_r+0x7c>
    124c:	1006d27a 	srli	r3,r2,9
    1250:	19000168 	cmpgeui	r4,r3,5
    1254:	20003e26 	beq	r4,zero,1350 <_malloc_r+0x5c8>
    1258:	19000568 	cmpgeui	r4,r3,21
    125c:	20007a1e 	bne	r4,zero,1448 <_malloc_r+0x6c0>
    1260:	19401704 	addi	r5,r3,92
    1264:	280a90fa 	slli	r5,r5,3
    1268:	190016c4 	addi	r4,r3,91
    126c:	994b883a 	add	r5,r19,r5
    1270:	28c00017 	ldw	r3,0(r5)
    1274:	297ffe04 	addi	r5,r5,-8
    1278:	28c06226 	beq	r5,r3,1404 <_malloc_r+0x67c>
    127c:	01ffff04 	movi	r7,-4
    1280:	19000117 	ldw	r4,4(r3)
    1284:	21c8703a 	and	r4,r4,r7
    1288:	1100022e 	bgeu	r2,r4,1294 <_malloc_r+0x50c>
    128c:	18c00217 	ldw	r3,8(r3)
    1290:	28fffb1e 	bne	r5,r3,1280 <_malloc_r+0x4f8>
    1294:	19400317 	ldw	r5,12(r3)
    1298:	98800117 	ldw	r2,4(r19)
    129c:	81400315 	stw	r5,12(r16)
    12a0:	80c00215 	stw	r3,8(r16)
    12a4:	2c000215 	stw	r16,8(r5)
    12a8:	1c000315 	stw	r16,12(r3)
    12ac:	003f2506 	br	f44 <_malloc_r+0x1bc>
    12b0:	10c00568 	cmpgeui	r3,r2,21
    12b4:	18003826 	beq	r3,zero,1398 <_malloc_r+0x610>
    12b8:	10c01568 	cmpgeui	r3,r2,85
    12bc:	1800691e 	bne	r3,zero,1464 <_malloc_r+0x6dc>
    12c0:	8804d33a 	srli	r2,r17,12
    12c4:	11801bc4 	addi	r6,r2,111
    12c8:	12001b84 	addi	r8,r2,110
    12cc:	300a90fa 	slli	r5,r6,3
    12d0:	003ee606 	br	e6c <_malloc_r+0xe4>
    12d4:	5ac00044 	addi	r11,r11,1
    12d8:	588000cc 	andi	r2,r11,3
    12dc:	39c00204 	addi	r7,r7,8
    12e0:	103f2d1e 	bne	r2,zero,f98 <_malloc_r+0x210>
    12e4:	00003306 	br	13b4 <_malloc_r+0x62c>
    12e8:	8085883a 	add	r2,r16,r2
    12ec:	10c00117 	ldw	r3,4(r2)
    12f0:	81000317 	ldw	r4,12(r16)
    12f4:	81400217 	ldw	r5,8(r16)
    12f8:	18c00054 	ori	r3,r3,1
    12fc:	10c00115 	stw	r3,4(r2)
    1300:	29000315 	stw	r4,12(r5)
    1304:	21400215 	stw	r5,8(r4)
    1308:	9009883a 	mov	r4,r18
    130c:	00036340 	call	3634 <__malloc_unlock>
    1310:	80800204 	addi	r2,r16,8
    1314:	003f4506 	br	102c <_malloc_r+0x2a4>
    1318:	880cd0fa 	srli	r6,r17,3
    131c:	88800204 	addi	r2,r17,8
    1320:	003eae06 	br	ddc <_malloc_r+0x54>
    1324:	8085883a 	add	r2,r16,r2
    1328:	10c00117 	ldw	r3,4(r2)
    132c:	9009883a 	mov	r4,r18
    1330:	18c00054 	ori	r3,r3,1
    1334:	10c00115 	stw	r3,4(r2)
    1338:	00036340 	call	3634 <__malloc_unlock>
    133c:	80800204 	addi	r2,r16,8
    1340:	003f3a06 	br	102c <_malloc_r+0x2a4>
    1344:	89000054 	ori	r4,r17,1
    1348:	81000115 	stw	r4,4(r16)
    134c:	003f2706 	br	fec <_malloc_r+0x264>
    1350:	1006d1ba 	srli	r3,r2,6
    1354:	19400e44 	addi	r5,r3,57
    1358:	19000e04 	addi	r4,r3,56
    135c:	280a90fa 	slli	r5,r5,3
    1360:	003fc206 	br	126c <_malloc_r+0x4e4>
    1364:	84c04626 	beq	r16,r19,1480 <_malloc_r+0x6f8>
    1368:	9c000217 	ldw	r16,8(r19)
    136c:	85000117 	ldw	r20,4(r16)
    1370:	00bfff04 	movi	r2,-4
    1374:	a0a8703a 	and	r20,r20,r2
    1378:	a445c83a 	sub	r2,r20,r17
    137c:	a4400236 	bltu	r20,r17,1388 <_malloc_r+0x600>
    1380:	10c00408 	cmpgei	r3,r2,16
    1384:	183fa31e 	bne	r3,zero,1214 <_malloc_r+0x48c>
    1388:	9009883a 	mov	r4,r18
    138c:	00036340 	call	3634 <__malloc_unlock>
    1390:	0005883a 	mov	r2,zero
    1394:	003f2506 	br	102c <_malloc_r+0x2a4>
    1398:	11801704 	addi	r6,r2,92
    139c:	120016c4 	addi	r8,r2,91
    13a0:	300a90fa 	slli	r5,r6,3
    13a4:	003eb106 	br	e6c <_malloc_r+0xe4>
    13a8:	50800217 	ldw	r2,8(r10)
    13ac:	31bfffc4 	addi	r6,r6,-1
    13b0:	1280701e 	bne	r2,r10,1574 <_malloc_r+0x7ec>
    13b4:	308000cc 	andi	r2,r6,3
    13b8:	52bffe04 	addi	r10,r10,-8
    13bc:	103ffa1e 	bne	r2,zero,13a8 <_malloc_r+0x620>
    13c0:	98c00117 	ldw	r3,4(r19)
    13c4:	0104303a 	nor	r2,zero,r4
    13c8:	10c4703a 	and	r2,r2,r3
    13cc:	98800115 	stw	r2,4(r19)
    13d0:	2109883a 	add	r4,r4,r4
    13d4:	113f3136 	bltu	r2,r4,109c <_malloc_r+0x314>
    13d8:	203f3026 	beq	r4,zero,109c <_malloc_r+0x314>
    13dc:	2086703a 	and	r3,r4,r2
    13e0:	1800041e 	bne	r3,zero,13f4 <_malloc_r+0x66c>
    13e4:	2109883a 	add	r4,r4,r4
    13e8:	2086703a 	and	r3,r4,r2
    13ec:	5ac00104 	addi	r11,r11,4
    13f0:	183ffc26 	beq	r3,zero,13e4 <_malloc_r+0x65c>
    13f4:	580d883a 	mov	r6,r11
    13f8:	003ee306 	br	f88 <_malloc_r+0x200>
    13fc:	a5000404 	addi	r20,r20,16
    1400:	003f3906 	br	10e8 <_malloc_r+0x360>
    1404:	2009d0ba 	srai	r4,r4,2
    1408:	00800044 	movi	r2,1
    140c:	99c00117 	ldw	r7,4(r19)
    1410:	1104983a 	sll	r2,r2,r4
    1414:	11c4b03a 	or	r2,r2,r7
    1418:	98800115 	stw	r2,4(r19)
    141c:	003f9f06 	br	129c <_malloc_r+0x514>
    1420:	bd05883a 	add	r2,r23,r20
    1424:	0085c83a 	sub	r2,zero,r2
    1428:	1543ffcc 	andi	r21,r2,4095
    142c:	a80b883a 	mov	r5,r21
    1430:	9009883a 	mov	r4,r18
    1434:	0001fac0 	call	1fac <_sbrk_r>
    1438:	10ffffe0 	cmpeqi	r3,r2,-1
    143c:	183f4e26 	beq	r3,zero,1178 <_malloc_r+0x3f0>
    1440:	002b883a 	mov	r21,zero
    1444:	003f4e06 	br	1180 <_malloc_r+0x3f8>
    1448:	19001568 	cmpgeui	r4,r3,85
    144c:	2000201e 	bne	r4,zero,14d0 <_malloc_r+0x748>
    1450:	1006d33a 	srli	r3,r2,12
    1454:	19401bc4 	addi	r5,r3,111
    1458:	19001b84 	addi	r4,r3,110
    145c:	280a90fa 	slli	r5,r5,3
    1460:	003f8206 	br	126c <_malloc_r+0x4e4>
    1464:	10c05568 	cmpgeui	r3,r2,341
    1468:	1800201e 	bne	r3,zero,14ec <_malloc_r+0x764>
    146c:	8804d3fa 	srli	r2,r17,15
    1470:	11801e04 	addi	r6,r2,120
    1474:	12001dc4 	addi	r8,r2,119
    1478:	300a90fa 	slli	r5,r6,3
    147c:	003e7b06 	br	e6c <_malloc_r+0xe4>
    1480:	00800074 	movhi	r2,1
    1484:	10e2cb17 	ldw	r3,-29908(r2)
    1488:	a0c7883a 	add	r3,r20,r3
    148c:	10e2cb15 	stw	r3,-29908(r2)
    1490:	003f2306 	br	1120 <_malloc_r+0x398>
    1494:	a903ffcc 	andi	r4,r21,4095
    1498:	203f211e 	bne	r4,zero,1120 <_malloc_r+0x398>
    149c:	9c000217 	ldw	r16,8(r19)
    14a0:	b529883a 	add	r20,r22,r20
    14a4:	a5000054 	ori	r20,r20,1
    14a8:	85000115 	stw	r20,4(r16)
    14ac:	003f4e06 	br	11e8 <_malloc_r+0x460>
    14b0:	00800034 	movhi	r2,0
    14b4:	15dc1915 	stw	r23,28772(r2)
    14b8:	003f2106 	br	1140 <_malloc_r+0x3b8>
    14bc:	b821883a 	mov	r16,r23
    14c0:	003f4906 	br	11e8 <_malloc_r+0x460>
    14c4:	00800044 	movi	r2,1
    14c8:	b8800115 	stw	r2,4(r23)
    14cc:	003fae06 	br	1388 <_malloc_r+0x600>
    14d0:	19005568 	cmpgeui	r4,r3,341
    14d4:	2000191e 	bne	r4,zero,153c <_malloc_r+0x7b4>
    14d8:	1006d3fa 	srli	r3,r2,15
    14dc:	19401e04 	addi	r5,r3,120
    14e0:	19001dc4 	addi	r4,r3,119
    14e4:	280a90fa 	slli	r5,r5,3
    14e8:	003f6006 	br	126c <_malloc_r+0x4e4>
    14ec:	10815568 	cmpgeui	r2,r2,1365
    14f0:	1000191e 	bne	r2,zero,1558 <_malloc_r+0x7d0>
    14f4:	8804d4ba 	srli	r2,r17,18
    14f8:	11801f44 	addi	r6,r2,125
    14fc:	12001f04 	addi	r8,r2,124
    1500:	300a90fa 	slli	r5,r6,3
    1504:	003e5906 	br	e6c <_malloc_r+0xe4>
    1508:	e73ffe04 	addi	fp,fp,-8
    150c:	a729883a 	add	r20,r20,fp
    1510:	a5e9c83a 	sub	r20,r20,r23
    1514:	002b883a 	mov	r21,zero
    1518:	003f1906 	br	1180 <_malloc_r+0x3f8>
    151c:	81400204 	addi	r5,r16,8
    1520:	9009883a 	mov	r4,r18
    1524:	00028340 	call	2834 <_free_r>
    1528:	9c000217 	ldw	r16,8(r19)
    152c:	00800074 	movhi	r2,1
    1530:	10a2cb17 	ldw	r2,-29908(r2)
    1534:	85000117 	ldw	r20,4(r16)
    1538:	003f2b06 	br	11e8 <_malloc_r+0x460>
    153c:	18c15568 	cmpgeui	r3,r3,1365
    1540:	1800091e 	bne	r3,zero,1568 <_malloc_r+0x7e0>
    1544:	1006d4ba 	srli	r3,r2,18
    1548:	19401f44 	addi	r5,r3,125
    154c:	19001f04 	addi	r4,r3,124
    1550:	280a90fa 	slli	r5,r5,3
    1554:	003f4506 	br	126c <_malloc_r+0x4e4>
    1558:	0140fe04 	movi	r5,1016
    155c:	01801fc4 	movi	r6,127
    1560:	02001f84 	movi	r8,126
    1564:	003e4106 	br	e6c <_malloc_r+0xe4>
    1568:	0140fe04 	movi	r5,1016
    156c:	01001f84 	movi	r4,126
    1570:	003f3e06 	br	126c <_malloc_r+0x4e4>
    1574:	98800117 	ldw	r2,4(r19)
    1578:	003f9506 	br	13d0 <_malloc_r+0x648>

0000157c <memchr>:
    157c:	208000cc 	andi	r2,r4,3
    1580:	280f883a 	mov	r7,r5
    1584:	10003526 	beq	r2,zero,165c <memchr+0xe0>
    1588:	30bfffc4 	addi	r2,r6,-1
    158c:	30001926 	beq	r6,zero,15f4 <memchr+0x78>
    1590:	20c00003 	ldbu	r3,0(r4)
    1594:	29803fcc 	andi	r6,r5,255
    1598:	30c0061e 	bne	r6,r3,15b4 <memchr+0x38>
    159c:	00001706 	br	15fc <memchr+0x80>
    15a0:	10bfffc4 	addi	r2,r2,-1
    15a4:	10ffffe0 	cmpeqi	r3,r2,-1
    15a8:	1800121e 	bne	r3,zero,15f4 <memchr+0x78>
    15ac:	20c00003 	ldbu	r3,0(r4)
    15b0:	19801226 	beq	r3,r6,15fc <memchr+0x80>
    15b4:	21000044 	addi	r4,r4,1
    15b8:	20c000cc 	andi	r3,r4,3
    15bc:	183ff81e 	bne	r3,zero,15a0 <memchr+0x24>
    15c0:	10c00128 	cmpgeui	r3,r2,4
    15c4:	18000f1e 	bne	r3,zero,1604 <memchr+0x88>
    15c8:	10000a26 	beq	r2,zero,15f4 <memchr+0x78>
    15cc:	20c00003 	ldbu	r3,0(r4)
    15d0:	29403fcc 	andi	r5,r5,255
    15d4:	19400926 	beq	r3,r5,15fc <memchr+0x80>
    15d8:	2085883a 	add	r2,r4,r2
    15dc:	39403fcc 	andi	r5,r7,255
    15e0:	00000206 	br	15ec <memchr+0x70>
    15e4:	20c00003 	ldbu	r3,0(r4)
    15e8:	19400426 	beq	r3,r5,15fc <memchr+0x80>
    15ec:	21000044 	addi	r4,r4,1
    15f0:	113ffc1e 	bne	r2,r4,15e4 <memchr+0x68>
    15f4:	0005883a 	mov	r2,zero
    15f8:	f800283a 	ret
    15fc:	2005883a 	mov	r2,r4
    1600:	f800283a 	ret
    1604:	280c923a 	slli	r6,r5,8
    1608:	2a403fcc 	andi	r9,r5,255
    160c:	02bfbff4 	movhi	r10,65279
    1610:	31bfffcc 	andi	r6,r6,65535
    1614:	3246b03a 	or	r3,r6,r9
    1618:	1812943a 	slli	r9,r3,16
    161c:	02202074 	movhi	r8,32897
    1620:	52bfbfc4 	addi	r10,r10,-257
    1624:	48d2b03a 	or	r9,r9,r3
    1628:	42202004 	addi	r8,r8,-32640
    162c:	20c00017 	ldw	r3,0(r4)
    1630:	48c6f03a 	xor	r3,r9,r3
    1634:	1a8d883a 	add	r6,r3,r10
    1638:	00c6303a 	nor	r3,zero,r3
    163c:	30c6703a 	and	r3,r6,r3
    1640:	1a06703a 	and	r3,r3,r8
    1644:	183fe11e 	bne	r3,zero,15cc <memchr+0x50>
    1648:	10bfff04 	addi	r2,r2,-4
    164c:	10c00128 	cmpgeui	r3,r2,4
    1650:	21000104 	addi	r4,r4,4
    1654:	183ff51e 	bne	r3,zero,162c <memchr+0xb0>
    1658:	003fdb06 	br	15c8 <memchr+0x4c>
    165c:	3005883a 	mov	r2,r6
    1660:	003fd706 	br	15c0 <memchr+0x44>

00001664 <memcpy>:
    1664:	30c00430 	cmpltui	r3,r6,16
    1668:	2005883a 	mov	r2,r4
    166c:	18002d1e 	bne	r3,zero,1724 <memcpy+0xc0>
    1670:	2906b03a 	or	r3,r5,r4
    1674:	18c000cc 	andi	r3,r3,3
    1678:	1800351e 	bne	r3,zero,1750 <memcpy+0xec>
    167c:	32fffc04 	addi	r11,r6,-16
    1680:	5816d13a 	srli	r11,r11,4
    1684:	2007883a 	mov	r3,r4
    1688:	280f883a 	mov	r7,r5
    168c:	5ac00044 	addi	r11,r11,1
    1690:	5816913a 	slli	r11,r11,4
    1694:	22c9883a 	add	r4,r4,r11
    1698:	3a000017 	ldw	r8,0(r7)
    169c:	3a800117 	ldw	r10,4(r7)
    16a0:	3a400217 	ldw	r9,8(r7)
    16a4:	39c00404 	addi	r7,r7,16
    16a8:	1a000015 	stw	r8,0(r3)
    16ac:	3a3fff17 	ldw	r8,-4(r7)
    16b0:	1a800115 	stw	r10,4(r3)
    16b4:	1a400215 	stw	r9,8(r3)
    16b8:	18c00404 	addi	r3,r3,16
    16bc:	1a3fff15 	stw	r8,-4(r3)
    16c0:	20fff51e 	bne	r4,r3,1698 <memcpy+0x34>
    16c4:	3100030c 	andi	r4,r6,12
    16c8:	2acb883a 	add	r5,r5,r11
    16cc:	320003cc 	andi	r8,r6,15
    16d0:	20002226 	beq	r4,zero,175c <memcpy+0xf8>
    16d4:	2809883a 	mov	r4,r5
    16d8:	1813883a 	mov	r9,r3
    16dc:	21000104 	addi	r4,r4,4
    16e0:	22bfff17 	ldw	r10,-4(r4)
    16e4:	410fc83a 	sub	r7,r8,r4
    16e8:	4a400104 	addi	r9,r9,4
    16ec:	29cf883a 	add	r7,r5,r7
    16f0:	4abfff15 	stw	r10,-4(r9)
    16f4:	39c00128 	cmpgeui	r7,r7,4
    16f8:	383ff81e 	bne	r7,zero,16dc <memcpy+0x78>
    16fc:	413fff04 	addi	r4,r8,-4
    1700:	2008d0ba 	srli	r4,r4,2
    1704:	318000cc 	andi	r6,r6,3
    1708:	31ffffc4 	addi	r7,r6,-1
    170c:	21000044 	addi	r4,r4,1
    1710:	200890ba 	slli	r4,r4,2
    1714:	1907883a 	add	r3,r3,r4
    1718:	290b883a 	add	r5,r5,r4
    171c:	3000041e 	bne	r6,zero,1730 <memcpy+0xcc>
    1720:	f800283a 	ret
    1724:	2007883a 	mov	r3,r4
    1728:	31ffffc4 	addi	r7,r6,-1
    172c:	303ffc26 	beq	r6,zero,1720 <memcpy+0xbc>
    1730:	39c00044 	addi	r7,r7,1
    1734:	19cf883a 	add	r7,r3,r7
    1738:	29400044 	addi	r5,r5,1
    173c:	29bfffc3 	ldbu	r6,-1(r5)
    1740:	18c00044 	addi	r3,r3,1
    1744:	19bfffc5 	stb	r6,-1(r3)
    1748:	19fffb1e 	bne	r3,r7,1738 <memcpy+0xd4>
    174c:	f800283a 	ret
    1750:	31ffffc4 	addi	r7,r6,-1
    1754:	2007883a 	mov	r3,r4
    1758:	003ff506 	br	1730 <memcpy+0xcc>
    175c:	400d883a 	mov	r6,r8
    1760:	003ff106 	br	1728 <memcpy+0xc4>

00001764 <memmove>:
    1764:	2005883a 	mov	r2,r4
    1768:	29000a2e 	bgeu	r5,r4,1794 <memmove+0x30>
    176c:	2989883a 	add	r4,r5,r6
    1770:	1100082e 	bgeu	r2,r4,1794 <memmove+0x30>
    1774:	1187883a 	add	r3,r2,r6
    1778:	30003e26 	beq	r6,zero,1874 <memmove+0x110>
    177c:	213fffc4 	addi	r4,r4,-1
    1780:	21400003 	ldbu	r5,0(r4)
    1784:	18ffffc4 	addi	r3,r3,-1
    1788:	19400005 	stb	r5,0(r3)
    178c:	10fffb1e 	bne	r2,r3,177c <memmove+0x18>
    1790:	f800283a 	ret
    1794:	30c00430 	cmpltui	r3,r6,16
    1798:	18000b26 	beq	r3,zero,17c8 <memmove+0x64>
    179c:	1007883a 	mov	r3,r2
    17a0:	31ffffc4 	addi	r7,r6,-1
    17a4:	30003726 	beq	r6,zero,1884 <memmove+0x120>
    17a8:	39c00044 	addi	r7,r7,1
    17ac:	29cf883a 	add	r7,r5,r7
    17b0:	29400044 	addi	r5,r5,1
    17b4:	29bfffc3 	ldbu	r6,-1(r5)
    17b8:	18c00044 	addi	r3,r3,1
    17bc:	19bfffc5 	stb	r6,-1(r3)
    17c0:	29fffb1e 	bne	r5,r7,17b0 <memmove+0x4c>
    17c4:	f800283a 	ret
    17c8:	2886b03a 	or	r3,r5,r2
    17cc:	18c000cc 	andi	r3,r3,3
    17d0:	1800291e 	bne	r3,zero,1878 <memmove+0x114>
    17d4:	327ffc04 	addi	r9,r6,-16
    17d8:	4812d13a 	srli	r9,r9,4
    17dc:	280f883a 	mov	r7,r5
    17e0:	1007883a 	mov	r3,r2
    17e4:	4a400044 	addi	r9,r9,1
    17e8:	4812913a 	slli	r9,r9,4
    17ec:	1251883a 	add	r8,r2,r9
    17f0:	39000017 	ldw	r4,0(r7)
    17f4:	18c00404 	addi	r3,r3,16
    17f8:	39c00404 	addi	r7,r7,16
    17fc:	193ffc15 	stw	r4,-16(r3)
    1800:	393ffd17 	ldw	r4,-12(r7)
    1804:	193ffd15 	stw	r4,-12(r3)
    1808:	393ffe17 	ldw	r4,-8(r7)
    180c:	193ffe15 	stw	r4,-8(r3)
    1810:	393fff17 	ldw	r4,-4(r7)
    1814:	193fff15 	stw	r4,-4(r3)
    1818:	40fff51e 	bne	r8,r3,17f0 <memmove+0x8c>
    181c:	3100030c 	andi	r4,r6,12
    1820:	2a4b883a 	add	r5,r5,r9
    1824:	320003cc 	andi	r8,r6,15
    1828:	20001726 	beq	r4,zero,1888 <memmove+0x124>
    182c:	2813883a 	mov	r9,r5
    1830:	180f883a 	mov	r7,r3
    1834:	4a400104 	addi	r9,r9,4
    1838:	39c00104 	addi	r7,r7,4
    183c:	4abfff17 	ldw	r10,-4(r9)
    1840:	41c9c83a 	sub	r4,r8,r7
    1844:	1909883a 	add	r4,r3,r4
    1848:	3abfff15 	stw	r10,-4(r7)
    184c:	21000128 	cmpgeui	r4,r4,4
    1850:	203ff81e 	bne	r4,zero,1834 <memmove+0xd0>
    1854:	413fff04 	addi	r4,r8,-4
    1858:	2008d0ba 	srli	r4,r4,2
    185c:	318000cc 	andi	r6,r6,3
    1860:	21000044 	addi	r4,r4,1
    1864:	200890ba 	slli	r4,r4,2
    1868:	1907883a 	add	r3,r3,r4
    186c:	290b883a 	add	r5,r5,r4
    1870:	003fcb06 	br	17a0 <memmove+0x3c>
    1874:	f800283a 	ret
    1878:	31ffffc4 	addi	r7,r6,-1
    187c:	1007883a 	mov	r3,r2
    1880:	003fc906 	br	17a8 <memmove+0x44>
    1884:	f800283a 	ret
    1888:	400d883a 	mov	r6,r8
    188c:	003fc406 	br	17a0 <memmove+0x3c>

00001890 <memset>:
    1890:	20c000cc 	andi	r3,r4,3
    1894:	2005883a 	mov	r2,r4
    1898:	18003626 	beq	r3,zero,1974 <memset+0xe4>
    189c:	31ffffc4 	addi	r7,r6,-1
    18a0:	30003326 	beq	r6,zero,1970 <memset+0xe0>
    18a4:	2811883a 	mov	r8,r5
    18a8:	2007883a 	mov	r3,r4
    18ac:	00000306 	br	18bc <memset+0x2c>
    18b0:	39ffffc4 	addi	r7,r7,-1
    18b4:	39bfffe0 	cmpeqi	r6,r7,-1
    18b8:	30002d1e 	bne	r6,zero,1970 <memset+0xe0>
    18bc:	18c00044 	addi	r3,r3,1
    18c0:	1a3fffc5 	stb	r8,-1(r3)
    18c4:	198000cc 	andi	r6,r3,3
    18c8:	303ff91e 	bne	r6,zero,18b0 <memset+0x20>
    18cc:	39000130 	cmpltui	r4,r7,4
    18d0:	2000221e 	bne	r4,zero,195c <memset+0xcc>
    18d4:	29003fcc 	andi	r4,r5,255
    18d8:	200c923a 	slli	r6,r4,8
    18dc:	3a000430 	cmpltui	r8,r7,16
    18e0:	3108b03a 	or	r4,r6,r4
    18e4:	200c943a 	slli	r6,r4,16
    18e8:	310cb03a 	or	r6,r6,r4
    18ec:	40000e1e 	bne	r8,zero,1928 <memset+0x98>
    18f0:	3a3ffc04 	addi	r8,r7,-16
    18f4:	4010d13a 	srli	r8,r8,4
    18f8:	42000044 	addi	r8,r8,1
    18fc:	4010913a 	slli	r8,r8,4
    1900:	1a11883a 	add	r8,r3,r8
    1904:	19800015 	stw	r6,0(r3)
    1908:	19800115 	stw	r6,4(r3)
    190c:	19800215 	stw	r6,8(r3)
    1910:	18c00404 	addi	r3,r3,16
    1914:	19bfff15 	stw	r6,-4(r3)
    1918:	40fffa1e 	bne	r8,r3,1904 <memset+0x74>
    191c:	3900030c 	andi	r4,r7,12
    1920:	39c003cc 	andi	r7,r7,15
    1924:	20000d26 	beq	r4,zero,195c <memset+0xcc>
    1928:	1809883a 	mov	r4,r3
    192c:	21000104 	addi	r4,r4,4
    1930:	3911c83a 	sub	r8,r7,r4
    1934:	1a11883a 	add	r8,r3,r8
    1938:	21bfff15 	stw	r6,-4(r4)
    193c:	42000128 	cmpgeui	r8,r8,4
    1940:	403ffa1e 	bne	r8,zero,192c <memset+0x9c>
    1944:	393fff04 	addi	r4,r7,-4
    1948:	2008d0ba 	srli	r4,r4,2
    194c:	39c000cc 	andi	r7,r7,3
    1950:	21000044 	addi	r4,r4,1
    1954:	200890ba 	slli	r4,r4,2
    1958:	1907883a 	add	r3,r3,r4
    195c:	38000426 	beq	r7,zero,1970 <memset+0xe0>
    1960:	19cf883a 	add	r7,r3,r7
    1964:	18c00044 	addi	r3,r3,1
    1968:	197fffc5 	stb	r5,-1(r3)
    196c:	38fffd1e 	bne	r7,r3,1964 <memset+0xd4>
    1970:	f800283a 	ret
    1974:	2007883a 	mov	r3,r4
    1978:	300f883a 	mov	r7,r6
    197c:	003fd306 	br	18cc <memset+0x3c>

00001980 <_realloc_r>:
    1980:	defff504 	addi	sp,sp,-44
    1984:	dcc00415 	stw	r19,16(sp)
    1988:	dfc00a15 	stw	ra,40(sp)
    198c:	df000915 	stw	fp,36(sp)
    1990:	ddc00815 	stw	r23,32(sp)
    1994:	dd800715 	stw	r22,28(sp)
    1998:	dd400615 	stw	r21,24(sp)
    199c:	dd000515 	stw	r20,20(sp)
    19a0:	dc800315 	stw	r18,12(sp)
    19a4:	dc400215 	stw	r17,8(sp)
    19a8:	dc000115 	stw	r16,4(sp)
    19ac:	3027883a 	mov	r19,r6
    19b0:	28008b26 	beq	r5,zero,1be0 <_realloc_r+0x260>
    19b4:	282d883a 	mov	r22,r5
    19b8:	202b883a 	mov	r21,r4
    19bc:	9c0002c4 	addi	r16,r19,11
    19c0:	00036100 	call	3610 <__malloc_lock>
    19c4:	808005f0 	cmpltui	r2,r16,23
    19c8:	1000521e 	bne	r2,zero,1b14 <_realloc_r+0x194>
    19cc:	017ffe04 	movi	r5,-8
    19d0:	8160703a 	and	r16,r16,r5
    19d4:	8007883a 	mov	r3,r16
    19d8:	80005116 	blt	r16,zero,1b20 <_realloc_r+0x1a0>
    19dc:	84c05036 	bltu	r16,r19,1b20 <_realloc_r+0x1a0>
    19e0:	b0bfff17 	ldw	r2,-4(r22)
    19e4:	017fff04 	movi	r5,-4
    19e8:	b4bffe04 	addi	r18,r22,-8
    19ec:	1162703a 	and	r17,r2,r5
    19f0:	9469883a 	add	r20,r18,r17
    19f4:	88c0390e 	bge	r17,r3,1adc <_realloc_r+0x15c>
    19f8:	07000034 	movhi	fp,0
    19fc:	e7169304 	addi	fp,fp,23116
    1a00:	e2000217 	ldw	r8,8(fp)
    1a04:	a1000117 	ldw	r4,4(r20)
    1a08:	45008e26 	beq	r8,r20,1c44 <_realloc_r+0x2c4>
    1a0c:	01bfff84 	movi	r6,-2
    1a10:	218c703a 	and	r6,r4,r6
    1a14:	a18d883a 	add	r6,r20,r6
    1a18:	31800117 	ldw	r6,4(r6)
    1a1c:	3180004c 	andi	r6,r6,1
    1a20:	30004f1e 	bne	r6,zero,1b60 <_realloc_r+0x1e0>
    1a24:	2148703a 	and	r4,r4,r5
    1a28:	890b883a 	add	r5,r17,r4
    1a2c:	28c0cb0e 	bge	r5,r3,1d5c <_realloc_r+0x3dc>
    1a30:	1080004c 	andi	r2,r2,1
    1a34:	10004c1e 	bne	r2,zero,1b68 <_realloc_r+0x1e8>
    1a38:	b1fffe17 	ldw	r7,-8(r22)
    1a3c:	00bfff04 	movi	r2,-4
    1a40:	91cfc83a 	sub	r7,r18,r7
    1a44:	39400117 	ldw	r5,4(r7)
    1a48:	288a703a 	and	r5,r5,r2
    1a4c:	a0000426 	beq	r20,zero,1a60 <_realloc_r+0xe0>
    1a50:	896f883a 	add	r23,r17,r5
    1a54:	b92f883a 	add	r23,r23,r4
    1a58:	4500cb26 	beq	r8,r20,1d88 <_realloc_r+0x408>
    1a5c:	b8c0930e 	bge	r23,r3,1cac <_realloc_r+0x32c>
    1a60:	38004126 	beq	r7,zero,1b68 <_realloc_r+0x1e8>
    1a64:	896f883a 	add	r23,r17,r5
    1a68:	b8c03f16 	blt	r23,r3,1b68 <_realloc_r+0x1e8>
    1a6c:	38c00217 	ldw	r3,8(r7)
    1a70:	38800317 	ldw	r2,12(r7)
    1a74:	89bfff04 	addi	r6,r17,-4
    1a78:	31000968 	cmpgeui	r4,r6,37
    1a7c:	18800315 	stw	r2,12(r3)
    1a80:	10c00215 	stw	r3,8(r2)
    1a84:	3de9883a 	add	r20,r7,r23
    1a88:	38c00204 	addi	r3,r7,8
    1a8c:	2000f81e 	bne	r4,zero,1e70 <_realloc_r+0x4f0>
    1a90:	30800530 	cmpltui	r2,r6,20
    1a94:	b1000017 	ldw	r4,0(r22)
    1a98:	1000eb1e 	bne	r2,zero,1e48 <_realloc_r+0x4c8>
    1a9c:	39000215 	stw	r4,8(r7)
    1aa0:	b1000117 	ldw	r4,4(r22)
    1aa4:	30800728 	cmpgeui	r2,r6,28
    1aa8:	39000315 	stw	r4,12(r7)
    1aac:	1001041e 	bne	r2,zero,1ec0 <_realloc_r+0x540>
    1ab0:	b1000217 	ldw	r4,8(r22)
    1ab4:	38800404 	addi	r2,r7,16
    1ab8:	b5800204 	addi	r22,r22,8
    1abc:	11000015 	stw	r4,0(r2)
    1ac0:	b1000117 	ldw	r4,4(r22)
    1ac4:	b823883a 	mov	r17,r23
    1ac8:	3825883a 	mov	r18,r7
    1acc:	11000115 	stw	r4,4(r2)
    1ad0:	b1000217 	ldw	r4,8(r22)
    1ad4:	182d883a 	mov	r22,r3
    1ad8:	11000215 	stw	r4,8(r2)
    1adc:	91800117 	ldw	r6,4(r18)
    1ae0:	8c05c83a 	sub	r2,r17,r16
    1ae4:	10c00430 	cmpltui	r3,r2,16
    1ae8:	3180004c 	andi	r6,r6,1
    1aec:	18004926 	beq	r3,zero,1c14 <_realloc_r+0x294>
    1af0:	898cb03a 	or	r6,r17,r6
    1af4:	91800115 	stw	r6,4(r18)
    1af8:	a0800117 	ldw	r2,4(r20)
    1afc:	10800054 	ori	r2,r2,1
    1b00:	a0800115 	stw	r2,4(r20)
    1b04:	a809883a 	mov	r4,r21
    1b08:	00036340 	call	3634 <__malloc_unlock>
    1b0c:	b027883a 	mov	r19,r22
    1b10:	00000606 	br	1b2c <_realloc_r+0x1ac>
    1b14:	04000404 	movi	r16,16
    1b18:	00c00404 	movi	r3,16
    1b1c:	84ffb02e 	bgeu	r16,r19,19e0 <_realloc_r+0x60>
    1b20:	00800304 	movi	r2,12
    1b24:	a8800015 	stw	r2,0(r21)
    1b28:	0027883a 	mov	r19,zero
    1b2c:	9805883a 	mov	r2,r19
    1b30:	dfc00a17 	ldw	ra,40(sp)
    1b34:	df000917 	ldw	fp,36(sp)
    1b38:	ddc00817 	ldw	r23,32(sp)
    1b3c:	dd800717 	ldw	r22,28(sp)
    1b40:	dd400617 	ldw	r21,24(sp)
    1b44:	dd000517 	ldw	r20,20(sp)
    1b48:	dcc00417 	ldw	r19,16(sp)
    1b4c:	dc800317 	ldw	r18,12(sp)
    1b50:	dc400217 	ldw	r17,8(sp)
    1b54:	dc000117 	ldw	r16,4(sp)
    1b58:	dec00b04 	addi	sp,sp,44
    1b5c:	f800283a 	ret
    1b60:	1080004c 	andi	r2,r2,1
    1b64:	10007826 	beq	r2,zero,1d48 <_realloc_r+0x3c8>
    1b68:	980b883a 	mov	r5,r19
    1b6c:	a809883a 	mov	r4,r21
    1b70:	0000d880 	call	d88 <_malloc_r>
    1b74:	1027883a 	mov	r19,r2
    1b78:	10001626 	beq	r2,zero,1bd4 <_realloc_r+0x254>
    1b7c:	b0bfff17 	ldw	r2,-4(r22)
    1b80:	013fff84 	movi	r4,-2
    1b84:	98fffe04 	addi	r3,r19,-8
    1b88:	1104703a 	and	r2,r2,r4
    1b8c:	9085883a 	add	r2,r18,r2
    1b90:	10c06726 	beq	r2,r3,1d30 <_realloc_r+0x3b0>
    1b94:	89bfff04 	addi	r6,r17,-4
    1b98:	30800968 	cmpgeui	r2,r6,37
    1b9c:	1000761e 	bne	r2,zero,1d78 <_realloc_r+0x3f8>
    1ba0:	30800530 	cmpltui	r2,r6,20
    1ba4:	b1000017 	ldw	r4,0(r22)
    1ba8:	10003726 	beq	r2,zero,1c88 <_realloc_r+0x308>
    1bac:	9805883a 	mov	r2,r19
    1bb0:	b007883a 	mov	r3,r22
    1bb4:	11000015 	stw	r4,0(r2)
    1bb8:	19000117 	ldw	r4,4(r3)
    1bbc:	11000115 	stw	r4,4(r2)
    1bc0:	18c00217 	ldw	r3,8(r3)
    1bc4:	10c00215 	stw	r3,8(r2)
    1bc8:	b00b883a 	mov	r5,r22
    1bcc:	a809883a 	mov	r4,r21
    1bd0:	00028340 	call	2834 <_free_r>
    1bd4:	a809883a 	mov	r4,r21
    1bd8:	00036340 	call	3634 <__malloc_unlock>
    1bdc:	003fd306 	br	1b2c <_realloc_r+0x1ac>
    1be0:	300b883a 	mov	r5,r6
    1be4:	dfc00a17 	ldw	ra,40(sp)
    1be8:	df000917 	ldw	fp,36(sp)
    1bec:	ddc00817 	ldw	r23,32(sp)
    1bf0:	dd800717 	ldw	r22,28(sp)
    1bf4:	dd400617 	ldw	r21,24(sp)
    1bf8:	dd000517 	ldw	r20,20(sp)
    1bfc:	dcc00417 	ldw	r19,16(sp)
    1c00:	dc800317 	ldw	r18,12(sp)
    1c04:	dc400217 	ldw	r17,8(sp)
    1c08:	dc000117 	ldw	r16,4(sp)
    1c0c:	dec00b04 	addi	sp,sp,44
    1c10:	0000d881 	jmpi	d88 <_malloc_r>
    1c14:	340cb03a 	or	r6,r6,r16
    1c18:	91800115 	stw	r6,4(r18)
    1c1c:	940b883a 	add	r5,r18,r16
    1c20:	10800054 	ori	r2,r2,1
    1c24:	28800115 	stw	r2,4(r5)
    1c28:	a0800117 	ldw	r2,4(r20)
    1c2c:	29400204 	addi	r5,r5,8
    1c30:	a809883a 	mov	r4,r21
    1c34:	10800054 	ori	r2,r2,1
    1c38:	a0800115 	stw	r2,4(r20)
    1c3c:	00028340 	call	2834 <_free_r>
    1c40:	003fb006 	br	1b04 <_realloc_r+0x184>
    1c44:	2148703a 	and	r4,r4,r5
    1c48:	890b883a 	add	r5,r17,r4
    1c4c:	81800404 	addi	r6,r16,16
    1c50:	29bf7716 	blt	r5,r6,1a30 <_realloc_r+0xb0>
    1c54:	9425883a 	add	r18,r18,r16
    1c58:	2c05c83a 	sub	r2,r5,r16
    1c5c:	e4800215 	stw	r18,8(fp)
    1c60:	10800054 	ori	r2,r2,1
    1c64:	90800115 	stw	r2,4(r18)
    1c68:	b0bfff17 	ldw	r2,-4(r22)
    1c6c:	a809883a 	mov	r4,r21
    1c70:	b027883a 	mov	r19,r22
    1c74:	1080004c 	andi	r2,r2,1
    1c78:	1420b03a 	or	r16,r2,r16
    1c7c:	b43fff15 	stw	r16,-4(r22)
    1c80:	00036340 	call	3634 <__malloc_unlock>
    1c84:	003fa906 	br	1b2c <_realloc_r+0x1ac>
    1c88:	99000015 	stw	r4,0(r19)
    1c8c:	b0c00117 	ldw	r3,4(r22)
    1c90:	30800728 	cmpgeui	r2,r6,28
    1c94:	98c00115 	stw	r3,4(r19)
    1c98:	1000611e 	bne	r2,zero,1e20 <_realloc_r+0x4a0>
    1c9c:	b0c00204 	addi	r3,r22,8
    1ca0:	98800204 	addi	r2,r19,8
    1ca4:	b1000217 	ldw	r4,8(r22)
    1ca8:	003fc206 	br	1bb4 <_realloc_r+0x234>
    1cac:	a0800317 	ldw	r2,12(r20)
    1cb0:	a0c00217 	ldw	r3,8(r20)
    1cb4:	89bfff04 	addi	r6,r17,-4
    1cb8:	31000968 	cmpgeui	r4,r6,37
    1cbc:	18800315 	stw	r2,12(r3)
    1cc0:	10c00215 	stw	r3,8(r2)
    1cc4:	38c00217 	ldw	r3,8(r7)
    1cc8:	38800317 	ldw	r2,12(r7)
    1ccc:	3a000204 	addi	r8,r7,8
    1cd0:	3de9883a 	add	r20,r7,r23
    1cd4:	18800315 	stw	r2,12(r3)
    1cd8:	10c00215 	stw	r3,8(r2)
    1cdc:	20006f1e 	bne	r4,zero,1e9c <_realloc_r+0x51c>
    1ce0:	30800530 	cmpltui	r2,r6,20
    1ce4:	b0c00017 	ldw	r3,0(r22)
    1ce8:	10006a1e 	bne	r2,zero,1e94 <_realloc_r+0x514>
    1cec:	38c00215 	stw	r3,8(r7)
    1cf0:	b0c00117 	ldw	r3,4(r22)
    1cf4:	30800728 	cmpgeui	r2,r6,28
    1cf8:	38c00315 	stw	r3,12(r7)
    1cfc:	10007a1e 	bne	r2,zero,1ee8 <_realloc_r+0x568>
    1d00:	b0c00217 	ldw	r3,8(r22)
    1d04:	38800404 	addi	r2,r7,16
    1d08:	b5800204 	addi	r22,r22,8
    1d0c:	10c00015 	stw	r3,0(r2)
    1d10:	b0c00117 	ldw	r3,4(r22)
    1d14:	b823883a 	mov	r17,r23
    1d18:	3825883a 	mov	r18,r7
    1d1c:	10c00115 	stw	r3,4(r2)
    1d20:	b0c00217 	ldw	r3,8(r22)
    1d24:	402d883a 	mov	r22,r8
    1d28:	10c00215 	stw	r3,8(r2)
    1d2c:	003f6b06 	br	1adc <_realloc_r+0x15c>
    1d30:	98bfff17 	ldw	r2,-4(r19)
    1d34:	00ffff04 	movi	r3,-4
    1d38:	10c4703a 	and	r2,r2,r3
    1d3c:	88a3883a 	add	r17,r17,r2
    1d40:	9469883a 	add	r20,r18,r17
    1d44:	003f6506 	br	1adc <_realloc_r+0x15c>
    1d48:	b1fffe17 	ldw	r7,-8(r22)
    1d4c:	91cfc83a 	sub	r7,r18,r7
    1d50:	39000117 	ldw	r4,4(r7)
    1d54:	214a703a 	and	r5,r4,r5
    1d58:	003f4106 	br	1a60 <_realloc_r+0xe0>
    1d5c:	a0800317 	ldw	r2,12(r20)
    1d60:	a0c00217 	ldw	r3,8(r20)
    1d64:	2823883a 	mov	r17,r5
    1d68:	9169883a 	add	r20,r18,r5
    1d6c:	18800315 	stw	r2,12(r3)
    1d70:	10c00215 	stw	r3,8(r2)
    1d74:	003f5906 	br	1adc <_realloc_r+0x15c>
    1d78:	b00b883a 	mov	r5,r22
    1d7c:	9809883a 	mov	r4,r19
    1d80:	00017640 	call	1764 <memmove>
    1d84:	003f9006 	br	1bc8 <_realloc_r+0x248>
    1d88:	80800404 	addi	r2,r16,16
    1d8c:	b8bf3416 	blt	r23,r2,1a60 <_realloc_r+0xe0>
    1d90:	38800317 	ldw	r2,12(r7)
    1d94:	38c00217 	ldw	r3,8(r7)
    1d98:	89bfff04 	addi	r6,r17,-4
    1d9c:	31000968 	cmpgeui	r4,r6,37
    1da0:	18800315 	stw	r2,12(r3)
    1da4:	10c00215 	stw	r3,8(r2)
    1da8:	3cc00204 	addi	r19,r7,8
    1dac:	20005a1e 	bne	r4,zero,1f18 <_realloc_r+0x598>
    1db0:	30800530 	cmpltui	r2,r6,20
    1db4:	b0c00017 	ldw	r3,0(r22)
    1db8:	1000551e 	bne	r2,zero,1f10 <_realloc_r+0x590>
    1dbc:	38c00215 	stw	r3,8(r7)
    1dc0:	b0c00117 	ldw	r3,4(r22)
    1dc4:	30800728 	cmpgeui	r2,r6,28
    1dc8:	38c00315 	stw	r3,12(r7)
    1dcc:	1000661e 	bne	r2,zero,1f68 <_realloc_r+0x5e8>
    1dd0:	b0c00217 	ldw	r3,8(r22)
    1dd4:	38800404 	addi	r2,r7,16
    1dd8:	b5800204 	addi	r22,r22,8
    1ddc:	10c00015 	stw	r3,0(r2)
    1de0:	b0c00117 	ldw	r3,4(r22)
    1de4:	10c00115 	stw	r3,4(r2)
    1de8:	b0c00217 	ldw	r3,8(r22)
    1dec:	10c00215 	stw	r3,8(r2)
    1df0:	3c07883a 	add	r3,r7,r16
    1df4:	bc05c83a 	sub	r2,r23,r16
    1df8:	e0c00215 	stw	r3,8(fp)
    1dfc:	10800054 	ori	r2,r2,1
    1e00:	18800115 	stw	r2,4(r3)
    1e04:	38800117 	ldw	r2,4(r7)
    1e08:	a809883a 	mov	r4,r21
    1e0c:	1080004c 	andi	r2,r2,1
    1e10:	1420b03a 	or	r16,r2,r16
    1e14:	3c000115 	stw	r16,4(r7)
    1e18:	00036340 	call	3634 <__malloc_unlock>
    1e1c:	003f4306 	br	1b2c <_realloc_r+0x1ac>
    1e20:	b0800217 	ldw	r2,8(r22)
    1e24:	31800920 	cmpeqi	r6,r6,36
    1e28:	98800215 	stw	r2,8(r19)
    1e2c:	b0800317 	ldw	r2,12(r22)
    1e30:	98800315 	stw	r2,12(r19)
    1e34:	3000061e 	bne	r6,zero,1e50 <_realloc_r+0x4d0>
    1e38:	b0c00404 	addi	r3,r22,16
    1e3c:	98800404 	addi	r2,r19,16
    1e40:	b1000417 	ldw	r4,16(r22)
    1e44:	003f5b06 	br	1bb4 <_realloc_r+0x234>
    1e48:	1805883a 	mov	r2,r3
    1e4c:	003f1b06 	br	1abc <_realloc_r+0x13c>
    1e50:	b1000417 	ldw	r4,16(r22)
    1e54:	b0c00604 	addi	r3,r22,24
    1e58:	98800604 	addi	r2,r19,24
    1e5c:	99000415 	stw	r4,16(r19)
    1e60:	b1000517 	ldw	r4,20(r22)
    1e64:	99000515 	stw	r4,20(r19)
    1e68:	b1000617 	ldw	r4,24(r22)
    1e6c:	003f5106 	br	1bb4 <_realloc_r+0x234>
    1e70:	b00b883a 	mov	r5,r22
    1e74:	1809883a 	mov	r4,r3
    1e78:	d9c00015 	stw	r7,0(sp)
    1e7c:	00017640 	call	1764 <memmove>
    1e80:	d9c00017 	ldw	r7,0(sp)
    1e84:	102d883a 	mov	r22,r2
    1e88:	b823883a 	mov	r17,r23
    1e8c:	3825883a 	mov	r18,r7
    1e90:	003f1206 	br	1adc <_realloc_r+0x15c>
    1e94:	4005883a 	mov	r2,r8
    1e98:	003f9c06 	br	1d0c <_realloc_r+0x38c>
    1e9c:	b00b883a 	mov	r5,r22
    1ea0:	4009883a 	mov	r4,r8
    1ea4:	d9c00015 	stw	r7,0(sp)
    1ea8:	00017640 	call	1764 <memmove>
    1eac:	d9c00017 	ldw	r7,0(sp)
    1eb0:	102d883a 	mov	r22,r2
    1eb4:	b823883a 	mov	r17,r23
    1eb8:	3825883a 	mov	r18,r7
    1ebc:	003f0706 	br	1adc <_realloc_r+0x15c>
    1ec0:	b0800217 	ldw	r2,8(r22)
    1ec4:	31800920 	cmpeqi	r6,r6,36
    1ec8:	38800415 	stw	r2,16(r7)
    1ecc:	b0800317 	ldw	r2,12(r22)
    1ed0:	38800515 	stw	r2,20(r7)
    1ed4:	b1000417 	ldw	r4,16(r22)
    1ed8:	3000151e 	bne	r6,zero,1f30 <_realloc_r+0x5b0>
    1edc:	38800604 	addi	r2,r7,24
    1ee0:	b5800404 	addi	r22,r22,16
    1ee4:	003ef506 	br	1abc <_realloc_r+0x13c>
    1ee8:	b0800217 	ldw	r2,8(r22)
    1eec:	31800920 	cmpeqi	r6,r6,36
    1ef0:	38800415 	stw	r2,16(r7)
    1ef4:	b0800317 	ldw	r2,12(r22)
    1ef8:	38800515 	stw	r2,20(r7)
    1efc:	b0c00417 	ldw	r3,16(r22)
    1f00:	3000121e 	bne	r6,zero,1f4c <_realloc_r+0x5cc>
    1f04:	38800604 	addi	r2,r7,24
    1f08:	b5800404 	addi	r22,r22,16
    1f0c:	003f7f06 	br	1d0c <_realloc_r+0x38c>
    1f10:	9805883a 	mov	r2,r19
    1f14:	003fb106 	br	1ddc <_realloc_r+0x45c>
    1f18:	b00b883a 	mov	r5,r22
    1f1c:	9809883a 	mov	r4,r19
    1f20:	d9c00015 	stw	r7,0(sp)
    1f24:	00017640 	call	1764 <memmove>
    1f28:	d9c00017 	ldw	r7,0(sp)
    1f2c:	003fb006 	br	1df0 <_realloc_r+0x470>
    1f30:	b5800604 	addi	r22,r22,24
    1f34:	39000615 	stw	r4,24(r7)
    1f38:	b13fff17 	ldw	r4,-4(r22)
    1f3c:	38800804 	addi	r2,r7,32
    1f40:	39000715 	stw	r4,28(r7)
    1f44:	b1000017 	ldw	r4,0(r22)
    1f48:	003edc06 	br	1abc <_realloc_r+0x13c>
    1f4c:	b5800604 	addi	r22,r22,24
    1f50:	38c00615 	stw	r3,24(r7)
    1f54:	b0ffff17 	ldw	r3,-4(r22)
    1f58:	38800804 	addi	r2,r7,32
    1f5c:	38c00715 	stw	r3,28(r7)
    1f60:	b0c00017 	ldw	r3,0(r22)
    1f64:	003f6906 	br	1d0c <_realloc_r+0x38c>
    1f68:	b0800217 	ldw	r2,8(r22)
    1f6c:	31800920 	cmpeqi	r6,r6,36
    1f70:	38800415 	stw	r2,16(r7)
    1f74:	b0800317 	ldw	r2,12(r22)
    1f78:	38800515 	stw	r2,20(r7)
    1f7c:	b0c00417 	ldw	r3,16(r22)
    1f80:	3000031e 	bne	r6,zero,1f90 <_realloc_r+0x610>
    1f84:	38800604 	addi	r2,r7,24
    1f88:	b5800404 	addi	r22,r22,16
    1f8c:	003f9306 	br	1ddc <_realloc_r+0x45c>
    1f90:	b5800604 	addi	r22,r22,24
    1f94:	38c00615 	stw	r3,24(r7)
    1f98:	b0ffff17 	ldw	r3,-4(r22)
    1f9c:	38800804 	addi	r2,r7,32
    1fa0:	38c00715 	stw	r3,28(r7)
    1fa4:	b0c00017 	ldw	r3,0(r22)
    1fa8:	003f8c06 	br	1ddc <_realloc_r+0x45c>

00001fac <_sbrk_r>:
    1fac:	defffe04 	addi	sp,sp,-8
    1fb0:	dc000015 	stw	r16,0(sp)
    1fb4:	00800074 	movhi	r2,1
    1fb8:	2021883a 	mov	r16,r4
    1fbc:	2809883a 	mov	r4,r5
    1fc0:	dfc00115 	stw	ra,4(sp)
    1fc4:	1022c315 	stw	zero,-29940(r2)
    1fc8:	000380c0 	call	380c <sbrk>
    1fcc:	10ffffd8 	cmpnei	r3,r2,-1
    1fd0:	18000426 	beq	r3,zero,1fe4 <_sbrk_r+0x38>
    1fd4:	dfc00117 	ldw	ra,4(sp)
    1fd8:	dc000017 	ldw	r16,0(sp)
    1fdc:	dec00204 	addi	sp,sp,8
    1fe0:	f800283a 	ret
    1fe4:	00c00074 	movhi	r3,1
    1fe8:	18e2c317 	ldw	r3,-29940(r3)
    1fec:	183ff926 	beq	r3,zero,1fd4 <_sbrk_r+0x28>
    1ff0:	80c00015 	stw	r3,0(r16)
    1ff4:	dfc00117 	ldw	ra,4(sp)
    1ff8:	dc000017 	ldw	r16,0(sp)
    1ffc:	dec00204 	addi	sp,sp,8
    2000:	f800283a 	ret

00002004 <__sread>:
    2004:	defffe04 	addi	sp,sp,-8
    2008:	dc000015 	stw	r16,0(sp)
    200c:	2821883a 	mov	r16,r5
    2010:	2940038f 	ldh	r5,14(r5)
    2014:	dfc00115 	stw	ra,4(sp)
    2018:	0002d680 	call	2d68 <_read_r>
    201c:	10000716 	blt	r2,zero,203c <__sread+0x38>
    2020:	80c01417 	ldw	r3,80(r16)
    2024:	1887883a 	add	r3,r3,r2
    2028:	80c01415 	stw	r3,80(r16)
    202c:	dfc00117 	ldw	ra,4(sp)
    2030:	dc000017 	ldw	r16,0(sp)
    2034:	dec00204 	addi	sp,sp,8
    2038:	f800283a 	ret
    203c:	80c0030b 	ldhu	r3,12(r16)
    2040:	18fbffcc 	andi	r3,r3,61439
    2044:	80c0030d 	sth	r3,12(r16)
    2048:	dfc00117 	ldw	ra,4(sp)
    204c:	dc000017 	ldw	r16,0(sp)
    2050:	dec00204 	addi	sp,sp,8
    2054:	f800283a 	ret

00002058 <__seofread>:
    2058:	0005883a 	mov	r2,zero
    205c:	f800283a 	ret

00002060 <__swrite>:
    2060:	2880030b 	ldhu	r2,12(r5)
    2064:	defffb04 	addi	sp,sp,-20
    2068:	dcc00315 	stw	r19,12(sp)
    206c:	dc800215 	stw	r18,8(sp)
    2070:	dc400115 	stw	r17,4(sp)
    2074:	dc000015 	stw	r16,0(sp)
    2078:	dfc00415 	stw	ra,16(sp)
    207c:	10c0400c 	andi	r3,r2,256
    2080:	2821883a 	mov	r16,r5
    2084:	2023883a 	mov	r17,r4
    2088:	3025883a 	mov	r18,r6
    208c:	3827883a 	mov	r19,r7
    2090:	2940038f 	ldh	r5,14(r5)
    2094:	18000c1e 	bne	r3,zero,20c8 <__swrite+0x68>
    2098:	10bbffcc 	andi	r2,r2,61439
    209c:	980f883a 	mov	r7,r19
    20a0:	900d883a 	mov	r6,r18
    20a4:	8809883a 	mov	r4,r17
    20a8:	8080030d 	sth	r2,12(r16)
    20ac:	dfc00417 	ldw	ra,16(sp)
    20b0:	dcc00317 	ldw	r19,12(sp)
    20b4:	dc800217 	ldw	r18,8(sp)
    20b8:	dc400117 	ldw	r17,4(sp)
    20bc:	dc000017 	ldw	r16,0(sp)
    20c0:	dec00504 	addi	sp,sp,20
    20c4:	00021441 	jmpi	2144 <_write_r>
    20c8:	01c00084 	movi	r7,2
    20cc:	000d883a 	mov	r6,zero
    20d0:	0002b300 	call	2b30 <_lseek_r>
    20d4:	8080030b 	ldhu	r2,12(r16)
    20d8:	8140038f 	ldh	r5,14(r16)
    20dc:	003fee06 	br	2098 <__swrite+0x38>

000020e0 <__sseek>:
    20e0:	defffe04 	addi	sp,sp,-8
    20e4:	dc000015 	stw	r16,0(sp)
    20e8:	2821883a 	mov	r16,r5
    20ec:	2940038f 	ldh	r5,14(r5)
    20f0:	dfc00115 	stw	ra,4(sp)
    20f4:	0002b300 	call	2b30 <_lseek_r>
    20f8:	10ffffd8 	cmpnei	r3,r2,-1
    20fc:	18000826 	beq	r3,zero,2120 <__sseek+0x40>
    2100:	80c0030b 	ldhu	r3,12(r16)
    2104:	80801415 	stw	r2,80(r16)
    2108:	18c40014 	ori	r3,r3,4096
    210c:	80c0030d 	sth	r3,12(r16)
    2110:	dfc00117 	ldw	ra,4(sp)
    2114:	dc000017 	ldw	r16,0(sp)
    2118:	dec00204 	addi	sp,sp,8
    211c:	f800283a 	ret
    2120:	80c0030b 	ldhu	r3,12(r16)
    2124:	18fbffcc 	andi	r3,r3,61439
    2128:	80c0030d 	sth	r3,12(r16)
    212c:	dfc00117 	ldw	ra,4(sp)
    2130:	dc000017 	ldw	r16,0(sp)
    2134:	dec00204 	addi	sp,sp,8
    2138:	f800283a 	ret

0000213c <__sclose>:
    213c:	2940038f 	ldh	r5,14(r5)
    2140:	00023081 	jmpi	2308 <_close_r>

00002144 <_write_r>:
    2144:	defffe04 	addi	sp,sp,-8
    2148:	2805883a 	mov	r2,r5
    214c:	dc000015 	stw	r16,0(sp)
    2150:	300b883a 	mov	r5,r6
    2154:	2021883a 	mov	r16,r4
    2158:	380d883a 	mov	r6,r7
    215c:	1009883a 	mov	r4,r2
    2160:	00800074 	movhi	r2,1
    2164:	dfc00115 	stw	ra,4(sp)
    2168:	1022c315 	stw	zero,-29940(r2)
    216c:	00038f80 	call	38f8 <write>
    2170:	10ffffd8 	cmpnei	r3,r2,-1
    2174:	18000426 	beq	r3,zero,2188 <_write_r+0x44>
    2178:	dfc00117 	ldw	ra,4(sp)
    217c:	dc000017 	ldw	r16,0(sp)
    2180:	dec00204 	addi	sp,sp,8
    2184:	f800283a 	ret
    2188:	00c00074 	movhi	r3,1
    218c:	18e2c317 	ldw	r3,-29940(r3)
    2190:	183ff926 	beq	r3,zero,2178 <_write_r+0x34>
    2194:	80c00015 	stw	r3,0(r16)
    2198:	dfc00117 	ldw	ra,4(sp)
    219c:	dc000017 	ldw	r16,0(sp)
    21a0:	dec00204 	addi	sp,sp,8
    21a4:	f800283a 	ret

000021a8 <__swsetup_r>:
    21a8:	00800034 	movhi	r2,0
    21ac:	109c1817 	ldw	r2,28768(r2)
    21b0:	defffd04 	addi	sp,sp,-12
    21b4:	dc400115 	stw	r17,4(sp)
    21b8:	dc000015 	stw	r16,0(sp)
    21bc:	dfc00215 	stw	ra,8(sp)
    21c0:	2023883a 	mov	r17,r4
    21c4:	2821883a 	mov	r16,r5
    21c8:	10000226 	beq	r2,zero,21d4 <__swsetup_r+0x2c>
    21cc:	10c00e17 	ldw	r3,56(r2)
    21d0:	18002026 	beq	r3,zero,2254 <__swsetup_r+0xac>
    21d4:	8080030b 	ldhu	r2,12(r16)
    21d8:	10c0020c 	andi	r3,r2,8
    21dc:	1009883a 	mov	r4,r2
    21e0:	18002226 	beq	r3,zero,226c <__swsetup_r+0xc4>
    21e4:	80c00417 	ldw	r3,16(r16)
    21e8:	18002826 	beq	r3,zero,228c <__swsetup_r+0xe4>
    21ec:	1100004c 	andi	r4,r2,1
    21f0:	20000b1e 	bne	r4,zero,2220 <__swsetup_r+0x78>
    21f4:	1080008c 	andi	r2,r2,2
    21f8:	10002d1e 	bne	r2,zero,22b0 <__swsetup_r+0x108>
    21fc:	80800517 	ldw	r2,20(r16)
    2200:	80800215 	stw	r2,8(r16)
    2204:	18000b26 	beq	r3,zero,2234 <__swsetup_r+0x8c>
    2208:	0005883a 	mov	r2,zero
    220c:	dfc00217 	ldw	ra,8(sp)
    2210:	dc400117 	ldw	r17,4(sp)
    2214:	dc000017 	ldw	r16,0(sp)
    2218:	dec00304 	addi	sp,sp,12
    221c:	f800283a 	ret
    2220:	80800517 	ldw	r2,20(r16)
    2224:	80000215 	stw	zero,8(r16)
    2228:	0085c83a 	sub	r2,zero,r2
    222c:	80800615 	stw	r2,24(r16)
    2230:	183ff51e 	bne	r3,zero,2208 <__swsetup_r+0x60>
    2234:	80c0030b 	ldhu	r3,12(r16)
    2238:	0005883a 	mov	r2,zero
    223c:	1900200c 	andi	r4,r3,128
    2240:	203ff226 	beq	r4,zero,220c <__swsetup_r+0x64>
    2244:	18c01014 	ori	r3,r3,64
    2248:	80c0030d 	sth	r3,12(r16)
    224c:	00bfffc4 	movi	r2,-1
    2250:	003fee06 	br	220c <__swsetup_r+0x64>
    2254:	1009883a 	mov	r4,r2
    2258:	00007140 	call	714 <__sinit>
    225c:	8080030b 	ldhu	r2,12(r16)
    2260:	10c0020c 	andi	r3,r2,8
    2264:	1009883a 	mov	r4,r2
    2268:	183fde1e 	bne	r3,zero,21e4 <__swsetup_r+0x3c>
    226c:	2080040c 	andi	r2,r4,16
    2270:	10001f26 	beq	r2,zero,22f0 <__swsetup_r+0x148>
    2274:	2080010c 	andi	r2,r4,4
    2278:	10000f1e 	bne	r2,zero,22b8 <__swsetup_r+0x110>
    227c:	80c00417 	ldw	r3,16(r16)
    2280:	20800214 	ori	r2,r4,8
    2284:	8080030d 	sth	r2,12(r16)
    2288:	183fd81e 	bne	r3,zero,21ec <__swsetup_r+0x44>
    228c:	1100a00c 	andi	r4,r2,640
    2290:	21008020 	cmpeqi	r4,r4,512
    2294:	203fd51e 	bne	r4,zero,21ec <__swsetup_r+0x44>
    2298:	800b883a 	mov	r5,r16
    229c:	8809883a 	mov	r4,r17
    22a0:	0002c2c0 	call	2c2c <__smakebuf_r>
    22a4:	8080030b 	ldhu	r2,12(r16)
    22a8:	80c00417 	ldw	r3,16(r16)
    22ac:	003fcf06 	br	21ec <__swsetup_r+0x44>
    22b0:	0005883a 	mov	r2,zero
    22b4:	003fd206 	br	2200 <__swsetup_r+0x58>
    22b8:	81400c17 	ldw	r5,48(r16)
    22bc:	28000626 	beq	r5,zero,22d8 <__swsetup_r+0x130>
    22c0:	80801004 	addi	r2,r16,64
    22c4:	28800326 	beq	r5,r2,22d4 <__swsetup_r+0x12c>
    22c8:	8809883a 	mov	r4,r17
    22cc:	00028340 	call	2834 <_free_r>
    22d0:	8100030b 	ldhu	r4,12(r16)
    22d4:	80000c15 	stw	zero,48(r16)
    22d8:	80c00417 	ldw	r3,16(r16)
    22dc:	00bff6c4 	movi	r2,-37
    22e0:	1108703a 	and	r4,r2,r4
    22e4:	80000115 	stw	zero,4(r16)
    22e8:	80c00015 	stw	r3,0(r16)
    22ec:	003fe406 	br	2280 <__swsetup_r+0xd8>
    22f0:	00800244 	movi	r2,9
    22f4:	88800015 	stw	r2,0(r17)
    22f8:	20801014 	ori	r2,r4,64
    22fc:	8080030d 	sth	r2,12(r16)
    2300:	00bfffc4 	movi	r2,-1
    2304:	003fc106 	br	220c <__swsetup_r+0x64>

00002308 <_close_r>:
    2308:	defffe04 	addi	sp,sp,-8
    230c:	dc000015 	stw	r16,0(sp)
    2310:	00800074 	movhi	r2,1
    2314:	2021883a 	mov	r16,r4
    2318:	2809883a 	mov	r4,r5
    231c:	dfc00115 	stw	ra,4(sp)
    2320:	1022c315 	stw	zero,-29940(r2)
    2324:	00030a00 	call	30a0 <close>
    2328:	10ffffd8 	cmpnei	r3,r2,-1
    232c:	18000426 	beq	r3,zero,2340 <_close_r+0x38>
    2330:	dfc00117 	ldw	ra,4(sp)
    2334:	dc000017 	ldw	r16,0(sp)
    2338:	dec00204 	addi	sp,sp,8
    233c:	f800283a 	ret
    2340:	00c00074 	movhi	r3,1
    2344:	18e2c317 	ldw	r3,-29940(r3)
    2348:	183ff926 	beq	r3,zero,2330 <_close_r+0x28>
    234c:	80c00015 	stw	r3,0(r16)
    2350:	dfc00117 	ldw	ra,4(sp)
    2354:	dc000017 	ldw	r16,0(sp)
    2358:	dec00204 	addi	sp,sp,8
    235c:	f800283a 	ret

00002360 <_fclose_r>:
    2360:	defffc04 	addi	sp,sp,-16
    2364:	dfc00315 	stw	ra,12(sp)
    2368:	dc800215 	stw	r18,8(sp)
    236c:	dc400115 	stw	r17,4(sp)
    2370:	dc000015 	stw	r16,0(sp)
    2374:	28000726 	beq	r5,zero,2394 <_fclose_r+0x34>
    2378:	2023883a 	mov	r17,r4
    237c:	2821883a 	mov	r16,r5
    2380:	20000226 	beq	r4,zero,238c <_fclose_r+0x2c>
    2384:	20800e17 	ldw	r2,56(r4)
    2388:	10002726 	beq	r2,zero,2428 <_fclose_r+0xc8>
    238c:	8080030f 	ldh	r2,12(r16)
    2390:	1000081e 	bne	r2,zero,23b4 <_fclose_r+0x54>
    2394:	0025883a 	mov	r18,zero
    2398:	9005883a 	mov	r2,r18
    239c:	dfc00317 	ldw	ra,12(sp)
    23a0:	dc800217 	ldw	r18,8(sp)
    23a4:	dc400117 	ldw	r17,4(sp)
    23a8:	dc000017 	ldw	r16,0(sp)
    23ac:	dec00404 	addi	sp,sp,16
    23b0:	f800283a 	ret
    23b4:	800b883a 	mov	r5,r16
    23b8:	8809883a 	mov	r4,r17
    23bc:	00024680 	call	2468 <__sflush_r>
    23c0:	1025883a 	mov	r18,r2
    23c4:	80800b17 	ldw	r2,44(r16)
    23c8:	10000426 	beq	r2,zero,23dc <_fclose_r+0x7c>
    23cc:	81400717 	ldw	r5,28(r16)
    23d0:	8809883a 	mov	r4,r17
    23d4:	103ee83a 	callr	r2
    23d8:	10001716 	blt	r2,zero,2438 <_fclose_r+0xd8>
    23dc:	8080030b 	ldhu	r2,12(r16)
    23e0:	1080200c 	andi	r2,r2,128
    23e4:	1000181e 	bne	r2,zero,2448 <_fclose_r+0xe8>
    23e8:	81400c17 	ldw	r5,48(r16)
    23ec:	28000526 	beq	r5,zero,2404 <_fclose_r+0xa4>
    23f0:	80801004 	addi	r2,r16,64
    23f4:	28800226 	beq	r5,r2,2400 <_fclose_r+0xa0>
    23f8:	8809883a 	mov	r4,r17
    23fc:	00028340 	call	2834 <_free_r>
    2400:	80000c15 	stw	zero,48(r16)
    2404:	81401117 	ldw	r5,68(r16)
    2408:	28000326 	beq	r5,zero,2418 <_fclose_r+0xb8>
    240c:	8809883a 	mov	r4,r17
    2410:	00028340 	call	2834 <_free_r>
    2414:	80001115 	stw	zero,68(r16)
    2418:	00007240 	call	724 <__sfp_lock_acquire>
    241c:	8000030d 	sth	zero,12(r16)
    2420:	00007280 	call	728 <__sfp_lock_release>
    2424:	003fdc06 	br	2398 <_fclose_r+0x38>
    2428:	00007140 	call	714 <__sinit>
    242c:	8080030f 	ldh	r2,12(r16)
    2430:	103fd826 	beq	r2,zero,2394 <_fclose_r+0x34>
    2434:	003fdf06 	br	23b4 <_fclose_r+0x54>
    2438:	8080030b 	ldhu	r2,12(r16)
    243c:	04bfffc4 	movi	r18,-1
    2440:	1080200c 	andi	r2,r2,128
    2444:	103fe826 	beq	r2,zero,23e8 <_fclose_r+0x88>
    2448:	81400417 	ldw	r5,16(r16)
    244c:	8809883a 	mov	r4,r17
    2450:	00028340 	call	2834 <_free_r>
    2454:	003fe406 	br	23e8 <_fclose_r+0x88>

00002458 <fclose>:
    2458:	00800034 	movhi	r2,0
    245c:	200b883a 	mov	r5,r4
    2460:	111c1817 	ldw	r4,28768(r2)
    2464:	00023601 	jmpi	2360 <_fclose_r>

00002468 <__sflush_r>:
    2468:	2880030b 	ldhu	r2,12(r5)
    246c:	defffb04 	addi	sp,sp,-20
    2470:	dcc00315 	stw	r19,12(sp)
    2474:	dc000015 	stw	r16,0(sp)
    2478:	dfc00415 	stw	ra,16(sp)
    247c:	dc800215 	stw	r18,8(sp)
    2480:	dc400115 	stw	r17,4(sp)
    2484:	10c0020c 	andi	r3,r2,8
    2488:	2821883a 	mov	r16,r5
    248c:	2027883a 	mov	r19,r4
    2490:	18003f1e 	bne	r3,zero,2590 <__sflush_r+0x128>
    2494:	28c00117 	ldw	r3,4(r5)
    2498:	10820014 	ori	r2,r2,2048
    249c:	2880030d 	sth	r2,12(r5)
    24a0:	00c0550e 	bge	zero,r3,25f8 <__sflush_r+0x190>
    24a4:	82000a17 	ldw	r8,40(r16)
    24a8:	40003126 	beq	r8,zero,2570 <__sflush_r+0x108>
    24ac:	9c400017 	ldw	r17,0(r19)
    24b0:	1104000c 	andi	r4,r2,4096
    24b4:	98000015 	stw	zero,0(r19)
    24b8:	1007883a 	mov	r3,r2
    24bc:	81400717 	ldw	r5,28(r16)
    24c0:	2000521e 	bne	r4,zero,260c <__sflush_r+0x1a4>
    24c4:	01c00044 	movi	r7,1
    24c8:	000d883a 	mov	r6,zero
    24cc:	9809883a 	mov	r4,r19
    24d0:	403ee83a 	callr	r8
    24d4:	10ffffd8 	cmpnei	r3,r2,-1
    24d8:	18005826 	beq	r3,zero,263c <__sflush_r+0x1d4>
    24dc:	80c0030b 	ldhu	r3,12(r16)
    24e0:	82000a17 	ldw	r8,40(r16)
    24e4:	81400717 	ldw	r5,28(r16)
    24e8:	18c0010c 	andi	r3,r3,4
    24ec:	18000626 	beq	r3,zero,2508 <__sflush_r+0xa0>
    24f0:	81000117 	ldw	r4,4(r16)
    24f4:	80c00c17 	ldw	r3,48(r16)
    24f8:	1105c83a 	sub	r2,r2,r4
    24fc:	18000226 	beq	r3,zero,2508 <__sflush_r+0xa0>
    2500:	80c00f17 	ldw	r3,60(r16)
    2504:	10c5c83a 	sub	r2,r2,r3
    2508:	000f883a 	mov	r7,zero
    250c:	100d883a 	mov	r6,r2
    2510:	9809883a 	mov	r4,r19
    2514:	403ee83a 	callr	r8
    2518:	10ffffd8 	cmpnei	r3,r2,-1
    251c:	18003d1e 	bne	r3,zero,2614 <__sflush_r+0x1ac>
    2520:	99000017 	ldw	r4,0(r19)
    2524:	80c0030b 	ldhu	r3,12(r16)
    2528:	20004e26 	beq	r4,zero,2664 <__sflush_r+0x1fc>
    252c:	21400760 	cmpeqi	r5,r4,29
    2530:	2800021e 	bne	r5,zero,253c <__sflush_r+0xd4>
    2534:	210005a0 	cmpeqi	r4,r4,22
    2538:	20002c26 	beq	r4,zero,25ec <__sflush_r+0x184>
    253c:	80800417 	ldw	r2,16(r16)
    2540:	18fdffcc 	andi	r3,r3,63487
    2544:	80c0030d 	sth	r3,12(r16)
    2548:	80000115 	stw	zero,4(r16)
    254c:	80800015 	stw	r2,0(r16)
    2550:	81400c17 	ldw	r5,48(r16)
    2554:	9c400015 	stw	r17,0(r19)
    2558:	28000526 	beq	r5,zero,2570 <__sflush_r+0x108>
    255c:	80801004 	addi	r2,r16,64
    2560:	28800226 	beq	r5,r2,256c <__sflush_r+0x104>
    2564:	9809883a 	mov	r4,r19
    2568:	00028340 	call	2834 <_free_r>
    256c:	80000c15 	stw	zero,48(r16)
    2570:	0005883a 	mov	r2,zero
    2574:	dfc00417 	ldw	ra,16(sp)
    2578:	dcc00317 	ldw	r19,12(sp)
    257c:	dc800217 	ldw	r18,8(sp)
    2580:	dc400117 	ldw	r17,4(sp)
    2584:	dc000017 	ldw	r16,0(sp)
    2588:	dec00504 	addi	sp,sp,20
    258c:	f800283a 	ret
    2590:	2c800417 	ldw	r18,16(r5)
    2594:	903ff626 	beq	r18,zero,2570 <__sflush_r+0x108>
    2598:	2c400017 	ldw	r17,0(r5)
    259c:	108000cc 	andi	r2,r2,3
    25a0:	2c800015 	stw	r18,0(r5)
    25a4:	8ca3c83a 	sub	r17,r17,r18
    25a8:	1000161e 	bne	r2,zero,2604 <__sflush_r+0x19c>
    25ac:	28800517 	ldw	r2,20(r5)
    25b0:	80800215 	stw	r2,8(r16)
    25b4:	04400316 	blt	zero,r17,25c4 <__sflush_r+0x15c>
    25b8:	003fed06 	br	2570 <__sflush_r+0x108>
    25bc:	90a5883a 	add	r18,r18,r2
    25c0:	047feb0e 	bge	zero,r17,2570 <__sflush_r+0x108>
    25c4:	80800917 	ldw	r2,36(r16)
    25c8:	81400717 	ldw	r5,28(r16)
    25cc:	880f883a 	mov	r7,r17
    25d0:	900d883a 	mov	r6,r18
    25d4:	9809883a 	mov	r4,r19
    25d8:	103ee83a 	callr	r2
    25dc:	88a3c83a 	sub	r17,r17,r2
    25e0:	00bff616 	blt	zero,r2,25bc <__sflush_r+0x154>
    25e4:	80c0030b 	ldhu	r3,12(r16)
    25e8:	00bfffc4 	movi	r2,-1
    25ec:	18c01014 	ori	r3,r3,64
    25f0:	80c0030d 	sth	r3,12(r16)
    25f4:	003fdf06 	br	2574 <__sflush_r+0x10c>
    25f8:	28c00f17 	ldw	r3,60(r5)
    25fc:	00ffa916 	blt	zero,r3,24a4 <__sflush_r+0x3c>
    2600:	003fdb06 	br	2570 <__sflush_r+0x108>
    2604:	0005883a 	mov	r2,zero
    2608:	003fe906 	br	25b0 <__sflush_r+0x148>
    260c:	80801417 	ldw	r2,80(r16)
    2610:	003fb506 	br	24e8 <__sflush_r+0x80>
    2614:	80c0030b 	ldhu	r3,12(r16)
    2618:	81000417 	ldw	r4,16(r16)
    261c:	80000115 	stw	zero,4(r16)
    2620:	197dffcc 	andi	r5,r3,63487
    2624:	8140030d 	sth	r5,12(r16)
    2628:	81000015 	stw	r4,0(r16)
    262c:	18c4000c 	andi	r3,r3,4096
    2630:	183fc726 	beq	r3,zero,2550 <__sflush_r+0xe8>
    2634:	80801415 	stw	r2,80(r16)
    2638:	003fc506 	br	2550 <__sflush_r+0xe8>
    263c:	98c00017 	ldw	r3,0(r19)
    2640:	183fa626 	beq	r3,zero,24dc <__sflush_r+0x74>
    2644:	19000760 	cmpeqi	r4,r3,29
    2648:	20000e1e 	bne	r4,zero,2684 <__sflush_r+0x21c>
    264c:	18c00598 	cmpnei	r3,r3,22
    2650:	18000c26 	beq	r3,zero,2684 <__sflush_r+0x21c>
    2654:	80c0030b 	ldhu	r3,12(r16)
    2658:	18c01014 	ori	r3,r3,64
    265c:	80c0030d 	sth	r3,12(r16)
    2660:	003fc406 	br	2574 <__sflush_r+0x10c>
    2664:	81000417 	ldw	r4,16(r16)
    2668:	197dffcc 	andi	r5,r3,63487
    266c:	8140030d 	sth	r5,12(r16)
    2670:	80000115 	stw	zero,4(r16)
    2674:	81000015 	stw	r4,0(r16)
    2678:	18c4000c 	andi	r3,r3,4096
    267c:	183fb426 	beq	r3,zero,2550 <__sflush_r+0xe8>
    2680:	003fec06 	br	2634 <__sflush_r+0x1cc>
    2684:	9c400015 	stw	r17,0(r19)
    2688:	0005883a 	mov	r2,zero
    268c:	003fb906 	br	2574 <__sflush_r+0x10c>

00002690 <_fflush_r>:
    2690:	defffd04 	addi	sp,sp,-12
    2694:	dc000115 	stw	r16,4(sp)
    2698:	dfc00215 	stw	ra,8(sp)
    269c:	2021883a 	mov	r16,r4
    26a0:	20000226 	beq	r4,zero,26ac <_fflush_r+0x1c>
    26a4:	20800e17 	ldw	r2,56(r4)
    26a8:	10000726 	beq	r2,zero,26c8 <_fflush_r+0x38>
    26ac:	2880030f 	ldh	r2,12(r5)
    26b0:	10000a1e 	bne	r2,zero,26dc <_fflush_r+0x4c>
    26b4:	0005883a 	mov	r2,zero
    26b8:	dfc00217 	ldw	ra,8(sp)
    26bc:	dc000117 	ldw	r16,4(sp)
    26c0:	dec00304 	addi	sp,sp,12
    26c4:	f800283a 	ret
    26c8:	d9400015 	stw	r5,0(sp)
    26cc:	00007140 	call	714 <__sinit>
    26d0:	d9400017 	ldw	r5,0(sp)
    26d4:	2880030f 	ldh	r2,12(r5)
    26d8:	103ff626 	beq	r2,zero,26b4 <_fflush_r+0x24>
    26dc:	8009883a 	mov	r4,r16
    26e0:	dfc00217 	ldw	ra,8(sp)
    26e4:	dc000117 	ldw	r16,4(sp)
    26e8:	dec00304 	addi	sp,sp,12
    26ec:	00024681 	jmpi	2468 <__sflush_r>

000026f0 <fflush>:
    26f0:	200b883a 	mov	r5,r4
    26f4:	20000326 	beq	r4,zero,2704 <fflush+0x14>
    26f8:	00800034 	movhi	r2,0
    26fc:	111c1817 	ldw	r4,28768(r2)
    2700:	00026901 	jmpi	2690 <_fflush_r>
    2704:	00800034 	movhi	r2,0
    2708:	111c1717 	ldw	r4,28764(r2)
    270c:	01400034 	movhi	r5,0
    2710:	2949a404 	addi	r5,r5,9872
    2714:	0000cd41 	jmpi	cd4 <_fwalk_reent>

00002718 <_malloc_trim_r>:
    2718:	defffb04 	addi	sp,sp,-20
    271c:	dcc00315 	stw	r19,12(sp)
    2720:	04c00034 	movhi	r19,0
    2724:	dc800215 	stw	r18,8(sp)
    2728:	dc400115 	stw	r17,4(sp)
    272c:	dc000015 	stw	r16,0(sp)
    2730:	dfc00415 	stw	ra,16(sp)
    2734:	2821883a 	mov	r16,r5
    2738:	9cd69304 	addi	r19,r19,23116
    273c:	2025883a 	mov	r18,r4
    2740:	00036100 	call	3610 <__malloc_lock>
    2744:	98800217 	ldw	r2,8(r19)
    2748:	14400117 	ldw	r17,4(r2)
    274c:	00bfff04 	movi	r2,-4
    2750:	88a2703a 	and	r17,r17,r2
    2754:	8c21c83a 	sub	r16,r17,r16
    2758:	8403fbc4 	addi	r16,r16,4079
    275c:	8020d33a 	srli	r16,r16,12
    2760:	843fffc4 	addi	r16,r16,-1
    2764:	8020933a 	slli	r16,r16,12
    2768:	80840008 	cmpgei	r2,r16,4096
    276c:	10000626 	beq	r2,zero,2788 <_malloc_trim_r+0x70>
    2770:	000b883a 	mov	r5,zero
    2774:	9009883a 	mov	r4,r18
    2778:	0001fac0 	call	1fac <_sbrk_r>
    277c:	98c00217 	ldw	r3,8(r19)
    2780:	1c47883a 	add	r3,r3,r17
    2784:	10c00a26 	beq	r2,r3,27b0 <_malloc_trim_r+0x98>
    2788:	9009883a 	mov	r4,r18
    278c:	00036340 	call	3634 <__malloc_unlock>
    2790:	0005883a 	mov	r2,zero
    2794:	dfc00417 	ldw	ra,16(sp)
    2798:	dcc00317 	ldw	r19,12(sp)
    279c:	dc800217 	ldw	r18,8(sp)
    27a0:	dc400117 	ldw	r17,4(sp)
    27a4:	dc000017 	ldw	r16,0(sp)
    27a8:	dec00504 	addi	sp,sp,20
    27ac:	f800283a 	ret
    27b0:	040bc83a 	sub	r5,zero,r16
    27b4:	9009883a 	mov	r4,r18
    27b8:	0001fac0 	call	1fac <_sbrk_r>
    27bc:	10bfffd8 	cmpnei	r2,r2,-1
    27c0:	10000d26 	beq	r2,zero,27f8 <_malloc_trim_r+0xe0>
    27c4:	00800074 	movhi	r2,1
    27c8:	10a2cb17 	ldw	r2,-29908(r2)
    27cc:	98c00217 	ldw	r3,8(r19)
    27d0:	8c23c83a 	sub	r17,r17,r16
    27d4:	8c400054 	ori	r17,r17,1
    27d8:	1421c83a 	sub	r16,r2,r16
    27dc:	1c400115 	stw	r17,4(r3)
    27e0:	00800074 	movhi	r2,1
    27e4:	9009883a 	mov	r4,r18
    27e8:	1422cb15 	stw	r16,-29908(r2)
    27ec:	00036340 	call	3634 <__malloc_unlock>
    27f0:	00800044 	movi	r2,1
    27f4:	003fe706 	br	2794 <_malloc_trim_r+0x7c>
    27f8:	000b883a 	mov	r5,zero
    27fc:	9009883a 	mov	r4,r18
    2800:	0001fac0 	call	1fac <_sbrk_r>
    2804:	99000217 	ldw	r4,8(r19)
    2808:	1107c83a 	sub	r3,r2,r4
    280c:	19400410 	cmplti	r5,r3,16
    2810:	283fdd1e 	bne	r5,zero,2788 <_malloc_trim_r+0x70>
    2814:	01400034 	movhi	r5,0
    2818:	295c1917 	ldw	r5,28772(r5)
    281c:	18c00054 	ori	r3,r3,1
    2820:	20c00115 	stw	r3,4(r4)
    2824:	1145c83a 	sub	r2,r2,r5
    2828:	01400074 	movhi	r5,1
    282c:	28a2cb15 	stw	r2,-29908(r5)
    2830:	003fd506 	br	2788 <_malloc_trim_r+0x70>

00002834 <_free_r>:
    2834:	28004f26 	beq	r5,zero,2974 <_free_r+0x140>
    2838:	defffd04 	addi	sp,sp,-12
    283c:	dc400115 	stw	r17,4(sp)
    2840:	dc000015 	stw	r16,0(sp)
    2844:	2023883a 	mov	r17,r4
    2848:	2821883a 	mov	r16,r5
    284c:	dfc00215 	stw	ra,8(sp)
    2850:	00036100 	call	3610 <__malloc_lock>
    2854:	81ffff17 	ldw	r7,-4(r16)
    2858:	00bfff84 	movi	r2,-2
    285c:	80fffe04 	addi	r3,r16,-8
    2860:	3884703a 	and	r2,r7,r2
    2864:	01800034 	movhi	r6,0
    2868:	1889883a 	add	r4,r3,r2
    286c:	31969304 	addi	r6,r6,23116
    2870:	21400117 	ldw	r5,4(r4)
    2874:	32000217 	ldw	r8,8(r6)
    2878:	027fff04 	movi	r9,-4
    287c:	2a4a703a 	and	r5,r5,r9
    2880:	41006426 	beq	r8,r4,2a14 <_free_r+0x1e0>
    2884:	21400115 	stw	r5,4(r4)
    2888:	39c0004c 	andi	r7,r7,1
    288c:	2151883a 	add	r8,r4,r5
    2890:	3800281e 	bne	r7,zero,2934 <_free_r+0x100>
    2894:	82bffe17 	ldw	r10,-8(r16)
    2898:	42000117 	ldw	r8,4(r8)
    289c:	01c00034 	movhi	r7,0
    28a0:	1a87c83a 	sub	r3,r3,r10
    28a4:	1a400217 	ldw	r9,8(r3)
    28a8:	39d69504 	addi	r7,r7,23124
    28ac:	1285883a 	add	r2,r2,r10
    28b0:	4200004c 	andi	r8,r8,1
    28b4:	49c04c26 	beq	r9,r7,29e8 <_free_r+0x1b4>
    28b8:	1a800317 	ldw	r10,12(r3)
    28bc:	4a800315 	stw	r10,12(r9)
    28c0:	52400215 	stw	r9,8(r10)
    28c4:	40007126 	beq	r8,zero,2a8c <_free_r+0x258>
    28c8:	11400054 	ori	r5,r2,1
    28cc:	19400115 	stw	r5,4(r3)
    28d0:	20800015 	stw	r2,0(r4)
    28d4:	11008028 	cmpgeui	r4,r2,512
    28d8:	20002c1e 	bne	r4,zero,298c <_free_r+0x158>
    28dc:	1008d0fa 	srli	r4,r2,3
    28e0:	31c00117 	ldw	r7,4(r6)
    28e4:	20800044 	addi	r2,r4,1
    28e8:	200bd0ba 	srai	r5,r4,2
    28ec:	100490fa 	slli	r2,r2,3
    28f0:	01000044 	movi	r4,1
    28f4:	2148983a 	sll	r4,r4,r5
    28f8:	3085883a 	add	r2,r6,r2
    28fc:	11400017 	ldw	r5,0(r2)
    2900:	21c8b03a 	or	r4,r4,r7
    2904:	11fffe04 	addi	r7,r2,-8
    2908:	19c00315 	stw	r7,12(r3)
    290c:	19400215 	stw	r5,8(r3)
    2910:	31000115 	stw	r4,4(r6)
    2914:	10c00015 	stw	r3,0(r2)
    2918:	28c00315 	stw	r3,12(r5)
    291c:	8809883a 	mov	r4,r17
    2920:	dfc00217 	ldw	ra,8(sp)
    2924:	dc400117 	ldw	r17,4(sp)
    2928:	dc000017 	ldw	r16,0(sp)
    292c:	dec00304 	addi	sp,sp,12
    2930:	00036341 	jmpi	3634 <__malloc_unlock>
    2934:	41c00117 	ldw	r7,4(r8)
    2938:	39c0004c 	andi	r7,r7,1
    293c:	38000e1e 	bne	r7,zero,2978 <_free_r+0x144>
    2940:	01c00034 	movhi	r7,0
    2944:	1145883a 	add	r2,r2,r5
    2948:	39d69504 	addi	r7,r7,23124
    294c:	21400217 	ldw	r5,8(r4)
    2950:	12400054 	ori	r9,r2,1
    2954:	1891883a 	add	r8,r3,r2
    2958:	29c05226 	beq	r5,r7,2aa4 <_free_r+0x270>
    295c:	21000317 	ldw	r4,12(r4)
    2960:	29000315 	stw	r4,12(r5)
    2964:	21400215 	stw	r5,8(r4)
    2968:	1a400115 	stw	r9,4(r3)
    296c:	40800015 	stw	r2,0(r8)
    2970:	003fd806 	br	28d4 <_free_r+0xa0>
    2974:	f800283a 	ret
    2978:	11400054 	ori	r5,r2,1
    297c:	817fff15 	stw	r5,-4(r16)
    2980:	20800015 	stw	r2,0(r4)
    2984:	11008028 	cmpgeui	r4,r2,512
    2988:	203fd426 	beq	r4,zero,28dc <_free_r+0xa8>
    298c:	1008d27a 	srli	r4,r2,9
    2990:	21400168 	cmpgeui	r5,r4,5
    2994:	2800341e 	bne	r5,zero,2a68 <_free_r+0x234>
    2998:	1008d1ba 	srli	r4,r2,6
    299c:	21c00e44 	addi	r7,r4,57
    29a0:	380e90fa 	slli	r7,r7,3
    29a4:	21400e04 	addi	r5,r4,56
    29a8:	31cf883a 	add	r7,r6,r7
    29ac:	39000017 	ldw	r4,0(r7)
    29b0:	39fffe04 	addi	r7,r7,-8
    29b4:	39004226 	beq	r7,r4,2ac0 <_free_r+0x28c>
    29b8:	01bfff04 	movi	r6,-4
    29bc:	21400117 	ldw	r5,4(r4)
    29c0:	298a703a 	and	r5,r5,r6
    29c4:	1140022e 	bgeu	r2,r5,29d0 <_free_r+0x19c>
    29c8:	21000217 	ldw	r4,8(r4)
    29cc:	393ffb1e 	bne	r7,r4,29bc <_free_r+0x188>
    29d0:	21c00317 	ldw	r7,12(r4)
    29d4:	19c00315 	stw	r7,12(r3)
    29d8:	19000215 	stw	r4,8(r3)
    29dc:	38c00215 	stw	r3,8(r7)
    29e0:	20c00315 	stw	r3,12(r4)
    29e4:	003fcd06 	br	291c <_free_r+0xe8>
    29e8:	40004d1e 	bne	r8,zero,2b20 <_free_r+0x2ec>
    29ec:	21800317 	ldw	r6,12(r4)
    29f0:	21000217 	ldw	r4,8(r4)
    29f4:	2885883a 	add	r2,r5,r2
    29f8:	11400054 	ori	r5,r2,1
    29fc:	21800315 	stw	r6,12(r4)
    2a00:	31000215 	stw	r4,8(r6)
    2a04:	19400115 	stw	r5,4(r3)
    2a08:	1887883a 	add	r3,r3,r2
    2a0c:	18800015 	stw	r2,0(r3)
    2a10:	003fc206 	br	291c <_free_r+0xe8>
    2a14:	39c0004c 	andi	r7,r7,1
    2a18:	1145883a 	add	r2,r2,r5
    2a1c:	3800071e 	bne	r7,zero,2a3c <_free_r+0x208>
    2a20:	81fffe17 	ldw	r7,-8(r16)
    2a24:	19c7c83a 	sub	r3,r3,r7
    2a28:	19000317 	ldw	r4,12(r3)
    2a2c:	19400217 	ldw	r5,8(r3)
    2a30:	11c5883a 	add	r2,r2,r7
    2a34:	29000315 	stw	r4,12(r5)
    2a38:	21400215 	stw	r5,8(r4)
    2a3c:	01000034 	movhi	r4,0
    2a40:	11400054 	ori	r5,r2,1
    2a44:	211c1a17 	ldw	r4,28776(r4)
    2a48:	19400115 	stw	r5,4(r3)
    2a4c:	30c00215 	stw	r3,8(r6)
    2a50:	113fb236 	bltu	r2,r4,291c <_free_r+0xe8>
    2a54:	00800074 	movhi	r2,1
    2a58:	1162c217 	ldw	r5,-29944(r2)
    2a5c:	8809883a 	mov	r4,r17
    2a60:	00027180 	call	2718 <_malloc_trim_r>
    2a64:	003fad06 	br	291c <_free_r+0xe8>
    2a68:	21400568 	cmpgeui	r5,r4,21
    2a6c:	28000926 	beq	r5,zero,2a94 <_free_r+0x260>
    2a70:	21401568 	cmpgeui	r5,r4,85
    2a74:	2800191e 	bne	r5,zero,2adc <_free_r+0x2a8>
    2a78:	1008d33a 	srli	r4,r2,12
    2a7c:	21c01bc4 	addi	r7,r4,111
    2a80:	21401b84 	addi	r5,r4,110
    2a84:	380e90fa 	slli	r7,r7,3
    2a88:	003fc706 	br	29a8 <_free_r+0x174>
    2a8c:	1145883a 	add	r2,r2,r5
    2a90:	003fae06 	br	294c <_free_r+0x118>
    2a94:	21c01704 	addi	r7,r4,92
    2a98:	214016c4 	addi	r5,r4,91
    2a9c:	380e90fa 	slli	r7,r7,3
    2aa0:	003fc106 	br	29a8 <_free_r+0x174>
    2aa4:	30c00515 	stw	r3,20(r6)
    2aa8:	30c00415 	stw	r3,16(r6)
    2aac:	19c00315 	stw	r7,12(r3)
    2ab0:	19c00215 	stw	r7,8(r3)
    2ab4:	1a400115 	stw	r9,4(r3)
    2ab8:	40800015 	stw	r2,0(r8)
    2abc:	003f9706 	br	291c <_free_r+0xe8>
    2ac0:	280bd0ba 	srai	r5,r5,2
    2ac4:	00800044 	movi	r2,1
    2ac8:	32000117 	ldw	r8,4(r6)
    2acc:	114a983a 	sll	r5,r2,r5
    2ad0:	2a0ab03a 	or	r5,r5,r8
    2ad4:	31400115 	stw	r5,4(r6)
    2ad8:	003fbe06 	br	29d4 <_free_r+0x1a0>
    2adc:	21405568 	cmpgeui	r5,r4,341
    2ae0:	2800051e 	bne	r5,zero,2af8 <_free_r+0x2c4>
    2ae4:	1008d3fa 	srli	r4,r2,15
    2ae8:	21c01e04 	addi	r7,r4,120
    2aec:	21401dc4 	addi	r5,r4,119
    2af0:	380e90fa 	slli	r7,r7,3
    2af4:	003fac06 	br	29a8 <_free_r+0x174>
    2af8:	21015568 	cmpgeui	r4,r4,1365
    2afc:	2000051e 	bne	r4,zero,2b14 <_free_r+0x2e0>
    2b00:	1008d4ba 	srli	r4,r2,18
    2b04:	21c01f44 	addi	r7,r4,125
    2b08:	21401f04 	addi	r5,r4,124
    2b0c:	380e90fa 	slli	r7,r7,3
    2b10:	003fa506 	br	29a8 <_free_r+0x174>
    2b14:	01c0fe04 	movi	r7,1016
    2b18:	01401f84 	movi	r5,126
    2b1c:	003fa206 	br	29a8 <_free_r+0x174>
    2b20:	11400054 	ori	r5,r2,1
    2b24:	19400115 	stw	r5,4(r3)
    2b28:	20800015 	stw	r2,0(r4)
    2b2c:	003f7b06 	br	291c <_free_r+0xe8>

00002b30 <_lseek_r>:
    2b30:	defffe04 	addi	sp,sp,-8
    2b34:	2805883a 	mov	r2,r5
    2b38:	dc000015 	stw	r16,0(sp)
    2b3c:	300b883a 	mov	r5,r6
    2b40:	2021883a 	mov	r16,r4
    2b44:	380d883a 	mov	r6,r7
    2b48:	1009883a 	mov	r4,r2
    2b4c:	00800074 	movhi	r2,1
    2b50:	dfc00115 	stw	ra,4(sp)
    2b54:	1022c315 	stw	zero,-29940(r2)
    2b58:	00034b40 	call	34b4 <lseek>
    2b5c:	10ffffd8 	cmpnei	r3,r2,-1
    2b60:	18000426 	beq	r3,zero,2b74 <_lseek_r+0x44>
    2b64:	dfc00117 	ldw	ra,4(sp)
    2b68:	dc000017 	ldw	r16,0(sp)
    2b6c:	dec00204 	addi	sp,sp,8
    2b70:	f800283a 	ret
    2b74:	00c00074 	movhi	r3,1
    2b78:	18e2c317 	ldw	r3,-29940(r3)
    2b7c:	183ff926 	beq	r3,zero,2b64 <_lseek_r+0x34>
    2b80:	80c00015 	stw	r3,0(r16)
    2b84:	dfc00117 	ldw	ra,4(sp)
    2b88:	dc000017 	ldw	r16,0(sp)
    2b8c:	dec00204 	addi	sp,sp,8
    2b90:	f800283a 	ret

00002b94 <__swhatbuf_r>:
    2b94:	deffea04 	addi	sp,sp,-88
    2b98:	dc001215 	stw	r16,72(sp)
    2b9c:	2821883a 	mov	r16,r5
    2ba0:	2940038f 	ldh	r5,14(r5)
    2ba4:	dc801415 	stw	r18,80(sp)
    2ba8:	dc401315 	stw	r17,76(sp)
    2bac:	dfc01515 	stw	ra,84(sp)
    2bb0:	3023883a 	mov	r17,r6
    2bb4:	3825883a 	mov	r18,r7
    2bb8:	28001016 	blt	r5,zero,2bfc <__swhatbuf_r+0x68>
    2bbc:	d80d883a 	mov	r6,sp
    2bc0:	0002dcc0 	call	2dcc <_fstat_r>
    2bc4:	10000d16 	blt	r2,zero,2bfc <__swhatbuf_r+0x68>
    2bc8:	d8c00117 	ldw	r3,4(sp)
    2bcc:	00820004 	movi	r2,2048
    2bd0:	18fc000c 	andi	r3,r3,61440
    2bd4:	18c80020 	cmpeqi	r3,r3,8192
    2bd8:	90c00015 	stw	r3,0(r18)
    2bdc:	00c10004 	movi	r3,1024
    2be0:	88c00015 	stw	r3,0(r17)
    2be4:	dfc01517 	ldw	ra,84(sp)
    2be8:	dc801417 	ldw	r18,80(sp)
    2bec:	dc401317 	ldw	r17,76(sp)
    2bf0:	dc001217 	ldw	r16,72(sp)
    2bf4:	dec01604 	addi	sp,sp,88
    2bf8:	f800283a 	ret
    2bfc:	8080030b 	ldhu	r2,12(r16)
    2c00:	90000015 	stw	zero,0(r18)
    2c04:	1080200c 	andi	r2,r2,128
    2c08:	10000426 	beq	r2,zero,2c1c <__swhatbuf_r+0x88>
    2c0c:	00801004 	movi	r2,64
    2c10:	88800015 	stw	r2,0(r17)
    2c14:	0005883a 	mov	r2,zero
    2c18:	003ff206 	br	2be4 <__swhatbuf_r+0x50>
    2c1c:	00810004 	movi	r2,1024
    2c20:	88800015 	stw	r2,0(r17)
    2c24:	0005883a 	mov	r2,zero
    2c28:	003fee06 	br	2be4 <__swhatbuf_r+0x50>

00002c2c <__smakebuf_r>:
    2c2c:	28c0030b 	ldhu	r3,12(r5)
    2c30:	defffa04 	addi	sp,sp,-24
    2c34:	dc000215 	stw	r16,8(sp)
    2c38:	dfc00515 	stw	ra,20(sp)
    2c3c:	dc800415 	stw	r18,16(sp)
    2c40:	dc400315 	stw	r17,12(sp)
    2c44:	18c0008c 	andi	r3,r3,2
    2c48:	2821883a 	mov	r16,r5
    2c4c:	18000b26 	beq	r3,zero,2c7c <__smakebuf_r+0x50>
    2c50:	28c010c4 	addi	r3,r5,67
    2c54:	28c00015 	stw	r3,0(r5)
    2c58:	28c00415 	stw	r3,16(r5)
    2c5c:	00c00044 	movi	r3,1
    2c60:	28c00515 	stw	r3,20(r5)
    2c64:	dfc00517 	ldw	ra,20(sp)
    2c68:	dc800417 	ldw	r18,16(sp)
    2c6c:	dc400317 	ldw	r17,12(sp)
    2c70:	dc000217 	ldw	r16,8(sp)
    2c74:	dec00604 	addi	sp,sp,24
    2c78:	f800283a 	ret
    2c7c:	d9c00104 	addi	r7,sp,4
    2c80:	d80d883a 	mov	r6,sp
    2c84:	2023883a 	mov	r17,r4
    2c88:	0002b940 	call	2b94 <__swhatbuf_r>
    2c8c:	1025883a 	mov	r18,r2
    2c90:	d8800117 	ldw	r2,4(sp)
    2c94:	1000131e 	bne	r2,zero,2ce4 <__smakebuf_r+0xb8>
    2c98:	d9400017 	ldw	r5,0(sp)
    2c9c:	8809883a 	mov	r4,r17
    2ca0:	0000d880 	call	d88 <_malloc_r>
    2ca4:	10001c26 	beq	r2,zero,2d18 <__smakebuf_r+0xec>
    2ca8:	01000034 	movhi	r4,0
    2cac:	21010404 	addi	r4,r4,1040
    2cb0:	80c0030b 	ldhu	r3,12(r16)
    2cb4:	89000f15 	stw	r4,60(r17)
    2cb8:	80800015 	stw	r2,0(r16)
    2cbc:	80800415 	stw	r2,16(r16)
    2cc0:	d8800017 	ldw	r2,0(sp)
    2cc4:	d9400117 	ldw	r5,4(sp)
    2cc8:	18c02014 	ori	r3,r3,128
    2ccc:	80c0030d 	sth	r3,12(r16)
    2cd0:	80800515 	stw	r2,20(r16)
    2cd4:	28001c1e 	bne	r5,zero,2d48 <__smakebuf_r+0x11c>
    2cd8:	90c6b03a 	or	r3,r18,r3
    2cdc:	80c0030d 	sth	r3,12(r16)
    2ce0:	003fe006 	br	2c64 <__smakebuf_r+0x38>
    2ce4:	8140038f 	ldh	r5,14(r16)
    2ce8:	8809883a 	mov	r4,r17
    2cec:	0002e2c0 	call	2e2c <_isatty_r>
    2cf0:	103fe926 	beq	r2,zero,2c98 <__smakebuf_r+0x6c>
    2cf4:	8080030b 	ldhu	r2,12(r16)
    2cf8:	80c010c4 	addi	r3,r16,67
    2cfc:	80c00015 	stw	r3,0(r16)
    2d00:	10800054 	ori	r2,r2,1
    2d04:	8080030d 	sth	r2,12(r16)
    2d08:	00800044 	movi	r2,1
    2d0c:	80c00415 	stw	r3,16(r16)
    2d10:	80800515 	stw	r2,20(r16)
    2d14:	003fe006 	br	2c98 <__smakebuf_r+0x6c>
    2d18:	8080030b 	ldhu	r2,12(r16)
    2d1c:	10c0800c 	andi	r3,r2,512
    2d20:	183fd01e 	bne	r3,zero,2c64 <__smakebuf_r+0x38>
    2d24:	10bfff0c 	andi	r2,r2,65532
    2d28:	10800094 	ori	r2,r2,2
    2d2c:	80c010c4 	addi	r3,r16,67
    2d30:	8080030d 	sth	r2,12(r16)
    2d34:	00800044 	movi	r2,1
    2d38:	80c00015 	stw	r3,0(r16)
    2d3c:	80c00415 	stw	r3,16(r16)
    2d40:	80800515 	stw	r2,20(r16)
    2d44:	003fc706 	br	2c64 <__smakebuf_r+0x38>
    2d48:	8140038f 	ldh	r5,14(r16)
    2d4c:	8809883a 	mov	r4,r17
    2d50:	0002e2c0 	call	2e2c <_isatty_r>
    2d54:	80c0030b 	ldhu	r3,12(r16)
    2d58:	103fdf26 	beq	r2,zero,2cd8 <__smakebuf_r+0xac>
    2d5c:	18ffff0c 	andi	r3,r3,65532
    2d60:	18c00054 	ori	r3,r3,1
    2d64:	003fdc06 	br	2cd8 <__smakebuf_r+0xac>

00002d68 <_read_r>:
    2d68:	defffe04 	addi	sp,sp,-8
    2d6c:	2805883a 	mov	r2,r5
    2d70:	dc000015 	stw	r16,0(sp)
    2d74:	300b883a 	mov	r5,r6
    2d78:	2021883a 	mov	r16,r4
    2d7c:	380d883a 	mov	r6,r7
    2d80:	1009883a 	mov	r4,r2
    2d84:	00800074 	movhi	r2,1
    2d88:	dfc00115 	stw	ra,4(sp)
    2d8c:	1022c315 	stw	zero,-29940(r2)
    2d90:	00036940 	call	3694 <read>
    2d94:	10ffffd8 	cmpnei	r3,r2,-1
    2d98:	18000426 	beq	r3,zero,2dac <_read_r+0x44>
    2d9c:	dfc00117 	ldw	ra,4(sp)
    2da0:	dc000017 	ldw	r16,0(sp)
    2da4:	dec00204 	addi	sp,sp,8
    2da8:	f800283a 	ret
    2dac:	00c00074 	movhi	r3,1
    2db0:	18e2c317 	ldw	r3,-29940(r3)
    2db4:	183ff926 	beq	r3,zero,2d9c <_read_r+0x34>
    2db8:	80c00015 	stw	r3,0(r16)
    2dbc:	dfc00117 	ldw	ra,4(sp)
    2dc0:	dc000017 	ldw	r16,0(sp)
    2dc4:	dec00204 	addi	sp,sp,8
    2dc8:	f800283a 	ret

00002dcc <_fstat_r>:
    2dcc:	defffe04 	addi	sp,sp,-8
    2dd0:	2805883a 	mov	r2,r5
    2dd4:	dc000015 	stw	r16,0(sp)
    2dd8:	300b883a 	mov	r5,r6
    2ddc:	2021883a 	mov	r16,r4
    2de0:	1009883a 	mov	r4,r2
    2de4:	00800074 	movhi	r2,1
    2de8:	dfc00115 	stw	ra,4(sp)
    2dec:	1022c315 	stw	zero,-29940(r2)
    2df0:	00031e40 	call	31e4 <fstat>
    2df4:	10ffffd8 	cmpnei	r3,r2,-1
    2df8:	18000426 	beq	r3,zero,2e0c <_fstat_r+0x40>
    2dfc:	dfc00117 	ldw	ra,4(sp)
    2e00:	dc000017 	ldw	r16,0(sp)
    2e04:	dec00204 	addi	sp,sp,8
    2e08:	f800283a 	ret
    2e0c:	00c00074 	movhi	r3,1
    2e10:	18e2c317 	ldw	r3,-29940(r3)
    2e14:	183ff926 	beq	r3,zero,2dfc <_fstat_r+0x30>
    2e18:	80c00015 	stw	r3,0(r16)
    2e1c:	dfc00117 	ldw	ra,4(sp)
    2e20:	dc000017 	ldw	r16,0(sp)
    2e24:	dec00204 	addi	sp,sp,8
    2e28:	f800283a 	ret

00002e2c <_isatty_r>:
    2e2c:	defffe04 	addi	sp,sp,-8
    2e30:	dc000015 	stw	r16,0(sp)
    2e34:	00800074 	movhi	r2,1
    2e38:	2021883a 	mov	r16,r4
    2e3c:	2809883a 	mov	r4,r5
    2e40:	dfc00115 	stw	ra,4(sp)
    2e44:	1022c315 	stw	zero,-29940(r2)
    2e48:	00032dc0 	call	32dc <isatty>
    2e4c:	10ffffd8 	cmpnei	r3,r2,-1
    2e50:	18000426 	beq	r3,zero,2e64 <_isatty_r+0x38>
    2e54:	dfc00117 	ldw	ra,4(sp)
    2e58:	dc000017 	ldw	r16,0(sp)
    2e5c:	dec00204 	addi	sp,sp,8
    2e60:	f800283a 	ret
    2e64:	00c00074 	movhi	r3,1
    2e68:	18e2c317 	ldw	r3,-29940(r3)
    2e6c:	183ff926 	beq	r3,zero,2e54 <_isatty_r+0x28>
    2e70:	80c00015 	stw	r3,0(r16)
    2e74:	dfc00117 	ldw	ra,4(sp)
    2e78:	dc000017 	ldw	r16,0(sp)
    2e7c:	dec00204 	addi	sp,sp,8
    2e80:	f800283a 	ret

00002e84 <__divsi3>:
    2e84:	20001a16 	blt	r4,zero,2ef0 <__divsi3+0x6c>
    2e88:	000f883a 	mov	r7,zero
    2e8c:	2800020e 	bge	r5,zero,2e98 <__divsi3+0x14>
    2e90:	014bc83a 	sub	r5,zero,r5
    2e94:	39c0005c 	xori	r7,r7,1
    2e98:	200d883a 	mov	r6,r4
    2e9c:	00c00044 	movi	r3,1
    2ea0:	2900092e 	bgeu	r5,r4,2ec8 <__divsi3+0x44>
    2ea4:	00800804 	movi	r2,32
    2ea8:	00c00044 	movi	r3,1
    2eac:	00000106 	br	2eb4 <__divsi3+0x30>
    2eb0:	10001226 	beq	r2,zero,2efc <__divsi3+0x78>
    2eb4:	294b883a 	add	r5,r5,r5
    2eb8:	10bfffc4 	addi	r2,r2,-1
    2ebc:	18c7883a 	add	r3,r3,r3
    2ec0:	293ffb36 	bltu	r5,r4,2eb0 <__divsi3+0x2c>
    2ec4:	18000d26 	beq	r3,zero,2efc <__divsi3+0x78>
    2ec8:	0005883a 	mov	r2,zero
    2ecc:	31400236 	bltu	r6,r5,2ed8 <__divsi3+0x54>
    2ed0:	314dc83a 	sub	r6,r6,r5
    2ed4:	10c4b03a 	or	r2,r2,r3
    2ed8:	1806d07a 	srli	r3,r3,1
    2edc:	280ad07a 	srli	r5,r5,1
    2ee0:	183ffa1e 	bne	r3,zero,2ecc <__divsi3+0x48>
    2ee4:	38000126 	beq	r7,zero,2eec <__divsi3+0x68>
    2ee8:	0085c83a 	sub	r2,zero,r2
    2eec:	f800283a 	ret
    2ef0:	0109c83a 	sub	r4,zero,r4
    2ef4:	01c00044 	movi	r7,1
    2ef8:	003fe406 	br	2e8c <__divsi3+0x8>
    2efc:	0005883a 	mov	r2,zero
    2f00:	003ff806 	br	2ee4 <__divsi3+0x60>

00002f04 <__modsi3>:
    2f04:	20001a16 	blt	r4,zero,2f70 <__modsi3+0x6c>
    2f08:	000f883a 	mov	r7,zero
    2f0c:	2005883a 	mov	r2,r4
    2f10:	2800010e 	bge	r5,zero,2f18 <__modsi3+0x14>
    2f14:	014bc83a 	sub	r5,zero,r5
    2f18:	00c00044 	movi	r3,1
    2f1c:	2900092e 	bgeu	r5,r4,2f44 <__modsi3+0x40>
    2f20:	01800804 	movi	r6,32
    2f24:	00c00044 	movi	r3,1
    2f28:	00000106 	br	2f30 <__modsi3+0x2c>
    2f2c:	30000d26 	beq	r6,zero,2f64 <__modsi3+0x60>
    2f30:	294b883a 	add	r5,r5,r5
    2f34:	31bfffc4 	addi	r6,r6,-1
    2f38:	18c7883a 	add	r3,r3,r3
    2f3c:	293ffb36 	bltu	r5,r4,2f2c <__modsi3+0x28>
    2f40:	18000826 	beq	r3,zero,2f64 <__modsi3+0x60>
    2f44:	1806d07a 	srli	r3,r3,1
    2f48:	11400136 	bltu	r2,r5,2f50 <__modsi3+0x4c>
    2f4c:	1145c83a 	sub	r2,r2,r5
    2f50:	280ad07a 	srli	r5,r5,1
    2f54:	183ffb1e 	bne	r3,zero,2f44 <__modsi3+0x40>
    2f58:	38000126 	beq	r7,zero,2f60 <__modsi3+0x5c>
    2f5c:	0085c83a 	sub	r2,zero,r2
    2f60:	f800283a 	ret
    2f64:	2005883a 	mov	r2,r4
    2f68:	383ffd26 	beq	r7,zero,2f60 <__modsi3+0x5c>
    2f6c:	003ffb06 	br	2f5c <__modsi3+0x58>
    2f70:	0109c83a 	sub	r4,zero,r4
    2f74:	01c00044 	movi	r7,1
    2f78:	003fe406 	br	2f0c <__modsi3+0x8>

00002f7c <__udivsi3>:
    2f7c:	200d883a 	mov	r6,r4
    2f80:	2900152e 	bgeu	r5,r4,2fd8 <__udivsi3+0x5c>
    2f84:	28001416 	blt	r5,zero,2fd8 <__udivsi3+0x5c>
    2f88:	00800804 	movi	r2,32
    2f8c:	00c00044 	movi	r3,1
    2f90:	00000206 	br	2f9c <__udivsi3+0x20>
    2f94:	10000e26 	beq	r2,zero,2fd0 <__udivsi3+0x54>
    2f98:	28000516 	blt	r5,zero,2fb0 <__udivsi3+0x34>
    2f9c:	294b883a 	add	r5,r5,r5
    2fa0:	10bfffc4 	addi	r2,r2,-1
    2fa4:	18c7883a 	add	r3,r3,r3
    2fa8:	293ffa36 	bltu	r5,r4,2f94 <__udivsi3+0x18>
    2fac:	18000826 	beq	r3,zero,2fd0 <__udivsi3+0x54>
    2fb0:	0005883a 	mov	r2,zero
    2fb4:	31400236 	bltu	r6,r5,2fc0 <__udivsi3+0x44>
    2fb8:	314dc83a 	sub	r6,r6,r5
    2fbc:	10c4b03a 	or	r2,r2,r3
    2fc0:	1806d07a 	srli	r3,r3,1
    2fc4:	280ad07a 	srli	r5,r5,1
    2fc8:	183ffa1e 	bne	r3,zero,2fb4 <__udivsi3+0x38>
    2fcc:	f800283a 	ret
    2fd0:	0005883a 	mov	r2,zero
    2fd4:	f800283a 	ret
    2fd8:	00c00044 	movi	r3,1
    2fdc:	003ff406 	br	2fb0 <__udivsi3+0x34>

00002fe0 <__umodsi3>:
    2fe0:	2005883a 	mov	r2,r4
    2fe4:	2900132e 	bgeu	r5,r4,3034 <__umodsi3+0x54>
    2fe8:	28001216 	blt	r5,zero,3034 <__umodsi3+0x54>
    2fec:	01800804 	movi	r6,32
    2ff0:	00c00044 	movi	r3,1
    2ff4:	00000206 	br	3000 <__umodsi3+0x20>
    2ff8:	30000c26 	beq	r6,zero,302c <__umodsi3+0x4c>
    2ffc:	28000516 	blt	r5,zero,3014 <__umodsi3+0x34>
    3000:	294b883a 	add	r5,r5,r5
    3004:	31bfffc4 	addi	r6,r6,-1
    3008:	18c7883a 	add	r3,r3,r3
    300c:	293ffa36 	bltu	r5,r4,2ff8 <__umodsi3+0x18>
    3010:	18000626 	beq	r3,zero,302c <__umodsi3+0x4c>
    3014:	1806d07a 	srli	r3,r3,1
    3018:	11400136 	bltu	r2,r5,3020 <__umodsi3+0x40>
    301c:	1145c83a 	sub	r2,r2,r5
    3020:	280ad07a 	srli	r5,r5,1
    3024:	183ffb1e 	bne	r3,zero,3014 <__umodsi3+0x34>
    3028:	f800283a 	ret
    302c:	2005883a 	mov	r2,r4
    3030:	f800283a 	ret
    3034:	00c00044 	movi	r3,1
    3038:	003ff606 	br	3014 <__umodsi3+0x34>

0000303c <__mulsi3>:
    303c:	0005883a 	mov	r2,zero
    3040:	20000726 	beq	r4,zero,3060 <__mulsi3+0x24>
    3044:	20c0004c 	andi	r3,r4,1
    3048:	2008d07a 	srli	r4,r4,1
    304c:	18000126 	beq	r3,zero,3054 <__mulsi3+0x18>
    3050:	1145883a 	add	r2,r2,r5
    3054:	294b883a 	add	r5,r5,r5
    3058:	203ffa1e 	bne	r4,zero,3044 <__mulsi3+0x8>
    305c:	f800283a 	ret
    3060:	f800283a 	ret

00003064 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3064:	defffe04 	addi	sp,sp,-8
    3068:	dfc00115 	stw	ra,4(sp)
    306c:	df000015 	stw	fp,0(sp)
    3070:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3074:	d0a00917 	ldw	r2,-32732(gp)
    3078:	10000326 	beq	r2,zero,3088 <alt_get_errno+0x24>
    307c:	d0a00917 	ldw	r2,-32732(gp)
    3080:	103ee83a 	callr	r2
    3084:	00000106 	br	308c <alt_get_errno+0x28>
    3088:	d0a6ac04 	addi	r2,gp,-25936
}
    308c:	e037883a 	mov	sp,fp
    3090:	dfc00117 	ldw	ra,4(sp)
    3094:	df000017 	ldw	fp,0(sp)
    3098:	dec00204 	addi	sp,sp,8
    309c:	f800283a 	ret

000030a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    30a0:	defffb04 	addi	sp,sp,-20
    30a4:	dfc00415 	stw	ra,16(sp)
    30a8:	df000315 	stw	fp,12(sp)
    30ac:	df000304 	addi	fp,sp,12
    30b0:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    30b4:	e0bffd17 	ldw	r2,-12(fp)
    30b8:	10000916 	blt	r2,zero,30e0 <close+0x40>
    30bc:	e0fffd17 	ldw	r3,-12(fp)
    30c0:	1805883a 	mov	r2,r3
    30c4:	1085883a 	add	r2,r2,r2
    30c8:	10c5883a 	add	r2,r2,r3
    30cc:	100490ba 	slli	r2,r2,2
    30d0:	00c00034 	movhi	r3,0
    30d4:	18d79f04 	addi	r3,r3,24188
    30d8:	10c5883a 	add	r2,r2,r3
    30dc:	00000106 	br	30e4 <close+0x44>
    30e0:	0005883a 	mov	r2,zero
    30e4:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    30e8:	e0bfff17 	ldw	r2,-4(fp)
    30ec:	10001926 	beq	r2,zero,3154 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    30f0:	e0bfff17 	ldw	r2,-4(fp)
    30f4:	10800017 	ldw	r2,0(r2)
    30f8:	10800417 	ldw	r2,16(r2)
    30fc:	10000626 	beq	r2,zero,3118 <close+0x78>
    3100:	e0bfff17 	ldw	r2,-4(fp)
    3104:	10800017 	ldw	r2,0(r2)
    3108:	10800417 	ldw	r2,16(r2)
    310c:	e13fff17 	ldw	r4,-4(fp)
    3110:	103ee83a 	callr	r2
    3114:	00000106 	br	311c <close+0x7c>
    3118:	0005883a 	mov	r2,zero
    311c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    3120:	e13ffd17 	ldw	r4,-12(fp)
    3124:	000379c0 	call	379c <alt_release_fd>
    if (rval < 0)
    3128:	e0bffe17 	ldw	r2,-8(fp)
    312c:	1000070e 	bge	r2,zero,314c <close+0xac>
    {
      ALT_ERRNO = -rval;
    3130:	00030640 	call	3064 <alt_get_errno>
    3134:	1007883a 	mov	r3,r2
    3138:	e0bffe17 	ldw	r2,-8(fp)
    313c:	0085c83a 	sub	r2,zero,r2
    3140:	18800015 	stw	r2,0(r3)
      return -1;
    3144:	00bfffc4 	movi	r2,-1
    3148:	00000706 	br	3168 <close+0xc8>
    }
    return 0;
    314c:	0005883a 	mov	r2,zero
    3150:	00000506 	br	3168 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3154:	00030640 	call	3064 <alt_get_errno>
    3158:	1007883a 	mov	r3,r2
    315c:	00801444 	movi	r2,81
    3160:	18800015 	stw	r2,0(r3)
    return -1;
    3164:	00bfffc4 	movi	r2,-1
  }
}
    3168:	e037883a 	mov	sp,fp
    316c:	dfc00117 	ldw	ra,4(sp)
    3170:	df000017 	ldw	fp,0(sp)
    3174:	dec00204 	addi	sp,sp,8
    3178:	f800283a 	ret

0000317c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    317c:	defffc04 	addi	sp,sp,-16
    3180:	df000315 	stw	fp,12(sp)
    3184:	df000304 	addi	fp,sp,12
    3188:	e13fff15 	stw	r4,-4(fp)
    318c:	e17ffe15 	stw	r5,-8(fp)
    3190:	e1bffd15 	stw	r6,-12(fp)
  return len;
    3194:	e0bffd17 	ldw	r2,-12(fp)
}
    3198:	e037883a 	mov	sp,fp
    319c:	df000017 	ldw	fp,0(sp)
    31a0:	dec00104 	addi	sp,sp,4
    31a4:	f800283a 	ret

000031a8 <alt_get_errno>:
{
    31a8:	defffe04 	addi	sp,sp,-8
    31ac:	dfc00115 	stw	ra,4(sp)
    31b0:	df000015 	stw	fp,0(sp)
    31b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    31b8:	d0a00917 	ldw	r2,-32732(gp)
    31bc:	10000326 	beq	r2,zero,31cc <alt_get_errno+0x24>
    31c0:	d0a00917 	ldw	r2,-32732(gp)
    31c4:	103ee83a 	callr	r2
    31c8:	00000106 	br	31d0 <alt_get_errno+0x28>
    31cc:	d0a6ac04 	addi	r2,gp,-25936
}
    31d0:	e037883a 	mov	sp,fp
    31d4:	dfc00117 	ldw	ra,4(sp)
    31d8:	df000017 	ldw	fp,0(sp)
    31dc:	dec00204 	addi	sp,sp,8
    31e0:	f800283a 	ret

000031e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    31e4:	defffb04 	addi	sp,sp,-20
    31e8:	dfc00415 	stw	ra,16(sp)
    31ec:	df000315 	stw	fp,12(sp)
    31f0:	df000304 	addi	fp,sp,12
    31f4:	e13ffe15 	stw	r4,-8(fp)
    31f8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    31fc:	e0bffe17 	ldw	r2,-8(fp)
    3200:	10000916 	blt	r2,zero,3228 <fstat+0x44>
    3204:	e0fffe17 	ldw	r3,-8(fp)
    3208:	1805883a 	mov	r2,r3
    320c:	1085883a 	add	r2,r2,r2
    3210:	10c5883a 	add	r2,r2,r3
    3214:	100490ba 	slli	r2,r2,2
    3218:	00c00034 	movhi	r3,0
    321c:	18d79f04 	addi	r3,r3,24188
    3220:	10c5883a 	add	r2,r2,r3
    3224:	00000106 	br	322c <fstat+0x48>
    3228:	0005883a 	mov	r2,zero
    322c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3230:	e0bfff17 	ldw	r2,-4(fp)
    3234:	10001026 	beq	r2,zero,3278 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    3238:	e0bfff17 	ldw	r2,-4(fp)
    323c:	10800017 	ldw	r2,0(r2)
    3240:	10800817 	ldw	r2,32(r2)
    3244:	10000726 	beq	r2,zero,3264 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
    3248:	e0bfff17 	ldw	r2,-4(fp)
    324c:	10800017 	ldw	r2,0(r2)
    3250:	10800817 	ldw	r2,32(r2)
    3254:	e17ffd17 	ldw	r5,-12(fp)
    3258:	e13fff17 	ldw	r4,-4(fp)
    325c:	103ee83a 	callr	r2
    3260:	00000a06 	br	328c <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3264:	e0bffd17 	ldw	r2,-12(fp)
    3268:	00c80004 	movi	r3,8192
    326c:	10c00115 	stw	r3,4(r2)
      return 0;
    3270:	0005883a 	mov	r2,zero
    3274:	00000506 	br	328c <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3278:	00031a80 	call	31a8 <alt_get_errno>
    327c:	1007883a 	mov	r3,r2
    3280:	00801444 	movi	r2,81
    3284:	18800015 	stw	r2,0(r3)
    return -1;
    3288:	00bfffc4 	movi	r2,-1
  }
}
    328c:	e037883a 	mov	sp,fp
    3290:	dfc00117 	ldw	ra,4(sp)
    3294:	df000017 	ldw	fp,0(sp)
    3298:	dec00204 	addi	sp,sp,8
    329c:	f800283a 	ret

000032a0 <alt_get_errno>:
{
    32a0:	defffe04 	addi	sp,sp,-8
    32a4:	dfc00115 	stw	ra,4(sp)
    32a8:	df000015 	stw	fp,0(sp)
    32ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    32b0:	d0a00917 	ldw	r2,-32732(gp)
    32b4:	10000326 	beq	r2,zero,32c4 <alt_get_errno+0x24>
    32b8:	d0a00917 	ldw	r2,-32732(gp)
    32bc:	103ee83a 	callr	r2
    32c0:	00000106 	br	32c8 <alt_get_errno+0x28>
    32c4:	d0a6ac04 	addi	r2,gp,-25936
}
    32c8:	e037883a 	mov	sp,fp
    32cc:	dfc00117 	ldw	ra,4(sp)
    32d0:	df000017 	ldw	fp,0(sp)
    32d4:	dec00204 	addi	sp,sp,8
    32d8:	f800283a 	ret

000032dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    32dc:	deffea04 	addi	sp,sp,-88
    32e0:	dfc01515 	stw	ra,84(sp)
    32e4:	df001415 	stw	fp,80(sp)
    32e8:	df001404 	addi	fp,sp,80
    32ec:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    32f0:	e0bfec17 	ldw	r2,-80(fp)
    32f4:	10000916 	blt	r2,zero,331c <isatty+0x40>
    32f8:	e0ffec17 	ldw	r3,-80(fp)
    32fc:	1805883a 	mov	r2,r3
    3300:	1085883a 	add	r2,r2,r2
    3304:	10c5883a 	add	r2,r2,r3
    3308:	100490ba 	slli	r2,r2,2
    330c:	00c00034 	movhi	r3,0
    3310:	18d79f04 	addi	r3,r3,24188
    3314:	10c5883a 	add	r2,r2,r3
    3318:	00000106 	br	3320 <isatty+0x44>
    331c:	0005883a 	mov	r2,zero
    3320:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3324:	e0bfff17 	ldw	r2,-4(fp)
    3328:	10000e26 	beq	r2,zero,3364 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    332c:	e0bfff17 	ldw	r2,-4(fp)
    3330:	10800017 	ldw	r2,0(r2)
    3334:	10800817 	ldw	r2,32(r2)
    3338:	1000021e 	bne	r2,zero,3344 <isatty+0x68>
    {
      return 1;
    333c:	00800044 	movi	r2,1
    3340:	00000d06 	br	3378 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    3344:	e0bfed04 	addi	r2,fp,-76
    3348:	100b883a 	mov	r5,r2
    334c:	e13fec17 	ldw	r4,-80(fp)
    3350:	00031e40 	call	31e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    3354:	e0bfee17 	ldw	r2,-72(fp)
    3358:	10880020 	cmpeqi	r2,r2,8192
    335c:	10803fcc 	andi	r2,r2,255
    3360:	00000506 	br	3378 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3364:	00032a00 	call	32a0 <alt_get_errno>
    3368:	1007883a 	mov	r3,r2
    336c:	00801444 	movi	r2,81
    3370:	18800015 	stw	r2,0(r3)
    return 0;
    3374:	0005883a 	mov	r2,zero
  }
}
    3378:	e037883a 	mov	sp,fp
    337c:	dfc00117 	ldw	ra,4(sp)
    3380:	df000017 	ldw	fp,0(sp)
    3384:	dec00204 	addi	sp,sp,8
    3388:	f800283a 	ret

0000338c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    338c:	defffc04 	addi	sp,sp,-16
    3390:	df000315 	stw	fp,12(sp)
    3394:	df000304 	addi	fp,sp,12
    3398:	e13fff15 	stw	r4,-4(fp)
    339c:	e17ffe15 	stw	r5,-8(fp)
    33a0:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    33a4:	e0fffe17 	ldw	r3,-8(fp)
    33a8:	e0bfff17 	ldw	r2,-4(fp)
    33ac:	18800c26 	beq	r3,r2,33e0 <alt_load_section+0x54>
  {
    while( to != end )
    33b0:	00000806 	br	33d4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    33b4:	e0ffff17 	ldw	r3,-4(fp)
    33b8:	18800104 	addi	r2,r3,4
    33bc:	e0bfff15 	stw	r2,-4(fp)
    33c0:	e0bffe17 	ldw	r2,-8(fp)
    33c4:	11000104 	addi	r4,r2,4
    33c8:	e13ffe15 	stw	r4,-8(fp)
    33cc:	18c00017 	ldw	r3,0(r3)
    33d0:	10c00015 	stw	r3,0(r2)
    while( to != end )
    33d4:	e0fffe17 	ldw	r3,-8(fp)
    33d8:	e0bffd17 	ldw	r2,-12(fp)
    33dc:	18bff51e 	bne	r3,r2,33b4 <alt_load_section+0x28>
    }
  }
}
    33e0:	0001883a 	nop
    33e4:	e037883a 	mov	sp,fp
    33e8:	df000017 	ldw	fp,0(sp)
    33ec:	dec00104 	addi	sp,sp,4
    33f0:	f800283a 	ret

000033f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    33f4:	defffe04 	addi	sp,sp,-8
    33f8:	dfc00115 	stw	ra,4(sp)
    33fc:	df000015 	stw	fp,0(sp)
    3400:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    3404:	01800034 	movhi	r6,0
    3408:	319c2504 	addi	r6,r6,28820
    340c:	01400034 	movhi	r5,0
    3410:	29558a04 	addi	r5,r5,22056
    3414:	01000034 	movhi	r4,0
    3418:	211c2504 	addi	r4,r4,28820
    341c:	000338c0 	call	338c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    3420:	01800034 	movhi	r6,0
    3424:	31808904 	addi	r6,r6,548
    3428:	01400034 	movhi	r5,0
    342c:	29400804 	addi	r5,r5,32
    3430:	01000034 	movhi	r4,0
    3434:	21000804 	addi	r4,r4,32
    3438:	000338c0 	call	338c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    343c:	01800034 	movhi	r6,0
    3440:	31958a04 	addi	r6,r6,22056
    3444:	01400034 	movhi	r5,0
    3448:	29557704 	addi	r5,r5,21980
    344c:	01000034 	movhi	r4,0
    3450:	21157704 	addi	r4,r4,21980
    3454:	000338c0 	call	338c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    3458:	00046400 	call	4640 <alt_dcache_flush_all>
  alt_icache_flush_all();
    345c:	00048000 	call	4800 <alt_icache_flush_all>
}
    3460:	0001883a 	nop
    3464:	e037883a 	mov	sp,fp
    3468:	dfc00117 	ldw	ra,4(sp)
    346c:	df000017 	ldw	fp,0(sp)
    3470:	dec00204 	addi	sp,sp,8
    3474:	f800283a 	ret

00003478 <alt_get_errno>:
{
    3478:	defffe04 	addi	sp,sp,-8
    347c:	dfc00115 	stw	ra,4(sp)
    3480:	df000015 	stw	fp,0(sp)
    3484:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3488:	d0a00917 	ldw	r2,-32732(gp)
    348c:	10000326 	beq	r2,zero,349c <alt_get_errno+0x24>
    3490:	d0a00917 	ldw	r2,-32732(gp)
    3494:	103ee83a 	callr	r2
    3498:	00000106 	br	34a0 <alt_get_errno+0x28>
    349c:	d0a6ac04 	addi	r2,gp,-25936
}
    34a0:	e037883a 	mov	sp,fp
    34a4:	dfc00117 	ldw	ra,4(sp)
    34a8:	df000017 	ldw	fp,0(sp)
    34ac:	dec00204 	addi	sp,sp,8
    34b0:	f800283a 	ret

000034b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    34b4:	defff904 	addi	sp,sp,-28
    34b8:	dfc00615 	stw	ra,24(sp)
    34bc:	df000515 	stw	fp,20(sp)
    34c0:	df000504 	addi	fp,sp,20
    34c4:	e13ffd15 	stw	r4,-12(fp)
    34c8:	e17ffc15 	stw	r5,-16(fp)
    34cc:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    34d0:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    34d4:	e0bffd17 	ldw	r2,-12(fp)
    34d8:	10000916 	blt	r2,zero,3500 <lseek+0x4c>
    34dc:	e0fffd17 	ldw	r3,-12(fp)
    34e0:	1805883a 	mov	r2,r3
    34e4:	1085883a 	add	r2,r2,r2
    34e8:	10c5883a 	add	r2,r2,r3
    34ec:	100490ba 	slli	r2,r2,2
    34f0:	00c00034 	movhi	r3,0
    34f4:	18d79f04 	addi	r3,r3,24188
    34f8:	10c5883a 	add	r2,r2,r3
    34fc:	00000106 	br	3504 <lseek+0x50>
    3500:	0005883a 	mov	r2,zero
    3504:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
    3508:	e0bffe17 	ldw	r2,-8(fp)
    350c:	10001026 	beq	r2,zero,3550 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    3510:	e0bffe17 	ldw	r2,-8(fp)
    3514:	10800017 	ldw	r2,0(r2)
    3518:	10800717 	ldw	r2,28(r2)
    351c:	10000926 	beq	r2,zero,3544 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    3520:	e0bffe17 	ldw	r2,-8(fp)
    3524:	10800017 	ldw	r2,0(r2)
    3528:	10800717 	ldw	r2,28(r2)
    352c:	e1bffb17 	ldw	r6,-20(fp)
    3530:	e17ffc17 	ldw	r5,-16(fp)
    3534:	e13ffe17 	ldw	r4,-8(fp)
    3538:	103ee83a 	callr	r2
    353c:	e0bfff15 	stw	r2,-4(fp)
    3540:	00000506 	br	3558 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3544:	00bfde84 	movi	r2,-134
    3548:	e0bfff15 	stw	r2,-4(fp)
    354c:	00000206 	br	3558 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
    3550:	00bfebc4 	movi	r2,-81
    3554:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
    3558:	e0bfff17 	ldw	r2,-4(fp)
    355c:	1000070e 	bge	r2,zero,357c <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
    3560:	00034780 	call	3478 <alt_get_errno>
    3564:	1007883a 	mov	r3,r2
    3568:	e0bfff17 	ldw	r2,-4(fp)
    356c:	0085c83a 	sub	r2,zero,r2
    3570:	18800015 	stw	r2,0(r3)
    rc = -1;
    3574:	00bfffc4 	movi	r2,-1
    3578:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
    357c:	e0bfff17 	ldw	r2,-4(fp)
}
    3580:	e037883a 	mov	sp,fp
    3584:	dfc00117 	ldw	ra,4(sp)
    3588:	df000017 	ldw	fp,0(sp)
    358c:	dec00204 	addi	sp,sp,8
    3590:	f800283a 	ret

00003594 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3594:	defffd04 	addi	sp,sp,-12
    3598:	dfc00215 	stw	ra,8(sp)
    359c:	df000115 	stw	fp,4(sp)
    35a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    35a4:	0009883a 	mov	r4,zero
    35a8:	0003a300 	call	3a30 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    35ac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    35b0:	0003a680 	call	3a68 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    35b4:	01800034 	movhi	r6,0
    35b8:	31958004 	addi	r6,r6,22016
    35bc:	01400034 	movhi	r5,0
    35c0:	29558004 	addi	r5,r5,22016
    35c4:	01000034 	movhi	r4,0
    35c8:	21158004 	addi	r4,r4,22016
    35cc:	0004b880 	call	4b88 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    35d0:	00047400 	call	4740 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    35d4:	01000034 	movhi	r4,0
    35d8:	2111e804 	addi	r4,r4,18336
    35dc:	000532c0 	call	532c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    35e0:	d0a6ad17 	ldw	r2,-25932(gp)
    35e4:	d0e6ae17 	ldw	r3,-25928(gp)
    35e8:	d126af17 	ldw	r4,-25924(gp)
    35ec:	200d883a 	mov	r6,r4
    35f0:	180b883a 	mov	r5,r3
    35f4:	1009883a 	mov	r4,r2
    35f8:	00002600 	call	260 <main>
    35fc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3600:	01000044 	movi	r4,1
    3604:	00030a00 	call	30a0 <close>
  exit (result);
    3608:	e13fff17 	ldw	r4,-4(fp)
    360c:	00053400 	call	5340 <exit>

00003610 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3610:	defffe04 	addi	sp,sp,-8
    3614:	df000115 	stw	fp,4(sp)
    3618:	df000104 	addi	fp,sp,4
    361c:	e13fff15 	stw	r4,-4(fp)
}
    3620:	0001883a 	nop
    3624:	e037883a 	mov	sp,fp
    3628:	df000017 	ldw	fp,0(sp)
    362c:	dec00104 	addi	sp,sp,4
    3630:	f800283a 	ret

00003634 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3634:	defffe04 	addi	sp,sp,-8
    3638:	df000115 	stw	fp,4(sp)
    363c:	df000104 	addi	fp,sp,4
    3640:	e13fff15 	stw	r4,-4(fp)
}
    3644:	0001883a 	nop
    3648:	e037883a 	mov	sp,fp
    364c:	df000017 	ldw	fp,0(sp)
    3650:	dec00104 	addi	sp,sp,4
    3654:	f800283a 	ret

00003658 <alt_get_errno>:
{
    3658:	defffe04 	addi	sp,sp,-8
    365c:	dfc00115 	stw	ra,4(sp)
    3660:	df000015 	stw	fp,0(sp)
    3664:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3668:	d0a00917 	ldw	r2,-32732(gp)
    366c:	10000326 	beq	r2,zero,367c <alt_get_errno+0x24>
    3670:	d0a00917 	ldw	r2,-32732(gp)
    3674:	103ee83a 	callr	r2
    3678:	00000106 	br	3680 <alt_get_errno+0x28>
    367c:	d0a6ac04 	addi	r2,gp,-25936
}
    3680:	e037883a 	mov	sp,fp
    3684:	dfc00117 	ldw	ra,4(sp)
    3688:	df000017 	ldw	fp,0(sp)
    368c:	dec00204 	addi	sp,sp,8
    3690:	f800283a 	ret

00003694 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3694:	defff904 	addi	sp,sp,-28
    3698:	dfc00615 	stw	ra,24(sp)
    369c:	df000515 	stw	fp,20(sp)
    36a0:	df000504 	addi	fp,sp,20
    36a4:	e13ffd15 	stw	r4,-12(fp)
    36a8:	e17ffc15 	stw	r5,-16(fp)
    36ac:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    36b0:	e0bffd17 	ldw	r2,-12(fp)
    36b4:	10000916 	blt	r2,zero,36dc <read+0x48>
    36b8:	e0fffd17 	ldw	r3,-12(fp)
    36bc:	1805883a 	mov	r2,r3
    36c0:	1085883a 	add	r2,r2,r2
    36c4:	10c5883a 	add	r2,r2,r3
    36c8:	100490ba 	slli	r2,r2,2
    36cc:	00c00034 	movhi	r3,0
    36d0:	18d79f04 	addi	r3,r3,24188
    36d4:	10c5883a 	add	r2,r2,r3
    36d8:	00000106 	br	36e0 <read+0x4c>
    36dc:	0005883a 	mov	r2,zero
    36e0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    36e4:	e0bfff17 	ldw	r2,-4(fp)
    36e8:	10002226 	beq	r2,zero,3774 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    36ec:	e0bfff17 	ldw	r2,-4(fp)
    36f0:	10800217 	ldw	r2,8(r2)
    36f4:	108000cc 	andi	r2,r2,3
    36f8:	10800060 	cmpeqi	r2,r2,1
    36fc:	1000181e 	bne	r2,zero,3760 <read+0xcc>
        (fd->dev->read))
    3700:	e0bfff17 	ldw	r2,-4(fp)
    3704:	10800017 	ldw	r2,0(r2)
    3708:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    370c:	10001426 	beq	r2,zero,3760 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3710:	e0bfff17 	ldw	r2,-4(fp)
    3714:	10800017 	ldw	r2,0(r2)
    3718:	10800517 	ldw	r2,20(r2)
    371c:	e0fffb17 	ldw	r3,-20(fp)
    3720:	180d883a 	mov	r6,r3
    3724:	e17ffc17 	ldw	r5,-16(fp)
    3728:	e13fff17 	ldw	r4,-4(fp)
    372c:	103ee83a 	callr	r2
    3730:	e0bffe15 	stw	r2,-8(fp)
    3734:	e0bffe17 	ldw	r2,-8(fp)
    3738:	1000070e 	bge	r2,zero,3758 <read+0xc4>
        {
          ALT_ERRNO = -rval;
    373c:	00036580 	call	3658 <alt_get_errno>
    3740:	1007883a 	mov	r3,r2
    3744:	e0bffe17 	ldw	r2,-8(fp)
    3748:	0085c83a 	sub	r2,zero,r2
    374c:	18800015 	stw	r2,0(r3)
          return -1;
    3750:	00bfffc4 	movi	r2,-1
    3754:	00000c06 	br	3788 <read+0xf4>
        }
        return rval;
    3758:	e0bffe17 	ldw	r2,-8(fp)
    375c:	00000a06 	br	3788 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3760:	00036580 	call	3658 <alt_get_errno>
    3764:	1007883a 	mov	r3,r2
    3768:	00800344 	movi	r2,13
    376c:	18800015 	stw	r2,0(r3)
    3770:	00000406 	br	3784 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3774:	00036580 	call	3658 <alt_get_errno>
    3778:	1007883a 	mov	r3,r2
    377c:	00801444 	movi	r2,81
    3780:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3784:	00bfffc4 	movi	r2,-1
}
    3788:	e037883a 	mov	sp,fp
    378c:	dfc00117 	ldw	ra,4(sp)
    3790:	df000017 	ldw	fp,0(sp)
    3794:	dec00204 	addi	sp,sp,8
    3798:	f800283a 	ret

0000379c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    379c:	defffe04 	addi	sp,sp,-8
    37a0:	df000115 	stw	fp,4(sp)
    37a4:	df000104 	addi	fp,sp,4
    37a8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    37ac:	e0bfff17 	ldw	r2,-4(fp)
    37b0:	108000d0 	cmplti	r2,r2,3
    37b4:	1000101e 	bne	r2,zero,37f8 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    37b8:	e0ffff17 	ldw	r3,-4(fp)
    37bc:	1805883a 	mov	r2,r3
    37c0:	1085883a 	add	r2,r2,r2
    37c4:	10c5883a 	add	r2,r2,r3
    37c8:	100490ba 	slli	r2,r2,2
    37cc:	00c00034 	movhi	r3,0
    37d0:	10c7883a 	add	r3,r2,r3
    37d4:	1817a115 	stw	zero,24196(r3)
    alt_fd_list[fd].dev      = 0;
    37d8:	e0ffff17 	ldw	r3,-4(fp)
    37dc:	1805883a 	mov	r2,r3
    37e0:	1085883a 	add	r2,r2,r2
    37e4:	10c5883a 	add	r2,r2,r3
    37e8:	100490ba 	slli	r2,r2,2
    37ec:	00c00034 	movhi	r3,0
    37f0:	10c7883a 	add	r3,r2,r3
    37f4:	18179f15 	stw	zero,24188(r3)
  }
}
    37f8:	0001883a 	nop
    37fc:	e037883a 	mov	sp,fp
    3800:	df000017 	ldw	fp,0(sp)
    3804:	dec00104 	addi	sp,sp,4
    3808:	f800283a 	ret

0000380c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    380c:	defff904 	addi	sp,sp,-28
    3810:	df000615 	stw	fp,24(sp)
    3814:	df000604 	addi	fp,sp,24
    3818:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
    381c:	0005303a 	rdctl	r2,status
    3820:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3824:	e0fffd17 	ldw	r3,-12(fp)
    3828:	00bfff84 	movi	r2,-2
    382c:	1884703a 	and	r2,r3,r2
    3830:	1001703a 	wrctl	status,r2
  return context;
    3834:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    3838:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    383c:	d0a00a17 	ldw	r2,-32728(gp)
    3840:	10c000c4 	addi	r3,r2,3
    3844:	00bfff04 	movi	r2,-4
    3848:	1884703a 	and	r2,r3,r2
    384c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    3850:	d0e00a17 	ldw	r3,-32728(gp)
    3854:	e0bffa17 	ldw	r2,-24(fp)
    3858:	1887883a 	add	r3,r3,r2
    385c:	008000b4 	movhi	r2,2
    3860:	10bd0004 	addi	r2,r2,-3072
    3864:	10c0062e 	bgeu	r2,r3,3880 <sbrk+0x74>
    3868:	e0bfff17 	ldw	r2,-4(fp)
    386c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    3870:	e0bffc17 	ldw	r2,-16(fp)
    3874:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3878:	00bfffc4 	movi	r2,-1
    387c:	00000b06 	br	38ac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    3880:	d0a00a17 	ldw	r2,-32728(gp)
    3884:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
    3888:	d0e00a17 	ldw	r3,-32728(gp)
    388c:	e0bffa17 	ldw	r2,-24(fp)
    3890:	1885883a 	add	r2,r3,r2
    3894:	d0a00a15 	stw	r2,-32728(gp)
    3898:	e0bfff17 	ldw	r2,-4(fp)
    389c:	e0bffb15 	stw	r2,-20(fp)
    38a0:	e0bffb17 	ldw	r2,-20(fp)
    38a4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    38a8:	e0bffe17 	ldw	r2,-8(fp)
} 
    38ac:	e037883a 	mov	sp,fp
    38b0:	df000017 	ldw	fp,0(sp)
    38b4:	dec00104 	addi	sp,sp,4
    38b8:	f800283a 	ret

000038bc <alt_get_errno>:
{
    38bc:	defffe04 	addi	sp,sp,-8
    38c0:	dfc00115 	stw	ra,4(sp)
    38c4:	df000015 	stw	fp,0(sp)
    38c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    38cc:	d0a00917 	ldw	r2,-32732(gp)
    38d0:	10000326 	beq	r2,zero,38e0 <alt_get_errno+0x24>
    38d4:	d0a00917 	ldw	r2,-32732(gp)
    38d8:	103ee83a 	callr	r2
    38dc:	00000106 	br	38e4 <alt_get_errno+0x28>
    38e0:	d0a6ac04 	addi	r2,gp,-25936
}
    38e4:	e037883a 	mov	sp,fp
    38e8:	dfc00117 	ldw	ra,4(sp)
    38ec:	df000017 	ldw	fp,0(sp)
    38f0:	dec00204 	addi	sp,sp,8
    38f4:	f800283a 	ret

000038f8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    38f8:	defff904 	addi	sp,sp,-28
    38fc:	dfc00615 	stw	ra,24(sp)
    3900:	df000515 	stw	fp,20(sp)
    3904:	df000504 	addi	fp,sp,20
    3908:	e13ffd15 	stw	r4,-12(fp)
    390c:	e17ffc15 	stw	r5,-16(fp)
    3910:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3914:	e0bffd17 	ldw	r2,-12(fp)
    3918:	10000916 	blt	r2,zero,3940 <write+0x48>
    391c:	e0fffd17 	ldw	r3,-12(fp)
    3920:	1805883a 	mov	r2,r3
    3924:	1085883a 	add	r2,r2,r2
    3928:	10c5883a 	add	r2,r2,r3
    392c:	100490ba 	slli	r2,r2,2
    3930:	00c00034 	movhi	r3,0
    3934:	18d79f04 	addi	r3,r3,24188
    3938:	10c5883a 	add	r2,r2,r3
    393c:	00000106 	br	3944 <write+0x4c>
    3940:	0005883a 	mov	r2,zero
    3944:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    3948:	e0bfff17 	ldw	r2,-4(fp)
    394c:	10002126 	beq	r2,zero,39d4 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3950:	e0bfff17 	ldw	r2,-4(fp)
    3954:	10800217 	ldw	r2,8(r2)
    3958:	108000cc 	andi	r2,r2,3
    395c:	10001826 	beq	r2,zero,39c0 <write+0xc8>
    3960:	e0bfff17 	ldw	r2,-4(fp)
    3964:	10800017 	ldw	r2,0(r2)
    3968:	10800617 	ldw	r2,24(r2)
    396c:	10001426 	beq	r2,zero,39c0 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3970:	e0bfff17 	ldw	r2,-4(fp)
    3974:	10800017 	ldw	r2,0(r2)
    3978:	10800617 	ldw	r2,24(r2)
    397c:	e0fffb17 	ldw	r3,-20(fp)
    3980:	180d883a 	mov	r6,r3
    3984:	e17ffc17 	ldw	r5,-16(fp)
    3988:	e13fff17 	ldw	r4,-4(fp)
    398c:	103ee83a 	callr	r2
    3990:	e0bffe15 	stw	r2,-8(fp)
    3994:	e0bffe17 	ldw	r2,-8(fp)
    3998:	1000070e 	bge	r2,zero,39b8 <write+0xc0>
      {
        ALT_ERRNO = -rval;
    399c:	00038bc0 	call	38bc <alt_get_errno>
    39a0:	1007883a 	mov	r3,r2
    39a4:	e0bffe17 	ldw	r2,-8(fp)
    39a8:	0085c83a 	sub	r2,zero,r2
    39ac:	18800015 	stw	r2,0(r3)
        return -1;
    39b0:	00bfffc4 	movi	r2,-1
    39b4:	00000c06 	br	39e8 <write+0xf0>
      }
      return rval;
    39b8:	e0bffe17 	ldw	r2,-8(fp)
    39bc:	00000a06 	br	39e8 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    39c0:	00038bc0 	call	38bc <alt_get_errno>
    39c4:	1007883a 	mov	r3,r2
    39c8:	00800344 	movi	r2,13
    39cc:	18800015 	stw	r2,0(r3)
    39d0:	00000406 	br	39e4 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    39d4:	00038bc0 	call	38bc <alt_get_errno>
    39d8:	1007883a 	mov	r3,r2
    39dc:	00801444 	movi	r2,81
    39e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    39e4:	00bfffc4 	movi	r2,-1
}
    39e8:	e037883a 	mov	sp,fp
    39ec:	dfc00117 	ldw	ra,4(sp)
    39f0:	df000017 	ldw	fp,0(sp)
    39f4:	dec00204 	addi	sp,sp,8
    39f8:	f800283a 	ret

000039fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    39fc:	defffd04 	addi	sp,sp,-12
    3a00:	dfc00215 	stw	ra,8(sp)
    3a04:	df000115 	stw	fp,4(sp)
    3a08:	df000104 	addi	fp,sp,4
    3a0c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3a10:	d1600604 	addi	r5,gp,-32744
    3a14:	e13fff17 	ldw	r4,-4(fp)
    3a18:	000469c0 	call	469c <alt_dev_llist_insert>
}
    3a1c:	e037883a 	mov	sp,fp
    3a20:	dfc00117 	ldw	ra,4(sp)
    3a24:	df000017 	ldw	fp,0(sp)
    3a28:	dec00204 	addi	sp,sp,8
    3a2c:	f800283a 	ret

00003a30 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3a30:	defffd04 	addi	sp,sp,-12
    3a34:	dfc00215 	stw	ra,8(sp)
    3a38:	df000115 	stw	fp,4(sp)
    3a3c:	df000104 	addi	fp,sp,4
    3a40:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    3a44:	00050200 	call	5020 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3a48:	00800044 	movi	r2,1
    3a4c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3a50:	0001883a 	nop
    3a54:	e037883a 	mov	sp,fp
    3a58:	dfc00117 	ldw	ra,4(sp)
    3a5c:	df000017 	ldw	fp,0(sp)
    3a60:	dec00204 	addi	sp,sp,8
    3a64:	f800283a 	ret

00003a68 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3a68:	defffe04 	addi	sp,sp,-8
    3a6c:	dfc00115 	stw	ra,4(sp)
    3a70:	df000015 	stw	fp,0(sp)
    3a74:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    3a78:	000d883a 	mov	r6,zero
    3a7c:	000b883a 	mov	r5,zero
    3a80:	01000034 	movhi	r4,0
    3a84:	21180904 	addi	r4,r4,24612
    3a88:	0003c140 	call	3c14 <altera_avalon_jtag_uart_init>
    3a8c:	01000034 	movhi	r4,0
    3a90:	2117ff04 	addi	r4,r4,24572
    3a94:	00039fc0 	call	39fc <alt_dev_reg>
}
    3a98:	0001883a 	nop
    3a9c:	e037883a 	mov	sp,fp
    3aa0:	dfc00117 	ldw	ra,4(sp)
    3aa4:	df000017 	ldw	fp,0(sp)
    3aa8:	dec00204 	addi	sp,sp,8
    3aac:	f800283a 	ret

00003ab0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3ab0:	defffa04 	addi	sp,sp,-24
    3ab4:	dfc00515 	stw	ra,20(sp)
    3ab8:	df000415 	stw	fp,16(sp)
    3abc:	df000404 	addi	fp,sp,16
    3ac0:	e13ffe15 	stw	r4,-8(fp)
    3ac4:	e17ffd15 	stw	r5,-12(fp)
    3ac8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3acc:	e0bffe17 	ldw	r2,-8(fp)
    3ad0:	10800017 	ldw	r2,0(r2)
    3ad4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    3ad8:	e0bfff17 	ldw	r2,-4(fp)
    3adc:	10c00a04 	addi	r3,r2,40
    3ae0:	e0bffe17 	ldw	r2,-8(fp)
    3ae4:	10800217 	ldw	r2,8(r2)
    3ae8:	100f883a 	mov	r7,r2
    3aec:	e1bffc17 	ldw	r6,-16(fp)
    3af0:	e17ffd17 	ldw	r5,-12(fp)
    3af4:	1809883a 	mov	r4,r3
    3af8:	00040d40 	call	40d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    3afc:	e037883a 	mov	sp,fp
    3b00:	dfc00117 	ldw	ra,4(sp)
    3b04:	df000017 	ldw	fp,0(sp)
    3b08:	dec00204 	addi	sp,sp,8
    3b0c:	f800283a 	ret

00003b10 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    3b10:	defffa04 	addi	sp,sp,-24
    3b14:	dfc00515 	stw	ra,20(sp)
    3b18:	df000415 	stw	fp,16(sp)
    3b1c:	df000404 	addi	fp,sp,16
    3b20:	e13ffe15 	stw	r4,-8(fp)
    3b24:	e17ffd15 	stw	r5,-12(fp)
    3b28:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3b2c:	e0bffe17 	ldw	r2,-8(fp)
    3b30:	10800017 	ldw	r2,0(r2)
    3b34:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3b38:	e0bfff17 	ldw	r2,-4(fp)
    3b3c:	10c00a04 	addi	r3,r2,40
    3b40:	e0bffe17 	ldw	r2,-8(fp)
    3b44:	10800217 	ldw	r2,8(r2)
    3b48:	100f883a 	mov	r7,r2
    3b4c:	e1bffc17 	ldw	r6,-16(fp)
    3b50:	e17ffd17 	ldw	r5,-12(fp)
    3b54:	1809883a 	mov	r4,r3
    3b58:	00042f00 	call	42f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3b5c:	e037883a 	mov	sp,fp
    3b60:	dfc00117 	ldw	ra,4(sp)
    3b64:	df000017 	ldw	fp,0(sp)
    3b68:	dec00204 	addi	sp,sp,8
    3b6c:	f800283a 	ret

00003b70 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3b70:	defffc04 	addi	sp,sp,-16
    3b74:	dfc00315 	stw	ra,12(sp)
    3b78:	df000215 	stw	fp,8(sp)
    3b7c:	df000204 	addi	fp,sp,8
    3b80:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3b84:	e0bffe17 	ldw	r2,-8(fp)
    3b88:	10800017 	ldw	r2,0(r2)
    3b8c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    3b90:	e0bfff17 	ldw	r2,-4(fp)
    3b94:	10c00a04 	addi	r3,r2,40
    3b98:	e0bffe17 	ldw	r2,-8(fp)
    3b9c:	10800217 	ldw	r2,8(r2)
    3ba0:	100b883a 	mov	r5,r2
    3ba4:	1809883a 	mov	r4,r3
    3ba8:	0003f780 	call	3f78 <altera_avalon_jtag_uart_close>
}
    3bac:	e037883a 	mov	sp,fp
    3bb0:	dfc00117 	ldw	ra,4(sp)
    3bb4:	df000017 	ldw	fp,0(sp)
    3bb8:	dec00204 	addi	sp,sp,8
    3bbc:	f800283a 	ret

00003bc0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    3bc0:	defffa04 	addi	sp,sp,-24
    3bc4:	dfc00515 	stw	ra,20(sp)
    3bc8:	df000415 	stw	fp,16(sp)
    3bcc:	df000404 	addi	fp,sp,16
    3bd0:	e13ffe15 	stw	r4,-8(fp)
    3bd4:	e17ffd15 	stw	r5,-12(fp)
    3bd8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    3bdc:	e0bffe17 	ldw	r2,-8(fp)
    3be0:	10800017 	ldw	r2,0(r2)
    3be4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    3be8:	e0bfff17 	ldw	r2,-4(fp)
    3bec:	10800a04 	addi	r2,r2,40
    3bf0:	e1bffc17 	ldw	r6,-16(fp)
    3bf4:	e17ffd17 	ldw	r5,-12(fp)
    3bf8:	1009883a 	mov	r4,r2
    3bfc:	0003fe00 	call	3fe0 <altera_avalon_jtag_uart_ioctl>
}
    3c00:	e037883a 	mov	sp,fp
    3c04:	dfc00117 	ldw	ra,4(sp)
    3c08:	df000017 	ldw	fp,0(sp)
    3c0c:	dec00204 	addi	sp,sp,8
    3c10:	f800283a 	ret

00003c14 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    3c14:	defffa04 	addi	sp,sp,-24
    3c18:	dfc00515 	stw	ra,20(sp)
    3c1c:	df000415 	stw	fp,16(sp)
    3c20:	df000404 	addi	fp,sp,16
    3c24:	e13fff15 	stw	r4,-4(fp)
    3c28:	e17ffe15 	stw	r5,-8(fp)
    3c2c:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3c30:	e0bfff17 	ldw	r2,-4(fp)
    3c34:	00c00044 	movi	r3,1
    3c38:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    3c3c:	e0bfff17 	ldw	r2,-4(fp)
    3c40:	10800017 	ldw	r2,0(r2)
    3c44:	10800104 	addi	r2,r2,4
    3c48:	1007883a 	mov	r3,r2
    3c4c:	e0bfff17 	ldw	r2,-4(fp)
    3c50:	10800817 	ldw	r2,32(r2)
    3c54:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    3c58:	e0bffe17 	ldw	r2,-8(fp)
    3c5c:	e0fffd17 	ldw	r3,-12(fp)
    3c60:	d8000015 	stw	zero,0(sp)
    3c64:	e1ffff17 	ldw	r7,-4(fp)
    3c68:	01800034 	movhi	r6,0
    3c6c:	318f3504 	addi	r6,r6,15572
    3c70:	180b883a 	mov	r5,r3
    3c74:	1009883a 	mov	r4,r2
    3c78:	00048200 	call	4820 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    3c7c:	e0bfff17 	ldw	r2,-4(fp)
    3c80:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    3c84:	e0bfff17 	ldw	r2,-4(fp)
    3c88:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    3c8c:	d0e6b117 	ldw	r3,-25916(gp)
    3c90:	e1ffff17 	ldw	r7,-4(fp)
    3c94:	01800034 	movhi	r6,0
    3c98:	318fb604 	addi	r6,r6,16088
    3c9c:	180b883a 	mov	r5,r3
    3ca0:	1009883a 	mov	r4,r2
    3ca4:	00045140 	call	4514 <alt_alarm_start>
    3ca8:	1000040e 	bge	r2,zero,3cbc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    3cac:	e0ffff17 	ldw	r3,-4(fp)
    3cb0:	00a00034 	movhi	r2,32768
    3cb4:	10bfffc4 	addi	r2,r2,-1
    3cb8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    3cbc:	0001883a 	nop
    3cc0:	e037883a 	mov	sp,fp
    3cc4:	dfc00117 	ldw	ra,4(sp)
    3cc8:	df000017 	ldw	fp,0(sp)
    3ccc:	dec00204 	addi	sp,sp,8
    3cd0:	f800283a 	ret

00003cd4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    3cd4:	defff804 	addi	sp,sp,-32
    3cd8:	df000715 	stw	fp,28(sp)
    3cdc:	df000704 	addi	fp,sp,28
    3ce0:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    3ce4:	e0bff917 	ldw	r2,-28(fp)
    3ce8:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
    3cec:	e0bffd17 	ldw	r2,-12(fp)
    3cf0:	10800017 	ldw	r2,0(r2)
    3cf4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3cf8:	e0bffc17 	ldw	r2,-16(fp)
    3cfc:	10800104 	addi	r2,r2,4
    3d00:	10800037 	ldwio	r2,0(r2)
    3d04:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    3d08:	e0bffb17 	ldw	r2,-20(fp)
    3d0c:	1080c00c 	andi	r2,r2,768
    3d10:	10006b26 	beq	r2,zero,3ec0 <altera_avalon_jtag_uart_irq+0x1ec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    3d14:	e0bffb17 	ldw	r2,-20(fp)
    3d18:	1080400c 	andi	r2,r2,256
    3d1c:	10003426 	beq	r2,zero,3df0 <altera_avalon_jtag_uart_irq+0x11c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    3d20:	00800074 	movhi	r2,1
    3d24:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3d28:	e0bffd17 	ldw	r2,-12(fp)
    3d2c:	10800a17 	ldw	r2,40(r2)
    3d30:	10800044 	addi	r2,r2,1
    3d34:	1081ffcc 	andi	r2,r2,2047
    3d38:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    3d3c:	e0bffd17 	ldw	r2,-12(fp)
    3d40:	10800b17 	ldw	r2,44(r2)
    3d44:	e0fffa17 	ldw	r3,-24(fp)
    3d48:	18801426 	beq	r3,r2,3d9c <altera_avalon_jtag_uart_irq+0xc8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    3d4c:	e0bffc17 	ldw	r2,-16(fp)
    3d50:	10800037 	ldwio	r2,0(r2)
    3d54:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    3d58:	e0bfff17 	ldw	r2,-4(fp)
    3d5c:	10a0000c 	andi	r2,r2,32768
    3d60:	10001026 	beq	r2,zero,3da4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    3d64:	e0bffd17 	ldw	r2,-12(fp)
    3d68:	10800a17 	ldw	r2,40(r2)
    3d6c:	e0ffff17 	ldw	r3,-4(fp)
    3d70:	1809883a 	mov	r4,r3
    3d74:	e0fffd17 	ldw	r3,-12(fp)
    3d78:	1885883a 	add	r2,r3,r2
    3d7c:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3d80:	e0bffd17 	ldw	r2,-12(fp)
    3d84:	10800a17 	ldw	r2,40(r2)
    3d88:	10800044 	addi	r2,r2,1
    3d8c:	10c1ffcc 	andi	r3,r2,2047
    3d90:	e0bffd17 	ldw	r2,-12(fp)
    3d94:	10c00a15 	stw	r3,40(r2)
      {
    3d98:	003fe306 	br	3d28 <altera_avalon_jtag_uart_irq+0x54>
          break;
    3d9c:	0001883a 	nop
    3da0:	00000106 	br	3da8 <altera_avalon_jtag_uart_irq+0xd4>
          break;
    3da4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    3da8:	e0bfff17 	ldw	r2,-4(fp)
    3dac:	10bfffec 	andhi	r2,r2,65535
    3db0:	10000f26 	beq	r2,zero,3df0 <altera_avalon_jtag_uart_irq+0x11c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3db4:	e0bffd17 	ldw	r2,-12(fp)
    3db8:	10c00817 	ldw	r3,32(r2)
    3dbc:	00bfff84 	movi	r2,-2
    3dc0:	1886703a 	and	r3,r3,r2
    3dc4:	e0bffd17 	ldw	r2,-12(fp)
    3dc8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    3dcc:	e0bffc17 	ldw	r2,-16(fp)
    3dd0:	10800104 	addi	r2,r2,4
    3dd4:	1007883a 	mov	r3,r2
    3dd8:	e0bffd17 	ldw	r2,-12(fp)
    3ddc:	10800817 	ldw	r2,32(r2)
    3de0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3de4:	e0bffc17 	ldw	r2,-16(fp)
    3de8:	10800104 	addi	r2,r2,4
    3dec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    3df0:	e0bffb17 	ldw	r2,-20(fp)
    3df4:	1080800c 	andi	r2,r2,512
    3df8:	103fbf26 	beq	r2,zero,3cf8 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    3dfc:	e0bffb17 	ldw	r2,-20(fp)
    3e00:	1004d43a 	srli	r2,r2,16
    3e04:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    3e08:	00001306 	br	3e58 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    3e0c:	e0bffc17 	ldw	r2,-16(fp)
    3e10:	e0fffd17 	ldw	r3,-12(fp)
    3e14:	18c00d17 	ldw	r3,52(r3)
    3e18:	e13ffd17 	ldw	r4,-12(fp)
    3e1c:	20c7883a 	add	r3,r4,r3
    3e20:	18c20e03 	ldbu	r3,2104(r3)
    3e24:	18c03fcc 	andi	r3,r3,255
    3e28:	18c0201c 	xori	r3,r3,128
    3e2c:	18ffe004 	addi	r3,r3,-128
    3e30:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3e34:	e0bffd17 	ldw	r2,-12(fp)
    3e38:	10800d17 	ldw	r2,52(r2)
    3e3c:	10800044 	addi	r2,r2,1
    3e40:	10c1ffcc 	andi	r3,r2,2047
    3e44:	e0bffd17 	ldw	r2,-12(fp)
    3e48:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    3e4c:	e0bffe17 	ldw	r2,-8(fp)
    3e50:	10bfffc4 	addi	r2,r2,-1
    3e54:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
    3e58:	e0bffe17 	ldw	r2,-8(fp)
    3e5c:	10000526 	beq	r2,zero,3e74 <altera_avalon_jtag_uart_irq+0x1a0>
    3e60:	e0bffd17 	ldw	r2,-12(fp)
    3e64:	10c00d17 	ldw	r3,52(r2)
    3e68:	e0bffd17 	ldw	r2,-12(fp)
    3e6c:	10800c17 	ldw	r2,48(r2)
    3e70:	18bfe61e 	bne	r3,r2,3e0c <altera_avalon_jtag_uart_irq+0x138>
      }

      if (space > 0)
    3e74:	e0bffe17 	ldw	r2,-8(fp)
    3e78:	103f9f26 	beq	r2,zero,3cf8 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    3e7c:	e0bffd17 	ldw	r2,-12(fp)
    3e80:	10c00817 	ldw	r3,32(r2)
    3e84:	00bfff44 	movi	r2,-3
    3e88:	1886703a 	and	r3,r3,r2
    3e8c:	e0bffd17 	ldw	r2,-12(fp)
    3e90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    3e94:	e0bffd17 	ldw	r2,-12(fp)
    3e98:	10800017 	ldw	r2,0(r2)
    3e9c:	10800104 	addi	r2,r2,4
    3ea0:	1007883a 	mov	r3,r2
    3ea4:	e0bffd17 	ldw	r2,-12(fp)
    3ea8:	10800817 	ldw	r2,32(r2)
    3eac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3eb0:	e0bffc17 	ldw	r2,-16(fp)
    3eb4:	10800104 	addi	r2,r2,4
    3eb8:	10800037 	ldwio	r2,0(r2)
  {
    3ebc:	003f8e06 	br	3cf8 <altera_avalon_jtag_uart_irq+0x24>
      break;
    3ec0:	0001883a 	nop
      }
    }
  }
}
    3ec4:	0001883a 	nop
    3ec8:	e037883a 	mov	sp,fp
    3ecc:	df000017 	ldw	fp,0(sp)
    3ed0:	dec00104 	addi	sp,sp,4
    3ed4:	f800283a 	ret

00003ed8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    3ed8:	defffc04 	addi	sp,sp,-16
    3edc:	df000315 	stw	fp,12(sp)
    3ee0:	df000304 	addi	fp,sp,12
    3ee4:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    3ee8:	e0bffd17 	ldw	r2,-12(fp)
    3eec:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    3ef0:	e0bfff17 	ldw	r2,-4(fp)
    3ef4:	10800017 	ldw	r2,0(r2)
    3ef8:	10800104 	addi	r2,r2,4
    3efc:	10800037 	ldwio	r2,0(r2)
    3f00:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    3f04:	e0bffe17 	ldw	r2,-8(fp)
    3f08:	1081000c 	andi	r2,r2,1024
    3f0c:	10000b26 	beq	r2,zero,3f3c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    3f10:	e0bfff17 	ldw	r2,-4(fp)
    3f14:	10800017 	ldw	r2,0(r2)
    3f18:	10800104 	addi	r2,r2,4
    3f1c:	1007883a 	mov	r3,r2
    3f20:	e0bfff17 	ldw	r2,-4(fp)
    3f24:	10800817 	ldw	r2,32(r2)
    3f28:	10810014 	ori	r2,r2,1024
    3f2c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    3f30:	e0bfff17 	ldw	r2,-4(fp)
    3f34:	10000915 	stw	zero,36(r2)
    3f38:	00000a06 	br	3f64 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    3f3c:	e0bfff17 	ldw	r2,-4(fp)
    3f40:	10c00917 	ldw	r3,36(r2)
    3f44:	00a00034 	movhi	r2,32768
    3f48:	10bfff04 	addi	r2,r2,-4
    3f4c:	10c00536 	bltu	r2,r3,3f64 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    3f50:	e0bfff17 	ldw	r2,-4(fp)
    3f54:	10800917 	ldw	r2,36(r2)
    3f58:	10c00044 	addi	r3,r2,1
    3f5c:	e0bfff17 	ldw	r2,-4(fp)
    3f60:	10c00915 	stw	r3,36(r2)
    3f64:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    3f68:	e037883a 	mov	sp,fp
    3f6c:	df000017 	ldw	fp,0(sp)
    3f70:	dec00104 	addi	sp,sp,4
    3f74:	f800283a 	ret

00003f78 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    3f78:	defffd04 	addi	sp,sp,-12
    3f7c:	df000215 	stw	fp,8(sp)
    3f80:	df000204 	addi	fp,sp,8
    3f84:	e13fff15 	stw	r4,-4(fp)
    3f88:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    3f8c:	00000506 	br	3fa4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    3f90:	e0bffe17 	ldw	r2,-8(fp)
    3f94:	1090000c 	andi	r2,r2,16384
    3f98:	10000226 	beq	r2,zero,3fa4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    3f9c:	00bffd44 	movi	r2,-11
    3fa0:	00000b06 	br	3fd0 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    3fa4:	e0bfff17 	ldw	r2,-4(fp)
    3fa8:	10c00d17 	ldw	r3,52(r2)
    3fac:	e0bfff17 	ldw	r2,-4(fp)
    3fb0:	10800c17 	ldw	r2,48(r2)
    3fb4:	18800526 	beq	r3,r2,3fcc <altera_avalon_jtag_uart_close+0x54>
    3fb8:	e0bfff17 	ldw	r2,-4(fp)
    3fbc:	10c00917 	ldw	r3,36(r2)
    3fc0:	e0bfff17 	ldw	r2,-4(fp)
    3fc4:	10800117 	ldw	r2,4(r2)
    3fc8:	18bff136 	bltu	r3,r2,3f90 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
    3fcc:	0005883a 	mov	r2,zero
}
    3fd0:	e037883a 	mov	sp,fp
    3fd4:	df000017 	ldw	fp,0(sp)
    3fd8:	dec00104 	addi	sp,sp,4
    3fdc:	f800283a 	ret

00003fe0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    3fe0:	defffa04 	addi	sp,sp,-24
    3fe4:	df000515 	stw	fp,20(sp)
    3fe8:	df000504 	addi	fp,sp,20
    3fec:	e13ffd15 	stw	r4,-12(fp)
    3ff0:	e17ffc15 	stw	r5,-16(fp)
    3ff4:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
    3ff8:	00bff9c4 	movi	r2,-25
    3ffc:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
    4000:	e0bffc17 	ldw	r2,-16(fp)
    4004:	109a8060 	cmpeqi	r2,r2,27137
    4008:	1000041e 	bne	r2,zero,401c <altera_avalon_jtag_uart_ioctl+0x3c>
    400c:	e0bffc17 	ldw	r2,-16(fp)
    4010:	109a80a0 	cmpeqi	r2,r2,27138
    4014:	1000181e 	bne	r2,zero,4078 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    4018:	00002906 	br	40c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    401c:	e0bffd17 	ldw	r2,-12(fp)
    4020:	10c00117 	ldw	r3,4(r2)
    4024:	00a00034 	movhi	r2,32768
    4028:	10bfffc4 	addi	r2,r2,-1
    402c:	18802126 	beq	r3,r2,40b4 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
    4030:	e0bffb17 	ldw	r2,-20(fp)
    4034:	10800017 	ldw	r2,0(r2)
    4038:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    403c:	e0bffe17 	ldw	r2,-8(fp)
    4040:	10800090 	cmplti	r2,r2,2
    4044:	1000061e 	bne	r2,zero,4060 <altera_avalon_jtag_uart_ioctl+0x80>
    4048:	e0fffe17 	ldw	r3,-8(fp)
    404c:	00a00034 	movhi	r2,32768
    4050:	10bfffc4 	addi	r2,r2,-1
    4054:	18800226 	beq	r3,r2,4060 <altera_avalon_jtag_uart_ioctl+0x80>
    4058:	e0bffe17 	ldw	r2,-8(fp)
    405c:	00000206 	br	4068 <altera_avalon_jtag_uart_ioctl+0x88>
    4060:	00a00034 	movhi	r2,32768
    4064:	10bfff84 	addi	r2,r2,-2
    4068:	e0fffd17 	ldw	r3,-12(fp)
    406c:	18800115 	stw	r2,4(r3)
      rc = 0;
    4070:	e03fff15 	stw	zero,-4(fp)
    break;
    4074:	00000f06 	br	40b4 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
    4078:	e0bffd17 	ldw	r2,-12(fp)
    407c:	10c00117 	ldw	r3,4(r2)
    4080:	00a00034 	movhi	r2,32768
    4084:	10bfffc4 	addi	r2,r2,-1
    4088:	18800c26 	beq	r3,r2,40bc <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    408c:	e0bffd17 	ldw	r2,-12(fp)
    4090:	10c00917 	ldw	r3,36(r2)
    4094:	e0bffd17 	ldw	r2,-12(fp)
    4098:	10800117 	ldw	r2,4(r2)
    409c:	1885803a 	cmpltu	r2,r3,r2
    40a0:	10c03fcc 	andi	r3,r2,255
    40a4:	e0bffb17 	ldw	r2,-20(fp)
    40a8:	10c00015 	stw	r3,0(r2)
      rc = 0;
    40ac:	e03fff15 	stw	zero,-4(fp)
    break;
    40b0:	00000206 	br	40bc <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
    40b4:	0001883a 	nop
    40b8:	00000106 	br	40c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
    40bc:	0001883a 	nop
  }

  return rc;
    40c0:	e0bfff17 	ldw	r2,-4(fp)
}
    40c4:	e037883a 	mov	sp,fp
    40c8:	df000017 	ldw	fp,0(sp)
    40cc:	dec00104 	addi	sp,sp,4
    40d0:	f800283a 	ret

000040d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    40d4:	defff304 	addi	sp,sp,-52
    40d8:	dfc00c15 	stw	ra,48(sp)
    40dc:	df000b15 	stw	fp,44(sp)
    40e0:	df000b04 	addi	fp,sp,44
    40e4:	e13ff815 	stw	r4,-32(fp)
    40e8:	e17ff715 	stw	r5,-36(fp)
    40ec:	e1bff615 	stw	r6,-40(fp)
    40f0:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
    40f4:	e0bff717 	ldw	r2,-36(fp)
    40f8:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    40fc:	00004706 	br	421c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    4100:	e0bff817 	ldw	r2,-32(fp)
    4104:	10800a17 	ldw	r2,40(r2)
    4108:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
    410c:	e0bff817 	ldw	r2,-32(fp)
    4110:	10800b17 	ldw	r2,44(r2)
    4114:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
    4118:	e0fffd17 	ldw	r3,-12(fp)
    411c:	e0bffc17 	ldw	r2,-16(fp)
    4120:	18800536 	bltu	r3,r2,4138 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    4124:	e0fffd17 	ldw	r3,-12(fp)
    4128:	e0bffc17 	ldw	r2,-16(fp)
    412c:	1885c83a 	sub	r2,r3,r2
    4130:	e0bffe15 	stw	r2,-8(fp)
    4134:	00000406 	br	4148 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    4138:	00c20004 	movi	r3,2048
    413c:	e0bffc17 	ldw	r2,-16(fp)
    4140:	1885c83a 	sub	r2,r3,r2
    4144:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    4148:	e0bffe17 	ldw	r2,-8(fp)
    414c:	10001e26 	beq	r2,zero,41c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    4150:	e0fff617 	ldw	r3,-40(fp)
    4154:	e0bffe17 	ldw	r2,-8(fp)
    4158:	1880022e 	bgeu	r3,r2,4164 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    415c:	e0bff617 	ldw	r2,-40(fp)
    4160:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    4164:	e0bff817 	ldw	r2,-32(fp)
    4168:	10c00e04 	addi	r3,r2,56
    416c:	e0bffc17 	ldw	r2,-16(fp)
    4170:	1885883a 	add	r2,r3,r2
    4174:	e1bffe17 	ldw	r6,-8(fp)
    4178:	100b883a 	mov	r5,r2
    417c:	e13fff17 	ldw	r4,-4(fp)
    4180:	00016640 	call	1664 <memcpy>
      ptr   += n;
    4184:	e0ffff17 	ldw	r3,-4(fp)
    4188:	e0bffe17 	ldw	r2,-8(fp)
    418c:	1885883a 	add	r2,r3,r2
    4190:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
    4194:	e0fff617 	ldw	r3,-40(fp)
    4198:	e0bffe17 	ldw	r2,-8(fp)
    419c:	1885c83a 	sub	r2,r3,r2
    41a0:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    41a4:	e0fffc17 	ldw	r3,-16(fp)
    41a8:	e0bffe17 	ldw	r2,-8(fp)
    41ac:	1885883a 	add	r2,r3,r2
    41b0:	10c1ffcc 	andi	r3,r2,2047
    41b4:	e0bff817 	ldw	r2,-32(fp)
    41b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    41bc:	e0bff617 	ldw	r2,-40(fp)
    41c0:	00bfcf16 	blt	zero,r2,4100 <altera_avalon_jtag_uart_read+0x2c>
    41c4:	00000106 	br	41cc <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
    41c8:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
    41cc:	e0ffff17 	ldw	r3,-4(fp)
    41d0:	e0bff717 	ldw	r2,-36(fp)
    41d4:	1880141e 	bne	r3,r2,4228 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    41d8:	e0bff517 	ldw	r2,-44(fp)
    41dc:	1090000c 	andi	r2,r2,16384
    41e0:	1000131e 	bne	r2,zero,4230 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    41e4:	0001883a 	nop
    41e8:	e0bff817 	ldw	r2,-32(fp)
    41ec:	10800a17 	ldw	r2,40(r2)
    41f0:	e0fffd17 	ldw	r3,-12(fp)
    41f4:	1880051e 	bne	r3,r2,420c <altera_avalon_jtag_uart_read+0x138>
    41f8:	e0bff817 	ldw	r2,-32(fp)
    41fc:	10c00917 	ldw	r3,36(r2)
    4200:	e0bff817 	ldw	r2,-32(fp)
    4204:	10800117 	ldw	r2,4(r2)
    4208:	18bff736 	bltu	r3,r2,41e8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    420c:	e0bff817 	ldw	r2,-32(fp)
    4210:	10800a17 	ldw	r2,40(r2)
    4214:	e0fffd17 	ldw	r3,-12(fp)
    4218:	18800726 	beq	r3,r2,4238 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
    421c:	e0bff617 	ldw	r2,-40(fp)
    4220:	00bfb716 	blt	zero,r2,4100 <altera_avalon_jtag_uart_read+0x2c>
    4224:	00000506 	br	423c <altera_avalon_jtag_uart_read+0x168>
      break;
    4228:	0001883a 	nop
    422c:	00000306 	br	423c <altera_avalon_jtag_uart_read+0x168>
      break;
    4230:	0001883a 	nop
    4234:	00000106 	br	423c <altera_avalon_jtag_uart_read+0x168>
      break;
    4238:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    423c:	e0ffff17 	ldw	r3,-4(fp)
    4240:	e0bff717 	ldw	r2,-36(fp)
    4244:	18801826 	beq	r3,r2,42a8 <altera_avalon_jtag_uart_read+0x1d4>
  NIOS2_READ_STATUS (context);
    4248:	0005303a 	rdctl	r2,status
    424c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4250:	e0fff917 	ldw	r3,-28(fp)
    4254:	00bfff84 	movi	r2,-2
    4258:	1884703a 	and	r2,r3,r2
    425c:	1001703a 	wrctl	status,r2
  return context;
    4260:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    4264:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    4268:	e0bff817 	ldw	r2,-32(fp)
    426c:	10800817 	ldw	r2,32(r2)
    4270:	10c00054 	ori	r3,r2,1
    4274:	e0bff817 	ldw	r2,-32(fp)
    4278:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    427c:	e0bff817 	ldw	r2,-32(fp)
    4280:	10800017 	ldw	r2,0(r2)
    4284:	10800104 	addi	r2,r2,4
    4288:	1007883a 	mov	r3,r2
    428c:	e0bff817 	ldw	r2,-32(fp)
    4290:	10800817 	ldw	r2,32(r2)
    4294:	18800035 	stwio	r2,0(r3)
    4298:	e0bffb17 	ldw	r2,-20(fp)
    429c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    42a0:	e0bffa17 	ldw	r2,-24(fp)
    42a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    42a8:	e0ffff17 	ldw	r3,-4(fp)
    42ac:	e0bff717 	ldw	r2,-36(fp)
    42b0:	18800426 	beq	r3,r2,42c4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    42b4:	e0ffff17 	ldw	r3,-4(fp)
    42b8:	e0bff717 	ldw	r2,-36(fp)
    42bc:	1885c83a 	sub	r2,r3,r2
    42c0:	00000606 	br	42dc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    42c4:	e0bff517 	ldw	r2,-44(fp)
    42c8:	1090000c 	andi	r2,r2,16384
    42cc:	10000226 	beq	r2,zero,42d8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    42d0:	00bffd44 	movi	r2,-11
    42d4:	00000106 	br	42dc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    42d8:	00bffec4 	movi	r2,-5
}
    42dc:	e037883a 	mov	sp,fp
    42e0:	dfc00117 	ldw	ra,4(sp)
    42e4:	df000017 	ldw	fp,0(sp)
    42e8:	dec00204 	addi	sp,sp,8
    42ec:	f800283a 	ret

000042f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    42f0:	defff304 	addi	sp,sp,-52
    42f4:	dfc00c15 	stw	ra,48(sp)
    42f8:	df000b15 	stw	fp,44(sp)
    42fc:	df000b04 	addi	fp,sp,44
    4300:	e13ff815 	stw	r4,-32(fp)
    4304:	e17ff715 	stw	r5,-36(fp)
    4308:	e1bff615 	stw	r6,-40(fp)
    430c:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    4310:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4314:	e0bff717 	ldw	r2,-36(fp)
    4318:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    431c:	00003706 	br	43fc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    4320:	e0bff817 	ldw	r2,-32(fp)
    4324:	10800c17 	ldw	r2,48(r2)
    4328:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
    432c:	e0bff817 	ldw	r2,-32(fp)
    4330:	10800d17 	ldw	r2,52(r2)
    4334:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
    4338:	e0fffc17 	ldw	r3,-16(fp)
    433c:	e0bfff17 	ldw	r2,-4(fp)
    4340:	1880062e 	bgeu	r3,r2,435c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    4344:	e0ffff17 	ldw	r3,-4(fp)
    4348:	e0bffc17 	ldw	r2,-16(fp)
    434c:	1885c83a 	sub	r2,r3,r2
    4350:	10bfffc4 	addi	r2,r2,-1
    4354:	e0bffe15 	stw	r2,-8(fp)
    4358:	00000b06 	br	4388 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    435c:	e0bfff17 	ldw	r2,-4(fp)
    4360:	10000526 	beq	r2,zero,4378 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    4364:	00c20004 	movi	r3,2048
    4368:	e0bffc17 	ldw	r2,-16(fp)
    436c:	1885c83a 	sub	r2,r3,r2
    4370:	e0bffe15 	stw	r2,-8(fp)
    4374:	00000406 	br	4388 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4378:	00c1ffc4 	movi	r3,2047
    437c:	e0bffc17 	ldw	r2,-16(fp)
    4380:	1885c83a 	sub	r2,r3,r2
    4384:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
    4388:	e0bffe17 	ldw	r2,-8(fp)
    438c:	10001e26 	beq	r2,zero,4408 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    4390:	e0fff617 	ldw	r3,-40(fp)
    4394:	e0bffe17 	ldw	r2,-8(fp)
    4398:	1880022e 	bgeu	r3,r2,43a4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    439c:	e0bff617 	ldw	r2,-40(fp)
    43a0:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    43a4:	e0bff817 	ldw	r2,-32(fp)
    43a8:	10c20e04 	addi	r3,r2,2104
    43ac:	e0bffc17 	ldw	r2,-16(fp)
    43b0:	1885883a 	add	r2,r3,r2
    43b4:	e1bffe17 	ldw	r6,-8(fp)
    43b8:	e17ff717 	ldw	r5,-36(fp)
    43bc:	1009883a 	mov	r4,r2
    43c0:	00016640 	call	1664 <memcpy>
      ptr   += n;
    43c4:	e0fff717 	ldw	r3,-36(fp)
    43c8:	e0bffe17 	ldw	r2,-8(fp)
    43cc:	1885883a 	add	r2,r3,r2
    43d0:	e0bff715 	stw	r2,-36(fp)
      count -= n;
    43d4:	e0fff617 	ldw	r3,-40(fp)
    43d8:	e0bffe17 	ldw	r2,-8(fp)
    43dc:	1885c83a 	sub	r2,r3,r2
    43e0:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    43e4:	e0fffc17 	ldw	r3,-16(fp)
    43e8:	e0bffe17 	ldw	r2,-8(fp)
    43ec:	1885883a 	add	r2,r3,r2
    43f0:	10c1ffcc 	andi	r3,r2,2047
    43f4:	e0bff817 	ldw	r2,-32(fp)
    43f8:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
    43fc:	e0bff617 	ldw	r2,-40(fp)
    4400:	00bfc716 	blt	zero,r2,4320 <altera_avalon_jtag_uart_write+0x30>
    4404:	00000106 	br	440c <altera_avalon_jtag_uart_write+0x11c>
        break;
    4408:	0001883a 	nop
  NIOS2_READ_STATUS (context);
    440c:	0005303a 	rdctl	r2,status
    4410:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4414:	e0fff917 	ldw	r3,-28(fp)
    4418:	00bfff84 	movi	r2,-2
    441c:	1884703a 	and	r2,r3,r2
    4420:	1001703a 	wrctl	status,r2
  return context;
    4424:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4428:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    442c:	e0bff817 	ldw	r2,-32(fp)
    4430:	10800817 	ldw	r2,32(r2)
    4434:	10c00094 	ori	r3,r2,2
    4438:	e0bff817 	ldw	r2,-32(fp)
    443c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    4440:	e0bff817 	ldw	r2,-32(fp)
    4444:	10800017 	ldw	r2,0(r2)
    4448:	10800104 	addi	r2,r2,4
    444c:	1007883a 	mov	r3,r2
    4450:	e0bff817 	ldw	r2,-32(fp)
    4454:	10800817 	ldw	r2,32(r2)
    4458:	18800035 	stwio	r2,0(r3)
    445c:	e0bffb17 	ldw	r2,-20(fp)
    4460:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
    4464:	e0bffa17 	ldw	r2,-24(fp)
    4468:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    446c:	e0bff617 	ldw	r2,-40(fp)
    4470:	0080100e 	bge	zero,r2,44b4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    4474:	e0bff517 	ldw	r2,-44(fp)
    4478:	1090000c 	andi	r2,r2,16384
    447c:	1000101e 	bne	r2,zero,44c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4480:	0001883a 	nop
    4484:	e0bff817 	ldw	r2,-32(fp)
    4488:	10800d17 	ldw	r2,52(r2)
    448c:	e0ffff17 	ldw	r3,-4(fp)
    4490:	1880051e 	bne	r3,r2,44a8 <altera_avalon_jtag_uart_write+0x1b8>
    4494:	e0bff817 	ldw	r2,-32(fp)
    4498:	10c00917 	ldw	r3,36(r2)
    449c:	e0bff817 	ldw	r2,-32(fp)
    44a0:	10800117 	ldw	r2,4(r2)
    44a4:	18bff736 	bltu	r3,r2,4484 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    44a8:	e0bff817 	ldw	r2,-32(fp)
    44ac:	10800917 	ldw	r2,36(r2)
    44b0:	1000051e 	bne	r2,zero,44c8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    44b4:	e0bff617 	ldw	r2,-40(fp)
    44b8:	00bfd016 	blt	zero,r2,43fc <altera_avalon_jtag_uart_write+0x10c>
    44bc:	00000306 	br	44cc <altera_avalon_jtag_uart_write+0x1dc>
        break;
    44c0:	0001883a 	nop
    44c4:	00000106 	br	44cc <altera_avalon_jtag_uart_write+0x1dc>
         break;
    44c8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    44cc:	e0fff717 	ldw	r3,-36(fp)
    44d0:	e0bffd17 	ldw	r2,-12(fp)
    44d4:	18800426 	beq	r3,r2,44e8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    44d8:	e0fff717 	ldw	r3,-36(fp)
    44dc:	e0bffd17 	ldw	r2,-12(fp)
    44e0:	1885c83a 	sub	r2,r3,r2
    44e4:	00000606 	br	4500 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    44e8:	e0bff517 	ldw	r2,-44(fp)
    44ec:	1090000c 	andi	r2,r2,16384
    44f0:	10000226 	beq	r2,zero,44fc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    44f4:	00bffd44 	movi	r2,-11
    44f8:	00000106 	br	4500 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    44fc:	00bffec4 	movi	r2,-5
}
    4500:	e037883a 	mov	sp,fp
    4504:	dfc00117 	ldw	ra,4(sp)
    4508:	df000017 	ldw	fp,0(sp)
    450c:	dec00204 	addi	sp,sp,8
    4510:	f800283a 	ret

00004514 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    4514:	defff504 	addi	sp,sp,-44
    4518:	df000a15 	stw	fp,40(sp)
    451c:	df000a04 	addi	fp,sp,40
    4520:	e13ff915 	stw	r4,-28(fp)
    4524:	e17ff815 	stw	r5,-32(fp)
    4528:	e1bff715 	stw	r6,-36(fp)
    452c:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    4530:	e03fff15 	stw	zero,-4(fp)
    4534:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
    4538:	10003c26 	beq	r2,zero,462c <alt_alarm_start+0x118>
  {
    if (alarm)
    453c:	e0bff917 	ldw	r2,-28(fp)
    4540:	10003826 	beq	r2,zero,4624 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    4544:	e0bff917 	ldw	r2,-28(fp)
    4548:	e0fff717 	ldw	r3,-36(fp)
    454c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    4550:	e0bff917 	ldw	r2,-28(fp)
    4554:	e0fff617 	ldw	r3,-40(fp)
    4558:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
    455c:	0005303a 	rdctl	r2,status
    4560:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4564:	e0fffd17 	ldw	r3,-12(fp)
    4568:	00bfff84 	movi	r2,-2
    456c:	1884703a 	and	r2,r3,r2
    4570:	1001703a 	wrctl	status,r2
  return context;
    4574:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
    4578:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    457c:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
    4580:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    4584:	e0fff817 	ldw	r3,-32(fp)
    4588:	e0bfff17 	ldw	r2,-4(fp)
    458c:	1885883a 	add	r2,r3,r2
    4590:	10c00044 	addi	r3,r2,1
    4594:	e0bff917 	ldw	r2,-28(fp)
    4598:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    459c:	e0bff917 	ldw	r2,-28(fp)
    45a0:	10c00217 	ldw	r3,8(r2)
    45a4:	e0bfff17 	ldw	r2,-4(fp)
    45a8:	1880042e 	bgeu	r3,r2,45bc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    45ac:	e0bff917 	ldw	r2,-28(fp)
    45b0:	00c00044 	movi	r3,1
    45b4:	10c00405 	stb	r3,16(r2)
    45b8:	00000206 	br	45c4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    45bc:	e0bff917 	ldw	r2,-28(fp)
    45c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    45c4:	e0bff917 	ldw	r2,-28(fp)
    45c8:	d0e00c04 	addi	r3,gp,-32720
    45cc:	e0fffb15 	stw	r3,-20(fp)
    45d0:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    45d4:	e0bffa17 	ldw	r2,-24(fp)
    45d8:	e0fffb17 	ldw	r3,-20(fp)
    45dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    45e0:	e0bffb17 	ldw	r2,-20(fp)
    45e4:	10c00017 	ldw	r3,0(r2)
    45e8:	e0bffa17 	ldw	r2,-24(fp)
    45ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    45f0:	e0bffb17 	ldw	r2,-20(fp)
    45f4:	10800017 	ldw	r2,0(r2)
    45f8:	e0fffa17 	ldw	r3,-24(fp)
    45fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4600:	e0bffb17 	ldw	r2,-20(fp)
    4604:	e0fffa17 	ldw	r3,-24(fp)
    4608:	10c00015 	stw	r3,0(r2)
    460c:	e0bffe17 	ldw	r2,-8(fp)
    4610:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4614:	e0bffc17 	ldw	r2,-16(fp)
    4618:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    461c:	0005883a 	mov	r2,zero
    4620:	00000306 	br	4630 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    4624:	00bffa84 	movi	r2,-22
    4628:	00000106 	br	4630 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    462c:	00bfde84 	movi	r2,-134
  }
}
    4630:	e037883a 	mov	sp,fp
    4634:	df000017 	ldw	fp,0(sp)
    4638:	dec00104 	addi	sp,sp,4
    463c:	f800283a 	ret

00004640 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4640:	deffff04 	addi	sp,sp,-4
    4644:	df000015 	stw	fp,0(sp)
    4648:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    464c:	0001883a 	nop
    4650:	e037883a 	mov	sp,fp
    4654:	df000017 	ldw	fp,0(sp)
    4658:	dec00104 	addi	sp,sp,4
    465c:	f800283a 	ret

00004660 <alt_get_errno>:
{
    4660:	defffe04 	addi	sp,sp,-8
    4664:	dfc00115 	stw	ra,4(sp)
    4668:	df000015 	stw	fp,0(sp)
    466c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4670:	d0a00917 	ldw	r2,-32732(gp)
    4674:	10000326 	beq	r2,zero,4684 <alt_get_errno+0x24>
    4678:	d0a00917 	ldw	r2,-32732(gp)
    467c:	103ee83a 	callr	r2
    4680:	00000106 	br	4688 <alt_get_errno+0x28>
    4684:	d0a6ac04 	addi	r2,gp,-25936
}
    4688:	e037883a 	mov	sp,fp
    468c:	dfc00117 	ldw	ra,4(sp)
    4690:	df000017 	ldw	fp,0(sp)
    4694:	dec00204 	addi	sp,sp,8
    4698:	f800283a 	ret

0000469c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    469c:	defffa04 	addi	sp,sp,-24
    46a0:	dfc00515 	stw	ra,20(sp)
    46a4:	df000415 	stw	fp,16(sp)
    46a8:	df000404 	addi	fp,sp,16
    46ac:	e13ffd15 	stw	r4,-12(fp)
    46b0:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    46b4:	e0bffd17 	ldw	r2,-12(fp)
    46b8:	10000326 	beq	r2,zero,46c8 <alt_dev_llist_insert+0x2c>
    46bc:	e0bffd17 	ldw	r2,-12(fp)
    46c0:	10800217 	ldw	r2,8(r2)
    46c4:	1000061e 	bne	r2,zero,46e0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    46c8:	00046600 	call	4660 <alt_get_errno>
    46cc:	1007883a 	mov	r3,r2
    46d0:	00800584 	movi	r2,22
    46d4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    46d8:	00bffa84 	movi	r2,-22
    46dc:	00001306 	br	472c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    46e0:	e0bffd17 	ldw	r2,-12(fp)
    46e4:	e0fffc17 	ldw	r3,-16(fp)
    46e8:	e0ffff15 	stw	r3,-4(fp)
    46ec:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
    46f0:	e0bffe17 	ldw	r2,-8(fp)
    46f4:	e0ffff17 	ldw	r3,-4(fp)
    46f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    46fc:	e0bfff17 	ldw	r2,-4(fp)
    4700:	10c00017 	ldw	r3,0(r2)
    4704:	e0bffe17 	ldw	r2,-8(fp)
    4708:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
    470c:	e0bfff17 	ldw	r2,-4(fp)
    4710:	10800017 	ldw	r2,0(r2)
    4714:	e0fffe17 	ldw	r3,-8(fp)
    4718:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    471c:	e0bfff17 	ldw	r2,-4(fp)
    4720:	e0fffe17 	ldw	r3,-8(fp)
    4724:	10c00015 	stw	r3,0(r2)

  return 0;  
    4728:	0005883a 	mov	r2,zero
}
    472c:	e037883a 	mov	sp,fp
    4730:	dfc00117 	ldw	ra,4(sp)
    4734:	df000017 	ldw	fp,0(sp)
    4738:	dec00204 	addi	sp,sp,8
    473c:	f800283a 	ret

00004740 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    4740:	defffd04 	addi	sp,sp,-12
    4744:	dfc00215 	stw	ra,8(sp)
    4748:	df000115 	stw	fp,4(sp)
    474c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4750:	00800034 	movhi	r2,0
    4754:	10957604 	addi	r2,r2,21976
    4758:	e0bfff15 	stw	r2,-4(fp)
    475c:	00000606 	br	4778 <_do_ctors+0x38>
        (*ctor) (); 
    4760:	e0bfff17 	ldw	r2,-4(fp)
    4764:	10800017 	ldw	r2,0(r2)
    4768:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    476c:	e0bfff17 	ldw	r2,-4(fp)
    4770:	10bfff04 	addi	r2,r2,-4
    4774:	e0bfff15 	stw	r2,-4(fp)
    4778:	e0ffff17 	ldw	r3,-4(fp)
    477c:	00800034 	movhi	r2,0
    4780:	10957704 	addi	r2,r2,21980
    4784:	18bff62e 	bgeu	r3,r2,4760 <_do_ctors+0x20>
}
    4788:	0001883a 	nop
    478c:	e037883a 	mov	sp,fp
    4790:	dfc00117 	ldw	ra,4(sp)
    4794:	df000017 	ldw	fp,0(sp)
    4798:	dec00204 	addi	sp,sp,8
    479c:	f800283a 	ret

000047a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    47a0:	defffd04 	addi	sp,sp,-12
    47a4:	dfc00215 	stw	ra,8(sp)
    47a8:	df000115 	stw	fp,4(sp)
    47ac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    47b0:	00800034 	movhi	r2,0
    47b4:	10957604 	addi	r2,r2,21976
    47b8:	e0bfff15 	stw	r2,-4(fp)
    47bc:	00000606 	br	47d8 <_do_dtors+0x38>
        (*dtor) (); 
    47c0:	e0bfff17 	ldw	r2,-4(fp)
    47c4:	10800017 	ldw	r2,0(r2)
    47c8:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    47cc:	e0bfff17 	ldw	r2,-4(fp)
    47d0:	10bfff04 	addi	r2,r2,-4
    47d4:	e0bfff15 	stw	r2,-4(fp)
    47d8:	e0ffff17 	ldw	r3,-4(fp)
    47dc:	00800034 	movhi	r2,0
    47e0:	10957704 	addi	r2,r2,21980
    47e4:	18bff62e 	bgeu	r3,r2,47c0 <_do_dtors+0x20>
}
    47e8:	0001883a 	nop
    47ec:	e037883a 	mov	sp,fp
    47f0:	dfc00117 	ldw	ra,4(sp)
    47f4:	df000017 	ldw	fp,0(sp)
    47f8:	dec00204 	addi	sp,sp,8
    47fc:	f800283a 	ret

00004800 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4800:	deffff04 	addi	sp,sp,-4
    4804:	df000015 	stw	fp,0(sp)
    4808:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    480c:	0001883a 	nop
    4810:	e037883a 	mov	sp,fp
    4814:	df000017 	ldw	fp,0(sp)
    4818:	dec00104 	addi	sp,sp,4
    481c:	f800283a 	ret

00004820 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4820:	defff904 	addi	sp,sp,-28
    4824:	dfc00615 	stw	ra,24(sp)
    4828:	df000515 	stw	fp,20(sp)
    482c:	df000504 	addi	fp,sp,20
    4830:	e13fff15 	stw	r4,-4(fp)
    4834:	e17ffe15 	stw	r5,-8(fp)
    4838:	e1bffd15 	stw	r6,-12(fp)
    483c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    4840:	e0800217 	ldw	r2,8(fp)
    4844:	d8800015 	stw	r2,0(sp)
    4848:	e1fffc17 	ldw	r7,-16(fp)
    484c:	e1bffd17 	ldw	r6,-12(fp)
    4850:	e17ffe17 	ldw	r5,-8(fp)
    4854:	e13fff17 	ldw	r4,-4(fp)
    4858:	00049d00 	call	49d0 <alt_iic_isr_register>
}  
    485c:	e037883a 	mov	sp,fp
    4860:	dfc00117 	ldw	ra,4(sp)
    4864:	df000017 	ldw	fp,0(sp)
    4868:	dec00204 	addi	sp,sp,8
    486c:	f800283a 	ret

00004870 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    4870:	defff904 	addi	sp,sp,-28
    4874:	df000615 	stw	fp,24(sp)
    4878:	df000604 	addi	fp,sp,24
    487c:	e13ffb15 	stw	r4,-20(fp)
    4880:	e17ffa15 	stw	r5,-24(fp)
    4884:	e0bffa17 	ldw	r2,-24(fp)
    4888:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    488c:	0005303a 	rdctl	r2,status
    4890:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4894:	e0fffe17 	ldw	r3,-8(fp)
    4898:	00bfff84 	movi	r2,-2
    489c:	1884703a 	and	r2,r3,r2
    48a0:	1001703a 	wrctl	status,r2
  return context;
    48a4:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    48a8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    48ac:	00c00044 	movi	r3,1
    48b0:	e0bfff17 	ldw	r2,-4(fp)
    48b4:	1884983a 	sll	r2,r3,r2
    48b8:	1007883a 	mov	r3,r2
    48bc:	d0a6b017 	ldw	r2,-25920(gp)
    48c0:	1884b03a 	or	r2,r3,r2
    48c4:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    48c8:	d0a6b017 	ldw	r2,-25920(gp)
    48cc:	100170fa 	wrctl	ienable,r2
    48d0:	e0bffd17 	ldw	r2,-12(fp)
    48d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    48d8:	e0bffc17 	ldw	r2,-16(fp)
    48dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    48e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    48e4:	0001883a 	nop
}
    48e8:	e037883a 	mov	sp,fp
    48ec:	df000017 	ldw	fp,0(sp)
    48f0:	dec00104 	addi	sp,sp,4
    48f4:	f800283a 	ret

000048f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    48f8:	defff904 	addi	sp,sp,-28
    48fc:	df000615 	stw	fp,24(sp)
    4900:	df000604 	addi	fp,sp,24
    4904:	e13ffb15 	stw	r4,-20(fp)
    4908:	e17ffa15 	stw	r5,-24(fp)
    490c:	e0bffa17 	ldw	r2,-24(fp)
    4910:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    4914:	0005303a 	rdctl	r2,status
    4918:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    491c:	e0fffe17 	ldw	r3,-8(fp)
    4920:	00bfff84 	movi	r2,-2
    4924:	1884703a 	and	r2,r3,r2
    4928:	1001703a 	wrctl	status,r2
  return context;
    492c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
    4930:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
    4934:	00c00044 	movi	r3,1
    4938:	e0bfff17 	ldw	r2,-4(fp)
    493c:	1884983a 	sll	r2,r3,r2
    4940:	0084303a 	nor	r2,zero,r2
    4944:	1007883a 	mov	r3,r2
    4948:	d0a6b017 	ldw	r2,-25920(gp)
    494c:	1884703a 	and	r2,r3,r2
    4950:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4954:	d0a6b017 	ldw	r2,-25920(gp)
    4958:	100170fa 	wrctl	ienable,r2
    495c:	e0bffd17 	ldw	r2,-12(fp)
    4960:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    4964:	e0bffc17 	ldw	r2,-16(fp)
    4968:	1001703a 	wrctl	status,r2
  return 0;
    496c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    4970:	0001883a 	nop
}
    4974:	e037883a 	mov	sp,fp
    4978:	df000017 	ldw	fp,0(sp)
    497c:	dec00104 	addi	sp,sp,4
    4980:	f800283a 	ret

00004984 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    4984:	defffc04 	addi	sp,sp,-16
    4988:	df000315 	stw	fp,12(sp)
    498c:	df000304 	addi	fp,sp,12
    4990:	e13ffe15 	stw	r4,-8(fp)
    4994:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    4998:	000530fa 	rdctl	r2,ienable
    499c:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    49a0:	00c00044 	movi	r3,1
    49a4:	e0bffd17 	ldw	r2,-12(fp)
    49a8:	1884983a 	sll	r2,r3,r2
    49ac:	1007883a 	mov	r3,r2
    49b0:	e0bfff17 	ldw	r2,-4(fp)
    49b4:	1884703a 	and	r2,r3,r2
    49b8:	1004c03a 	cmpne	r2,r2,zero
    49bc:	10803fcc 	andi	r2,r2,255
}
    49c0:	e037883a 	mov	sp,fp
    49c4:	df000017 	ldw	fp,0(sp)
    49c8:	dec00104 	addi	sp,sp,4
    49cc:	f800283a 	ret

000049d0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    49d0:	defff504 	addi	sp,sp,-44
    49d4:	dfc00a15 	stw	ra,40(sp)
    49d8:	df000915 	stw	fp,36(sp)
    49dc:	df000904 	addi	fp,sp,36
    49e0:	e13ffa15 	stw	r4,-24(fp)
    49e4:	e17ff915 	stw	r5,-28(fp)
    49e8:	e1bff815 	stw	r6,-32(fp)
    49ec:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
    49f0:	00bffa84 	movi	r2,-22
    49f4:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    49f8:	e0bff917 	ldw	r2,-28(fp)
    49fc:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4a00:	e0bffe17 	ldw	r2,-8(fp)
    4a04:	10800808 	cmpgei	r2,r2,32
    4a08:	1000241e 	bne	r2,zero,4a9c <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
    4a0c:	0005303a 	rdctl	r2,status
    4a10:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a14:	e0fffc17 	ldw	r3,-16(fp)
    4a18:	00bfff84 	movi	r2,-2
    4a1c:	1884703a 	and	r2,r3,r2
    4a20:	1001703a 	wrctl	status,r2
  return context;
    4a24:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    4a28:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
    4a2c:	e0bffe17 	ldw	r2,-8(fp)
    4a30:	100890fa 	slli	r4,r2,3
    4a34:	e0fff817 	ldw	r3,-32(fp)
    4a38:	00800074 	movhi	r2,1
    4a3c:	2085883a 	add	r2,r4,r2
    4a40:	10e2d515 	stw	r3,-29868(r2)
    alt_irq[id].context = isr_context;
    4a44:	e0bffe17 	ldw	r2,-8(fp)
    4a48:	100890fa 	slli	r4,r2,3
    4a4c:	e0fff717 	ldw	r3,-36(fp)
    4a50:	00800074 	movhi	r2,1
    4a54:	2085883a 	add	r2,r4,r2
    4a58:	10e2d615 	stw	r3,-29864(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    4a5c:	e0bff817 	ldw	r2,-32(fp)
    4a60:	10000526 	beq	r2,zero,4a78 <alt_iic_isr_register+0xa8>
    4a64:	e0bffe17 	ldw	r2,-8(fp)
    4a68:	100b883a 	mov	r5,r2
    4a6c:	e13ffa17 	ldw	r4,-24(fp)
    4a70:	00048700 	call	4870 <alt_ic_irq_enable>
    4a74:	00000406 	br	4a88 <alt_iic_isr_register+0xb8>
    4a78:	e0bffe17 	ldw	r2,-8(fp)
    4a7c:	100b883a 	mov	r5,r2
    4a80:	e13ffa17 	ldw	r4,-24(fp)
    4a84:	00048f80 	call	48f8 <alt_ic_irq_disable>
    4a88:	e0bfff15 	stw	r2,-4(fp)
    4a8c:	e0bffd17 	ldw	r2,-12(fp)
    4a90:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    4a94:	e0bffb17 	ldw	r2,-20(fp)
    4a98:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    4a9c:	e0bfff17 	ldw	r2,-4(fp)
}
    4aa0:	e037883a 	mov	sp,fp
    4aa4:	dfc00117 	ldw	ra,4(sp)
    4aa8:	df000017 	ldw	fp,0(sp)
    4aac:	dec00204 	addi	sp,sp,8
    4ab0:	f800283a 	ret

00004ab4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4ab4:	defff904 	addi	sp,sp,-28
    4ab8:	dfc00615 	stw	ra,24(sp)
    4abc:	df000515 	stw	fp,20(sp)
    4ac0:	df000504 	addi	fp,sp,20
    4ac4:	e13ffe15 	stw	r4,-8(fp)
    4ac8:	e17ffd15 	stw	r5,-12(fp)
    4acc:	e1bffc15 	stw	r6,-16(fp)
    4ad0:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    4ad4:	e1bffb17 	ldw	r6,-20(fp)
    4ad8:	e17ffc17 	ldw	r5,-16(fp)
    4adc:	e13ffd17 	ldw	r4,-12(fp)
    4ae0:	0004d1c0 	call	4d1c <open>
    4ae4:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    4ae8:	e0bfff17 	ldw	r2,-4(fp)
    4aec:	10002016 	blt	r2,zero,4b70 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
    4af0:	e0ffff17 	ldw	r3,-4(fp)
    4af4:	1805883a 	mov	r2,r3
    4af8:	1085883a 	add	r2,r2,r2
    4afc:	10c5883a 	add	r2,r2,r3
    4b00:	100490ba 	slli	r2,r2,2
    4b04:	00c00034 	movhi	r3,0
    4b08:	10c7883a 	add	r3,r2,r3
    4b0c:	18d79f17 	ldw	r3,24188(r3)
    4b10:	e0bffe17 	ldw	r2,-8(fp)
    4b14:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    4b18:	e0ffff17 	ldw	r3,-4(fp)
    4b1c:	1805883a 	mov	r2,r3
    4b20:	1085883a 	add	r2,r2,r2
    4b24:	10c5883a 	add	r2,r2,r3
    4b28:	100490ba 	slli	r2,r2,2
    4b2c:	00c00034 	movhi	r3,0
    4b30:	10c7883a 	add	r3,r2,r3
    4b34:	18d7a017 	ldw	r3,24192(r3)
    4b38:	e0bffe17 	ldw	r2,-8(fp)
    4b3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    4b40:	e0ffff17 	ldw	r3,-4(fp)
    4b44:	1805883a 	mov	r2,r3
    4b48:	1085883a 	add	r2,r2,r2
    4b4c:	10c5883a 	add	r2,r2,r3
    4b50:	100490ba 	slli	r2,r2,2
    4b54:	00c00034 	movhi	r3,0
    4b58:	10c7883a 	add	r3,r2,r3
    4b5c:	18d7a117 	ldw	r3,24196(r3)
    4b60:	e0bffe17 	ldw	r2,-8(fp)
    4b64:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    4b68:	e13fff17 	ldw	r4,-4(fp)
    4b6c:	000379c0 	call	379c <alt_release_fd>
  }
} 
    4b70:	0001883a 	nop
    4b74:	e037883a 	mov	sp,fp
    4b78:	dfc00117 	ldw	ra,4(sp)
    4b7c:	df000017 	ldw	fp,0(sp)
    4b80:	dec00204 	addi	sp,sp,8
    4b84:	f800283a 	ret

00004b88 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    4b88:	defffb04 	addi	sp,sp,-20
    4b8c:	dfc00415 	stw	ra,16(sp)
    4b90:	df000315 	stw	fp,12(sp)
    4b94:	df000304 	addi	fp,sp,12
    4b98:	e13fff15 	stw	r4,-4(fp)
    4b9c:	e17ffe15 	stw	r5,-8(fp)
    4ba0:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4ba4:	01c07fc4 	movi	r7,511
    4ba8:	01800044 	movi	r6,1
    4bac:	e17fff17 	ldw	r5,-4(fp)
    4bb0:	01000034 	movhi	r4,0
    4bb4:	2117a204 	addi	r4,r4,24200
    4bb8:	0004ab40 	call	4ab4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    4bbc:	01c07fc4 	movi	r7,511
    4bc0:	000d883a 	mov	r6,zero
    4bc4:	e17ffe17 	ldw	r5,-8(fp)
    4bc8:	01000034 	movhi	r4,0
    4bcc:	21179f04 	addi	r4,r4,24188
    4bd0:	0004ab40 	call	4ab4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4bd4:	01c07fc4 	movi	r7,511
    4bd8:	01800044 	movi	r6,1
    4bdc:	e17ffd17 	ldw	r5,-12(fp)
    4be0:	01000034 	movhi	r4,0
    4be4:	2117a504 	addi	r4,r4,24212
    4be8:	0004ab40 	call	4ab4 <alt_open_fd>
}  
    4bec:	0001883a 	nop
    4bf0:	e037883a 	mov	sp,fp
    4bf4:	dfc00117 	ldw	ra,4(sp)
    4bf8:	df000017 	ldw	fp,0(sp)
    4bfc:	dec00204 	addi	sp,sp,8
    4c00:	f800283a 	ret

00004c04 <alt_get_errno>:
{
    4c04:	defffe04 	addi	sp,sp,-8
    4c08:	dfc00115 	stw	ra,4(sp)
    4c0c:	df000015 	stw	fp,0(sp)
    4c10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4c14:	d0a00917 	ldw	r2,-32732(gp)
    4c18:	10000326 	beq	r2,zero,4c28 <alt_get_errno+0x24>
    4c1c:	d0a00917 	ldw	r2,-32732(gp)
    4c20:	103ee83a 	callr	r2
    4c24:	00000106 	br	4c2c <alt_get_errno+0x28>
    4c28:	d0a6ac04 	addi	r2,gp,-25936
}
    4c2c:	e037883a 	mov	sp,fp
    4c30:	dfc00117 	ldw	ra,4(sp)
    4c34:	df000017 	ldw	fp,0(sp)
    4c38:	dec00204 	addi	sp,sp,8
    4c3c:	f800283a 	ret

00004c40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    4c40:	defffd04 	addi	sp,sp,-12
    4c44:	df000215 	stw	fp,8(sp)
    4c48:	df000204 	addi	fp,sp,8
    4c4c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    4c50:	e0bffe17 	ldw	r2,-8(fp)
    4c54:	10800217 	ldw	r2,8(r2)
    4c58:	10d00034 	orhi	r3,r2,16384
    4c5c:	e0bffe17 	ldw	r2,-8(fp)
    4c60:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4c64:	e03fff15 	stw	zero,-4(fp)
    4c68:	00002306 	br	4cf8 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4c6c:	e0ffff17 	ldw	r3,-4(fp)
    4c70:	1805883a 	mov	r2,r3
    4c74:	1085883a 	add	r2,r2,r2
    4c78:	10c5883a 	add	r2,r2,r3
    4c7c:	100490ba 	slli	r2,r2,2
    4c80:	00c00034 	movhi	r3,0
    4c84:	10c7883a 	add	r3,r2,r3
    4c88:	18d79f17 	ldw	r3,24188(r3)
    4c8c:	e0bffe17 	ldw	r2,-8(fp)
    4c90:	10800017 	ldw	r2,0(r2)
    4c94:	1880151e 	bne	r3,r2,4cec <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4c98:	e0ffff17 	ldw	r3,-4(fp)
    4c9c:	1805883a 	mov	r2,r3
    4ca0:	1085883a 	add	r2,r2,r2
    4ca4:	10c5883a 	add	r2,r2,r3
    4ca8:	100490ba 	slli	r2,r2,2
    4cac:	00c00034 	movhi	r3,0
    4cb0:	10c7883a 	add	r3,r2,r3
    4cb4:	1897a117 	ldw	r2,24196(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
    4cb8:	10000c0e 	bge	r2,zero,4cec <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
    4cbc:	e0ffff17 	ldw	r3,-4(fp)
    4cc0:	1805883a 	mov	r2,r3
    4cc4:	1085883a 	add	r2,r2,r2
    4cc8:	10c5883a 	add	r2,r2,r3
    4ccc:	100490ba 	slli	r2,r2,2
    4cd0:	00c00034 	movhi	r3,0
    4cd4:	18d79f04 	addi	r3,r3,24188
    4cd8:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4cdc:	e0fffe17 	ldw	r3,-8(fp)
    4ce0:	18800226 	beq	r3,r2,4cec <alt_file_locked+0xac>
    {
      return -EACCES;
    4ce4:	00bffcc4 	movi	r2,-13
    4ce8:	00000806 	br	4d0c <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
    4cec:	e0bfff17 	ldw	r2,-4(fp)
    4cf0:	10800044 	addi	r2,r2,1
    4cf4:	e0bfff15 	stw	r2,-4(fp)
    4cf8:	d0a00817 	ldw	r2,-32736(gp)
    4cfc:	1007883a 	mov	r3,r2
    4d00:	e0bfff17 	ldw	r2,-4(fp)
    4d04:	18bfd92e 	bgeu	r3,r2,4c6c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4d08:	0005883a 	mov	r2,zero
}
    4d0c:	e037883a 	mov	sp,fp
    4d10:	df000017 	ldw	fp,0(sp)
    4d14:	dec00104 	addi	sp,sp,4
    4d18:	f800283a 	ret

00004d1c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    4d1c:	defff604 	addi	sp,sp,-40
    4d20:	dfc00915 	stw	ra,36(sp)
    4d24:	df000815 	stw	fp,32(sp)
    4d28:	df000804 	addi	fp,sp,32
    4d2c:	e13ffa15 	stw	r4,-24(fp)
    4d30:	e17ff915 	stw	r5,-28(fp)
    4d34:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    4d38:	00bfffc4 	movi	r2,-1
    4d3c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    4d40:	00bffb44 	movi	r2,-19
    4d44:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    4d48:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    4d4c:	d1600604 	addi	r5,gp,-32744
    4d50:	e13ffa17 	ldw	r4,-24(fp)
    4d54:	00050440 	call	5044 <alt_find_dev>
    4d58:	e0bfff15 	stw	r2,-4(fp)
    4d5c:	e0bfff17 	ldw	r2,-4(fp)
    4d60:	1000051e 	bne	r2,zero,4d78 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    4d64:	e13ffa17 	ldw	r4,-24(fp)
    4d68:	00050d40 	call	50d4 <alt_find_file>
    4d6c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    4d70:	00800044 	movi	r2,1
    4d74:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    4d78:	e0bfff17 	ldw	r2,-4(fp)
    4d7c:	10002c26 	beq	r2,zero,4e30 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    4d80:	e13fff17 	ldw	r4,-4(fp)
    4d84:	00051dc0 	call	51dc <alt_get_fd>
    4d88:	e0bffe15 	stw	r2,-8(fp)
    4d8c:	e0bffe17 	ldw	r2,-8(fp)
    4d90:	1000030e 	bge	r2,zero,4da0 <open+0x84>
    {
      status = index;
    4d94:	e0bffe17 	ldw	r2,-8(fp)
    4d98:	e0bffd15 	stw	r2,-12(fp)
    4d9c:	00002606 	br	4e38 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    4da0:	e0fffe17 	ldw	r3,-8(fp)
    4da4:	1805883a 	mov	r2,r3
    4da8:	1085883a 	add	r2,r2,r2
    4dac:	10c5883a 	add	r2,r2,r3
    4db0:	100490ba 	slli	r2,r2,2
    4db4:	00c00034 	movhi	r3,0
    4db8:	18d79f04 	addi	r3,r3,24188
    4dbc:	10c5883a 	add	r2,r2,r3
    4dc0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4dc4:	e0fff917 	ldw	r3,-28(fp)
    4dc8:	00900034 	movhi	r2,16384
    4dcc:	10bfffc4 	addi	r2,r2,-1
    4dd0:	1886703a 	and	r3,r3,r2
    4dd4:	e0bffb17 	ldw	r2,-20(fp)
    4dd8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4ddc:	e0bffc17 	ldw	r2,-16(fp)
    4de0:	1000051e 	bne	r2,zero,4df8 <open+0xdc>
    4de4:	e13ffb17 	ldw	r4,-20(fp)
    4de8:	0004c400 	call	4c40 <alt_file_locked>
    4dec:	e0bffd15 	stw	r2,-12(fp)
    4df0:	e0bffd17 	ldw	r2,-12(fp)
    4df4:	10001016 	blt	r2,zero,4e38 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    4df8:	e0bfff17 	ldw	r2,-4(fp)
    4dfc:	10800317 	ldw	r2,12(r2)
    4e00:	10000826 	beq	r2,zero,4e24 <open+0x108>
    4e04:	e0bfff17 	ldw	r2,-4(fp)
    4e08:	10800317 	ldw	r2,12(r2)
    4e0c:	e1fff817 	ldw	r7,-32(fp)
    4e10:	e1bff917 	ldw	r6,-28(fp)
    4e14:	e17ffa17 	ldw	r5,-24(fp)
    4e18:	e13ffb17 	ldw	r4,-20(fp)
    4e1c:	103ee83a 	callr	r2
    4e20:	00000106 	br	4e28 <open+0x10c>
    4e24:	0005883a 	mov	r2,zero
    4e28:	e0bffd15 	stw	r2,-12(fp)
    4e2c:	00000206 	br	4e38 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    4e30:	00bffb44 	movi	r2,-19
    4e34:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    4e38:	e0bffd17 	ldw	r2,-12(fp)
    4e3c:	1000090e 	bge	r2,zero,4e64 <open+0x148>
  {
    alt_release_fd (index);  
    4e40:	e13ffe17 	ldw	r4,-8(fp)
    4e44:	000379c0 	call	379c <alt_release_fd>
    ALT_ERRNO = -status;
    4e48:	0004c040 	call	4c04 <alt_get_errno>
    4e4c:	1007883a 	mov	r3,r2
    4e50:	e0bffd17 	ldw	r2,-12(fp)
    4e54:	0085c83a 	sub	r2,zero,r2
    4e58:	18800015 	stw	r2,0(r3)
    return -1;
    4e5c:	00bfffc4 	movi	r2,-1
    4e60:	00000106 	br	4e68 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    4e64:	e0bffe17 	ldw	r2,-8(fp)
}
    4e68:	e037883a 	mov	sp,fp
    4e6c:	dfc00117 	ldw	ra,4(sp)
    4e70:	df000017 	ldw	fp,0(sp)
    4e74:	dec00204 	addi	sp,sp,8
    4e78:	f800283a 	ret

00004e7c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    4e7c:	defffa04 	addi	sp,sp,-24
    4e80:	df000515 	stw	fp,20(sp)
    4e84:	df000504 	addi	fp,sp,20
    4e88:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    4e8c:	0005303a 	rdctl	r2,status
    4e90:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4e94:	e0fffc17 	ldw	r3,-16(fp)
    4e98:	00bfff84 	movi	r2,-2
    4e9c:	1884703a 	and	r2,r3,r2
    4ea0:	1001703a 	wrctl	status,r2
  return context;
    4ea4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    4ea8:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    4eac:	e0bffb17 	ldw	r2,-20(fp)
    4eb0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    4eb4:	e0bffd17 	ldw	r2,-12(fp)
    4eb8:	10800017 	ldw	r2,0(r2)
    4ebc:	e0fffd17 	ldw	r3,-12(fp)
    4ec0:	18c00117 	ldw	r3,4(r3)
    4ec4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    4ec8:	e0bffd17 	ldw	r2,-12(fp)
    4ecc:	10800117 	ldw	r2,4(r2)
    4ed0:	e0fffd17 	ldw	r3,-12(fp)
    4ed4:	18c00017 	ldw	r3,0(r3)
    4ed8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    4edc:	e0bffd17 	ldw	r2,-12(fp)
    4ee0:	e0fffd17 	ldw	r3,-12(fp)
    4ee4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    4ee8:	e0bffd17 	ldw	r2,-12(fp)
    4eec:	e0fffd17 	ldw	r3,-12(fp)
    4ef0:	10c00015 	stw	r3,0(r2)
    4ef4:	e0bfff17 	ldw	r2,-4(fp)
    4ef8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    4efc:	e0bffe17 	ldw	r2,-8(fp)
    4f00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    4f04:	0001883a 	nop
    4f08:	e037883a 	mov	sp,fp
    4f0c:	df000017 	ldw	fp,0(sp)
    4f10:	dec00104 	addi	sp,sp,4
    4f14:	f800283a 	ret

00004f18 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    4f18:	defffb04 	addi	sp,sp,-20
    4f1c:	dfc00415 	stw	ra,16(sp)
    4f20:	df000315 	stw	fp,12(sp)
    4f24:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    4f28:	d0a00c17 	ldw	r2,-32720(gp)
    4f2c:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    4f30:	d0a6b217 	ldw	r2,-25912(gp)
    4f34:	10800044 	addi	r2,r2,1
    4f38:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    4f3c:	00002e06 	br	4ff8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    4f40:	e0bfff17 	ldw	r2,-4(fp)
    4f44:	10800017 	ldw	r2,0(r2)
    4f48:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    4f4c:	e0bfff17 	ldw	r2,-4(fp)
    4f50:	10800403 	ldbu	r2,16(r2)
    4f54:	10803fcc 	andi	r2,r2,255
    4f58:	10000426 	beq	r2,zero,4f6c <alt_tick+0x54>
    4f5c:	d0a6b217 	ldw	r2,-25912(gp)
    4f60:	1000021e 	bne	r2,zero,4f6c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    4f64:	e0bfff17 	ldw	r2,-4(fp)
    4f68:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    4f6c:	e0bfff17 	ldw	r2,-4(fp)
    4f70:	10800217 	ldw	r2,8(r2)
    4f74:	d0e6b217 	ldw	r3,-25912(gp)
    4f78:	18801d36 	bltu	r3,r2,4ff0 <alt_tick+0xd8>
    4f7c:	e0bfff17 	ldw	r2,-4(fp)
    4f80:	10800403 	ldbu	r2,16(r2)
    4f84:	10803fcc 	andi	r2,r2,255
    4f88:	1000191e 	bne	r2,zero,4ff0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    4f8c:	e0bfff17 	ldw	r2,-4(fp)
    4f90:	10800317 	ldw	r2,12(r2)
    4f94:	e0ffff17 	ldw	r3,-4(fp)
    4f98:	18c00517 	ldw	r3,20(r3)
    4f9c:	1809883a 	mov	r4,r3
    4fa0:	103ee83a 	callr	r2
    4fa4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    4fa8:	e0bffd17 	ldw	r2,-12(fp)
    4fac:	1000031e 	bne	r2,zero,4fbc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    4fb0:	e13fff17 	ldw	r4,-4(fp)
    4fb4:	0004e7c0 	call	4e7c <alt_alarm_stop>
    4fb8:	00000d06 	br	4ff0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    4fbc:	e0bfff17 	ldw	r2,-4(fp)
    4fc0:	10c00217 	ldw	r3,8(r2)
    4fc4:	e0bffd17 	ldw	r2,-12(fp)
    4fc8:	1887883a 	add	r3,r3,r2
    4fcc:	e0bfff17 	ldw	r2,-4(fp)
    4fd0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    4fd4:	e0bfff17 	ldw	r2,-4(fp)
    4fd8:	10c00217 	ldw	r3,8(r2)
    4fdc:	d0a6b217 	ldw	r2,-25912(gp)
    4fe0:	1880032e 	bgeu	r3,r2,4ff0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    4fe4:	e0bfff17 	ldw	r2,-4(fp)
    4fe8:	00c00044 	movi	r3,1
    4fec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    4ff0:	e0bffe17 	ldw	r2,-8(fp)
    4ff4:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    4ff8:	e0ffff17 	ldw	r3,-4(fp)
    4ffc:	d0a00c04 	addi	r2,gp,-32720
    5000:	18bfcf1e 	bne	r3,r2,4f40 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    5004:	0001883a 	nop
}
    5008:	0001883a 	nop
    500c:	e037883a 	mov	sp,fp
    5010:	dfc00117 	ldw	ra,4(sp)
    5014:	df000017 	ldw	fp,0(sp)
    5018:	dec00204 	addi	sp,sp,8
    501c:	f800283a 	ret

00005020 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    5020:	deffff04 	addi	sp,sp,-4
    5024:	df000015 	stw	fp,0(sp)
    5028:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    502c:	000170fa 	wrctl	ienable,zero
}
    5030:	0001883a 	nop
    5034:	e037883a 	mov	sp,fp
    5038:	df000017 	ldw	fp,0(sp)
    503c:	dec00104 	addi	sp,sp,4
    5040:	f800283a 	ret

00005044 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5044:	defffa04 	addi	sp,sp,-24
    5048:	dfc00515 	stw	ra,20(sp)
    504c:	df000415 	stw	fp,16(sp)
    5050:	df000404 	addi	fp,sp,16
    5054:	e13ffd15 	stw	r4,-12(fp)
    5058:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    505c:	e0bffc17 	ldw	r2,-16(fp)
    5060:	10800017 	ldw	r2,0(r2)
    5064:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5068:	e13ffd17 	ldw	r4,-12(fp)
    506c:	00003700 	call	370 <strlen>
    5070:	10800044 	addi	r2,r2,1
    5074:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5078:	00000d06 	br	50b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    507c:	e0bfff17 	ldw	r2,-4(fp)
    5080:	10800217 	ldw	r2,8(r2)
    5084:	e0fffe17 	ldw	r3,-8(fp)
    5088:	180d883a 	mov	r6,r3
    508c:	e17ffd17 	ldw	r5,-12(fp)
    5090:	1009883a 	mov	r4,r2
    5094:	00053740 	call	5374 <memcmp>
    5098:	1000021e 	bne	r2,zero,50a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    509c:	e0bfff17 	ldw	r2,-4(fp)
    50a0:	00000706 	br	50c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    50a4:	e0bfff17 	ldw	r2,-4(fp)
    50a8:	10800017 	ldw	r2,0(r2)
    50ac:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    50b0:	e0ffff17 	ldw	r3,-4(fp)
    50b4:	e0bffc17 	ldw	r2,-16(fp)
    50b8:	18bff01e 	bne	r3,r2,507c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    50bc:	0005883a 	mov	r2,zero
}
    50c0:	e037883a 	mov	sp,fp
    50c4:	dfc00117 	ldw	ra,4(sp)
    50c8:	df000017 	ldw	fp,0(sp)
    50cc:	dec00204 	addi	sp,sp,8
    50d0:	f800283a 	ret

000050d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    50d4:	defffb04 	addi	sp,sp,-20
    50d8:	dfc00415 	stw	ra,16(sp)
    50dc:	df000315 	stw	fp,12(sp)
    50e0:	df000304 	addi	fp,sp,12
    50e4:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    50e8:	d0a00417 	ldw	r2,-32752(gp)
    50ec:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    50f0:	00003106 	br	51b8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    50f4:	e0bfff17 	ldw	r2,-4(fp)
    50f8:	10800217 	ldw	r2,8(r2)
    50fc:	1009883a 	mov	r4,r2
    5100:	00003700 	call	370 <strlen>
    5104:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    5108:	e0bfff17 	ldw	r2,-4(fp)
    510c:	10c00217 	ldw	r3,8(r2)
    5110:	e0bffe17 	ldw	r2,-8(fp)
    5114:	10bfffc4 	addi	r2,r2,-1
    5118:	1885883a 	add	r2,r3,r2
    511c:	10800003 	ldbu	r2,0(r2)
    5120:	10803fcc 	andi	r2,r2,255
    5124:	1080201c 	xori	r2,r2,128
    5128:	10bfe004 	addi	r2,r2,-128
    512c:	10800bd8 	cmpnei	r2,r2,47
    5130:	1000031e 	bne	r2,zero,5140 <alt_find_file+0x6c>
    {
      len -= 1;
    5134:	e0bffe17 	ldw	r2,-8(fp)
    5138:	10bfffc4 	addi	r2,r2,-1
    513c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5140:	e0bffe17 	ldw	r2,-8(fp)
    5144:	e0fffd17 	ldw	r3,-12(fp)
    5148:	1885883a 	add	r2,r3,r2
    514c:	10800003 	ldbu	r2,0(r2)
    5150:	10803fcc 	andi	r2,r2,255
    5154:	1080201c 	xori	r2,r2,128
    5158:	10bfe004 	addi	r2,r2,-128
    515c:	10800be0 	cmpeqi	r2,r2,47
    5160:	1000081e 	bne	r2,zero,5184 <alt_find_file+0xb0>
    5164:	e0bffe17 	ldw	r2,-8(fp)
    5168:	e0fffd17 	ldw	r3,-12(fp)
    516c:	1885883a 	add	r2,r3,r2
    5170:	10800003 	ldbu	r2,0(r2)
    5174:	10803fcc 	andi	r2,r2,255
    5178:	1080201c 	xori	r2,r2,128
    517c:	10bfe004 	addi	r2,r2,-128
    5180:	10000a1e 	bne	r2,zero,51ac <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    5184:	e0bfff17 	ldw	r2,-4(fp)
    5188:	10800217 	ldw	r2,8(r2)
    518c:	e0fffe17 	ldw	r3,-8(fp)
    5190:	180d883a 	mov	r6,r3
    5194:	e17ffd17 	ldw	r5,-12(fp)
    5198:	1009883a 	mov	r4,r2
    519c:	00053740 	call	5374 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    51a0:	1000021e 	bne	r2,zero,51ac <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    51a4:	e0bfff17 	ldw	r2,-4(fp)
    51a8:	00000706 	br	51c8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    51ac:	e0bfff17 	ldw	r2,-4(fp)
    51b0:	10800017 	ldw	r2,0(r2)
    51b4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    51b8:	e0ffff17 	ldw	r3,-4(fp)
    51bc:	d0a00404 	addi	r2,gp,-32752
    51c0:	18bfcc1e 	bne	r3,r2,50f4 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    51c4:	0005883a 	mov	r2,zero
}
    51c8:	e037883a 	mov	sp,fp
    51cc:	dfc00117 	ldw	ra,4(sp)
    51d0:	df000017 	ldw	fp,0(sp)
    51d4:	dec00204 	addi	sp,sp,8
    51d8:	f800283a 	ret

000051dc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    51dc:	defffc04 	addi	sp,sp,-16
    51e0:	df000315 	stw	fp,12(sp)
    51e4:	df000304 	addi	fp,sp,12
    51e8:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    51ec:	00bffa04 	movi	r2,-24
    51f0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    51f4:	e03fff15 	stw	zero,-4(fp)
    51f8:	00001d06 	br	5270 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    51fc:	e0ffff17 	ldw	r3,-4(fp)
    5200:	1805883a 	mov	r2,r3
    5204:	1085883a 	add	r2,r2,r2
    5208:	10c5883a 	add	r2,r2,r3
    520c:	100490ba 	slli	r2,r2,2
    5210:	00c00034 	movhi	r3,0
    5214:	10c7883a 	add	r3,r2,r3
    5218:	18979f17 	ldw	r2,24188(r3)
    521c:	1000111e 	bne	r2,zero,5264 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    5220:	e0ffff17 	ldw	r3,-4(fp)
    5224:	1805883a 	mov	r2,r3
    5228:	1085883a 	add	r2,r2,r2
    522c:	10c5883a 	add	r2,r2,r3
    5230:	100490ba 	slli	r2,r2,2
    5234:	e13ffd17 	ldw	r4,-12(fp)
    5238:	00c00034 	movhi	r3,0
    523c:	10c7883a 	add	r3,r2,r3
    5240:	19179f15 	stw	r4,24188(r3)
      if (i > alt_max_fd)
    5244:	d0e00817 	ldw	r3,-32736(gp)
    5248:	e0bfff17 	ldw	r2,-4(fp)
    524c:	1880020e 	bge	r3,r2,5258 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    5250:	e0bfff17 	ldw	r2,-4(fp)
    5254:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    5258:	e0bfff17 	ldw	r2,-4(fp)
    525c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    5260:	00000706 	br	5280 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
    5264:	e0bfff17 	ldw	r2,-4(fp)
    5268:	10800044 	addi	r2,r2,1
    526c:	e0bfff15 	stw	r2,-4(fp)
    5270:	e0bfff17 	ldw	r2,-4(fp)
    5274:	10800810 	cmplti	r2,r2,32
    5278:	103fe01e 	bne	r2,zero,51fc <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    527c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    5280:	e0bffe17 	ldw	r2,-8(fp)
}
    5284:	e037883a 	mov	sp,fp
    5288:	df000017 	ldw	fp,0(sp)
    528c:	dec00104 	addi	sp,sp,4
    5290:	f800283a 	ret

00005294 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    5294:	defffe04 	addi	sp,sp,-8
    5298:	df000115 	stw	fp,4(sp)
    529c:	df000104 	addi	fp,sp,4
    52a0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    52a4:	e0bfff17 	ldw	r2,-4(fp)
    52a8:	10bffe84 	addi	r2,r2,-6
    52ac:	10c00428 	cmpgeui	r3,r2,16
    52b0:	1800191e 	bne	r3,zero,5318 <alt_exception_cause_generated_bad_addr+0x84>
    52b4:	100690ba 	slli	r3,r2,2
    52b8:	00800034 	movhi	r2,0
    52bc:	1885883a 	add	r2,r3,r2
    52c0:	1094b217 	ldw	r2,21192(r2)
    52c4:	1000683a 	jmp	r2
    52c8:	00005308 	cmpgei	zero,zero,332
    52cc:	00005308 	cmpgei	zero,zero,332
    52d0:	00005318 	cmpnei	zero,zero,332
    52d4:	00005318 	cmpnei	zero,zero,332
    52d8:	00005318 	cmpnei	zero,zero,332
    52dc:	00005308 	cmpgei	zero,zero,332
    52e0:	00005310 	cmplti	zero,zero,332
    52e4:	00005318 	cmpnei	zero,zero,332
    52e8:	00005308 	cmpgei	zero,zero,332
    52ec:	00005308 	cmpgei	zero,zero,332
    52f0:	00005318 	cmpnei	zero,zero,332
    52f4:	00005308 	cmpgei	zero,zero,332
    52f8:	00005310 	cmplti	zero,zero,332
    52fc:	00005318 	cmpnei	zero,zero,332
    5300:	00005318 	cmpnei	zero,zero,332
    5304:	00005308 	cmpgei	zero,zero,332
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    5308:	00800044 	movi	r2,1
    530c:	00000306 	br	531c <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    5310:	0005883a 	mov	r2,zero
    5314:	00000106 	br	531c <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
    5318:	0005883a 	mov	r2,zero
  }
}
    531c:	e037883a 	mov	sp,fp
    5320:	df000017 	ldw	fp,0(sp)
    5324:	dec00104 	addi	sp,sp,4
    5328:	f800283a 	ret

0000532c <atexit>:
    532c:	200b883a 	mov	r5,r4
    5330:	000f883a 	mov	r7,zero
    5334:	000d883a 	mov	r6,zero
    5338:	0009883a 	mov	r4,zero
    533c:	00054001 	jmpi	5400 <__register_exitproc>

00005340 <exit>:
    5340:	defffe04 	addi	sp,sp,-8
    5344:	000b883a 	mov	r5,zero
    5348:	dc000015 	stw	r16,0(sp)
    534c:	dfc00115 	stw	ra,4(sp)
    5350:	2021883a 	mov	r16,r4
    5354:	00054900 	call	5490 <__call_exitprocs>
    5358:	00800034 	movhi	r2,0
    535c:	111c1717 	ldw	r4,28764(r2)
    5360:	20800f17 	ldw	r2,60(r4)
    5364:	10000126 	beq	r2,zero,536c <exit+0x2c>
    5368:	103ee83a 	callr	r2
    536c:	8009883a 	mov	r4,r16
    5370:	00055a80 	call	55a8 <_exit>

00005374 <memcmp>:
    5374:	30800130 	cmpltui	r2,r6,4
    5378:	10000b1e 	bne	r2,zero,53a8 <memcmp+0x34>
    537c:	2144b03a 	or	r2,r4,r5
    5380:	108000cc 	andi	r2,r2,3
    5384:	10001a1e 	bne	r2,zero,53f0 <memcmp+0x7c>
    5388:	20c00017 	ldw	r3,0(r4)
    538c:	28800017 	ldw	r2,0(r5)
    5390:	1880171e 	bne	r3,r2,53f0 <memcmp+0x7c>
    5394:	31bfff04 	addi	r6,r6,-4
    5398:	30800128 	cmpgeui	r2,r6,4
    539c:	21000104 	addi	r4,r4,4
    53a0:	29400104 	addi	r5,r5,4
    53a4:	103ff81e 	bne	r2,zero,5388 <memcmp+0x14>
    53a8:	30ffffc4 	addi	r3,r6,-1
    53ac:	30000e26 	beq	r6,zero,53e8 <memcmp+0x74>
    53b0:	29800003 	ldbu	r6,0(r5)
    53b4:	20800003 	ldbu	r2,0(r4)
    53b8:	30800f1e 	bne	r6,r2,53f8 <memcmp+0x84>
    53bc:	18800044 	addi	r2,r3,1
    53c0:	20c00044 	addi	r3,r4,1
    53c4:	2089883a 	add	r4,r4,r2
    53c8:	00000506 	br	53e0 <memcmp+0x6c>
    53cc:	18800003 	ldbu	r2,0(r3)
    53d0:	29800003 	ldbu	r6,0(r5)
    53d4:	18c00044 	addi	r3,r3,1
    53d8:	10803fcc 	andi	r2,r2,255
    53dc:	1180061e 	bne	r2,r6,53f8 <memcmp+0x84>
    53e0:	29400044 	addi	r5,r5,1
    53e4:	193ff91e 	bne	r3,r4,53cc <memcmp+0x58>
    53e8:	0005883a 	mov	r2,zero
    53ec:	f800283a 	ret
    53f0:	30ffffc4 	addi	r3,r6,-1
    53f4:	003fee06 	br	53b0 <memcmp+0x3c>
    53f8:	1185c83a 	sub	r2,r2,r6
    53fc:	f800283a 	ret

00005400 <__register_exitproc>:
    5400:	00800034 	movhi	r2,0
    5404:	10dc1717 	ldw	r3,28764(r2)
    5408:	18805217 	ldw	r2,328(r3)
    540c:	10001726 	beq	r2,zero,546c <__register_exitproc+0x6c>
    5410:	10c00117 	ldw	r3,4(r2)
    5414:	1a000808 	cmpgei	r8,r3,32
    5418:	40001b1e 	bne	r8,zero,5488 <__register_exitproc+0x88>
    541c:	20000b26 	beq	r4,zero,544c <__register_exitproc+0x4c>
    5420:	181090ba 	slli	r8,r3,2
    5424:	02400044 	movi	r9,1
    5428:	48d2983a 	sll	r9,r9,r3
    542c:	1211883a 	add	r8,r2,r8
    5430:	41802215 	stw	r6,136(r8)
    5434:	11806217 	ldw	r6,392(r2)
    5438:	21000098 	cmpnei	r4,r4,2
    543c:	324cb03a 	or	r6,r6,r9
    5440:	11806215 	stw	r6,392(r2)
    5444:	41c04215 	stw	r7,264(r8)
    5448:	20000b26 	beq	r4,zero,5478 <__register_exitproc+0x78>
    544c:	19000084 	addi	r4,r3,2
    5450:	200890ba 	slli	r4,r4,2
    5454:	18c00044 	addi	r3,r3,1
    5458:	10c00115 	stw	r3,4(r2)
    545c:	1105883a 	add	r2,r2,r4
    5460:	11400015 	stw	r5,0(r2)
    5464:	0005883a 	mov	r2,zero
    5468:	f800283a 	ret
    546c:	18805304 	addi	r2,r3,332
    5470:	18805215 	stw	r2,328(r3)
    5474:	003fe606 	br	5410 <__register_exitproc+0x10>
    5478:	11006317 	ldw	r4,396(r2)
    547c:	2252b03a 	or	r9,r4,r9
    5480:	12406315 	stw	r9,396(r2)
    5484:	003ff106 	br	544c <__register_exitproc+0x4c>
    5488:	00bfffc4 	movi	r2,-1
    548c:	f800283a 	ret

00005490 <__call_exitprocs>:
    5490:	defff704 	addi	sp,sp,-36
    5494:	00800034 	movhi	r2,0
    5498:	ddc00715 	stw	r23,28(sp)
    549c:	15dc1717 	ldw	r23,28764(r2)
    54a0:	dd400515 	stw	r21,20(sp)
    54a4:	dd000415 	stw	r20,16(sp)
    54a8:	dcc00315 	stw	r19,12(sp)
    54ac:	dfc00815 	stw	ra,32(sp)
    54b0:	dd800615 	stw	r22,24(sp)
    54b4:	dc800215 	stw	r18,8(sp)
    54b8:	dc400115 	stw	r17,4(sp)
    54bc:	dc000015 	stw	r16,0(sp)
    54c0:	2029883a 	mov	r20,r4
    54c4:	282b883a 	mov	r21,r5
    54c8:	04c00044 	movi	r19,1
    54cc:	bc805217 	ldw	r18,328(r23)
    54d0:	90000d26 	beq	r18,zero,5508 <__call_exitprocs+0x78>
    54d4:	94000117 	ldw	r16,4(r18)
    54d8:	847fffc4 	addi	r17,r16,-1
    54dc:	88000a16 	blt	r17,zero,5508 <__call_exitprocs+0x78>
    54e0:	84000044 	addi	r16,r16,1
    54e4:	802090ba 	slli	r16,r16,2
    54e8:	9421883a 	add	r16,r18,r16
    54ec:	a8001126 	beq	r21,zero,5534 <__call_exitprocs+0xa4>
    54f0:	80804017 	ldw	r2,256(r16)
    54f4:	15400f26 	beq	r2,r21,5534 <__call_exitprocs+0xa4>
    54f8:	8c7fffc4 	addi	r17,r17,-1
    54fc:	88bfffd8 	cmpnei	r2,r17,-1
    5500:	843fff04 	addi	r16,r16,-4
    5504:	103ff91e 	bne	r2,zero,54ec <__call_exitprocs+0x5c>
    5508:	dfc00817 	ldw	ra,32(sp)
    550c:	ddc00717 	ldw	r23,28(sp)
    5510:	dd800617 	ldw	r22,24(sp)
    5514:	dd400517 	ldw	r21,20(sp)
    5518:	dd000417 	ldw	r20,16(sp)
    551c:	dcc00317 	ldw	r19,12(sp)
    5520:	dc800217 	ldw	r18,8(sp)
    5524:	dc400117 	ldw	r17,4(sp)
    5528:	dc000017 	ldw	r16,0(sp)
    552c:	dec00904 	addi	sp,sp,36
    5530:	f800283a 	ret
    5534:	90800117 	ldw	r2,4(r18)
    5538:	81800017 	ldw	r6,0(r16)
    553c:	10bfffc4 	addi	r2,r2,-1
    5540:	14401526 	beq	r2,r17,5598 <__call_exitprocs+0x108>
    5544:	80000015 	stw	zero,0(r16)
    5548:	303feb26 	beq	r6,zero,54f8 <__call_exitprocs+0x68>
    554c:	9c46983a 	sll	r3,r19,r17
    5550:	90806217 	ldw	r2,392(r18)
    5554:	95800117 	ldw	r22,4(r18)
    5558:	1884703a 	and	r2,r3,r2
    555c:	1000061e 	bne	r2,zero,5578 <__call_exitprocs+0xe8>
    5560:	303ee83a 	callr	r6
    5564:	90800117 	ldw	r2,4(r18)
    5568:	15bfd81e 	bne	r2,r22,54cc <__call_exitprocs+0x3c>
    556c:	b8805217 	ldw	r2,328(r23)
    5570:	14bfe126 	beq	r2,r18,54f8 <__call_exitprocs+0x68>
    5574:	003fd506 	br	54cc <__call_exitprocs+0x3c>
    5578:	90806317 	ldw	r2,396(r18)
    557c:	81002017 	ldw	r4,128(r16)
    5580:	1886703a 	and	r3,r3,r2
    5584:	1800061e 	bne	r3,zero,55a0 <__call_exitprocs+0x110>
    5588:	200b883a 	mov	r5,r4
    558c:	a009883a 	mov	r4,r20
    5590:	303ee83a 	callr	r6
    5594:	003ff306 	br	5564 <__call_exitprocs+0xd4>
    5598:	94400115 	stw	r17,4(r18)
    559c:	003fea06 	br	5548 <__call_exitprocs+0xb8>
    55a0:	303ee83a 	callr	r6
    55a4:	003fef06 	br	5564 <__call_exitprocs+0xd4>

000055a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    55a8:	defffd04 	addi	sp,sp,-12
    55ac:	df000215 	stw	fp,8(sp)
    55b0:	df000204 	addi	fp,sp,8
    55b4:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    55b8:	0001883a 	nop
    55bc:	e0bffe17 	ldw	r2,-8(fp)
    55c0:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    55c4:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    55c8:	10000226 	beq	r2,zero,55d4 <_exit+0x2c>
    ALT_SIM_FAIL();
    55cc:	002af070 	cmpltui	zero,zero,43969
    55d0:	00000106 	br	55d8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    55d4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    55d8:	003fff06 	br	55d8 <_exit+0x30>
